{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Introduction to Chainer",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [
        "71RNU5KmMq31",
        "3sFOwliOMq4Q",
        "BywdNhUSMq4s"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "metadata": {
        "colab_type": "text",
        "id": "n0_KFOv4Mq3N"
      },
      "cell_type": "markdown",
      "source": [
        "[![colab-logo](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/mitmul/medical-ai-course-materials/blob/master/notebooks/Introduction_to_Chainer.ipynb)\n",
        "\n",
        "# Deep Learningフレームワークの基礎\n",
        "\n",
        "Chainerは，現在様々なDeep Learningフレームワーク（TensorFlow, PyTorch, etc.）でも採用され主要なニューラルネットワークの記法となっている**Define-by-Run**というアイデアを初めに提案したDeep Learningフレームワークで，2015年からPreferred Networks社が開発を続けています．ここでは，その**柔軟性**と**直感的である**ことを特徴とするこのChainerというフレームワークの基本的な使い方を解説します．"
      ]
    },
    {
      "metadata": {
        "id": "bIrdN3L9reS0",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## 環境構築\n",
        "\n",
        "まずはColab上で以下のセルを実行し，最新版のChainerをインストールしましょう．ここでは同時に`graphviz`というソフトウェアもインストールしています．これは，後にニューラルネットワークのアーキテクチャをグラフ構造として可視化するために使用します．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-IPVDlAAMtK1",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!curl https://colab.chainer.org/install | sh -\n",
        "!apt-get install -y graphviz"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "YLbP1BkTMq3W"
      },
      "cell_type": "markdown",
      "source": [
        "それでは，以下のコマンドをターミナルで実行し，Chainerや，ChainerでGPUを活用するために必要となるCuPyというパッケージが正しくインストールされているかどうかを確認してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "pNPcxcV1Mq3X",
        "outputId": "fd5b6a0e-65b0-4b05-d40e-a3e850fb8b94",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "cell_type": "code",
      "source": [
        "!python -c 'import chainer; chainer.print_runtime_info()'"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Platform: Linux-4.14.65+-x86_64-with-Ubuntu-18.04-bionic\n",
            "Chainer: 5.0.0\n",
            "NumPy: 1.14.6\n",
            "CuPy:\n",
            "  CuPy Version          : 5.0.0\n",
            "  CUDA Root             : /usr/local/cuda\n",
            "  CUDA Build Version    : 9020\n",
            "  CUDA Driver Version   : 9020\n",
            "  CUDA Runtime Version  : 9020\n",
            "  cuDNN Build Version   : 7201\n",
            "  cuDNN Version         : 7201\n",
            "  NCCL Build Version    : 2213\n",
            "iDeep: Not Available\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "8GFokOwXMq3b"
      },
      "cell_type": "markdown",
      "source": [
        "Chainer, NumPy, そしてCuPy, さらにCuPyの下にCUDAやcuDNN, NCCLといった項目があり，それぞれバージョン番号が表示されていれば成功です．以下のチュートリアルでは，matplotlibをグラフの可視化に使いますので，これも同時にインストールしておきましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "AGHezHvdMq3b",
        "outputId": "49778ca1-fce2-48f5-99a6-ea7883e517f5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 156
        }
      },
      "cell_type": "code",
      "source": [
        "!pip install matplotlib"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (2.1.2)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.11.0)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.5.3)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.3.0)\n",
            "Requirement already satisfied: numpy>=1.7.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.14.6)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2018.7)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (0.10.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Cp1v4ygDMq3f"
      },
      "cell_type": "markdown",
      "source": [
        "## 学習ループを書いてみよう\n",
        "\n",
        "まずは，最もシンプルなタスクに実際に取り組むことによって，Chainerの基本的な使い方を説明していきます．さっそく，有名な手書き数字のデータセットMNISTを使って，画像を10クラスのいずれかに分類するネットワークを書き，学習させてみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "pON7OjrkMq3f"
      },
      "cell_type": "markdown",
      "source": [
        "### データセットの準備\n",
        "\n",
        "教師あり学習の場合，**データセットは「入力データ」と「それと対になるラベルデータ」を返すオブジェクトである必要があります．**\n",
        "ChainerにはMNISTやCIFAR10/100のようなよく用いられるデータセットに対して，データをダウンロードしてくるところからそのような機能をもったオブジェクトを作るところまで自動的にやってくれる便利なメソッドがあるので，ここではひとまずこれを用いましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "co0qbD2dMq3f",
        "outputId": "2e60be35-03dc-4936-e744-b06acc7a71af",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import mnist\n",
        "\n",
        "# データセットがダウンロード済みでなければ，ダウンロードも行う\n",
        "train_val, test = mnist.get_mnist(withlabel=True, ndim=1)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading from http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz...\n",
            "Downloading from http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz...\n",
            "Downloading from http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz...\n",
            "Downloading from http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz...\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "k6phOMcvMq3j"
      },
      "cell_type": "markdown",
      "source": [
        "データセットオブジェクトの準備ができました．これは，例えば `train_val[i]` などとすると**i番目の (data, label) というタプルを返すリスト** と同様のものになっています（**実際ただのPythonリストもChainerのデータセットオブジェクトとして使えます**）．では0番目のデータとラベルを取り出して，表示してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "uylrRDSfMq3k",
        "outputId": "834e40d8-d275-4545-e399-a2a76151068a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "cell_type": "code",
      "source": [
        "# matplotlibを使ったグラフ描画結果がnotebook内に表示されるようにします．\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# データの例示\n",
        "x, t = train_val[0]  # 0番目の (data, label) を取り出す\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.axis('off')\n",
        "plt.show()\n",
        "print('label:', t)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAD4CAYAAADFJPs2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAABqlJREFUeJzt3btLV/Efx/G+v6KhqMSlIIiwoagI\nlwoiiAiJoAarRWgqmhKaXNoaiqDLIDU4BS3R2GWpwS5DIESXRWgv3MoudsP8/v6B3/ftL/Wb5uvx\nWF+czhl6cqBPRxvNZnMJsLj9Z74fAGg/oUMAoUMAoUMAoUOAZX/jJo1Gwz/tQ5s1m81Gq80bHQII\nHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQII\nHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIsm+8H\noD2WLl1a7mvWrGnr/fv7+1tuK1asKK/dvHlzuZ85c6bcr1y50nLr6+srr/3x40e5X7p0qdzPnz9f\n7vPFGx0CCB0CCB0CCB0CCB0CCB0CCB0COEdvow0bNpT78uXLy33Pnj3lvnfv3pZbR0dHee2xY8fK\nfT69e/eu3AcHB8u9t7e35fbly5fy2jdv3pT706dPy32h8kaHAEKHAEKHAEKHAEKHAEKHAI1ms9n+\nmzQa7b/JPOju7i734eHhcm/3p6IL1dTUVLmfPHmy3L9+/Trje4+NjZX7x48fy/3t27czvne7NZvN\nRqvNGx0CCB0CCB0CCB0CCB0CCB0CCB0COEefhc7OznIfGRkp966urrl8nDk13bOPj4+X+/79+1tu\nv379Kq9N/f8Fs+UcHcIJHQIIHQIIHQIIHQIIHQIIHQL4cc+z8OHDh3IfGBgo98OHD5f7q1evyn26\nH3tcef36dbn39PSU+8TERLlv27at5Xb27NnyWuaeNzoEEDoEEDoEEDoEEDoEEDoEEDoE8D36PFq9\nenW5T/crfoeGhlpup06dKq89ceJEud++fbvcWXh8jw7hhA4BhA4BhA4BhA4BhA4BhA4BfI8+jz5/\n/jyr6z99+jTja0+fPl3ud+7cKffpfsc5C4s3OgQQOgQQOgQQOgQQOgQQOgTwmeo/bOXKlS23+/fv\nl9fu27ev3A8dOlTujx49Knf+Pp+pQjihQwChQwChQwChQwChQwChQwDn6IvUpk2byv3ly5flPj4+\nXu6PHz8u9xcvXrTcbty4UV77N/5OLkbO0SGc0CGA0CGA0CGA0CGA0CGA0CGAc/RQvb295X7z5s1y\nX7Vq1Yzvfe7cuXK/detWuY+Njc343ouZc3QIJ3QIIHQIIHQIIHQIIHQIIHQI4Byd/2n79u3lfu3a\ntXI/cODAjO89NDRU7hcuXCj39+/fz/je/zLn6BBO6BBA6BBA6BBA6BBA6BBA6BDAOToz0tHRUe5H\njhxpuU33rXuj0fI4eMmSJUuWDA8Pl3tPT0+5L1bO0SGc0CGA0CGA0CGA0CGA0CGA4zX+up8/f5b7\nsmXLyn1ycrLcDx482HJ78uRJee2/zPEahBM6BBA6BBA6BBA6BBA6BBA6BKgPLIm1Y8eOcj9+/Hi5\n79y5s+U23Tn5dEZHR8v92bNns/rzFyNvdAggdAggdAggdAggdAggdAggdAjgHH2R2rx5c7n39/eX\n+9GjR8t93bp1f/xM/6/fv3+X+9jYWLlPTU3N5eMsCt7oEEDoEEDoEEDoEEDoEEDoEEDoEMA5+gI2\n3Vl1X19fy226c/KNGzfO5JHmxIsXL8r9woUL5X7v3r25fJwI3ugQQOgQQOgQQOgQQOgQQOgQwPFa\nG61du7bct27dWu7Xr18v9y1btvzxM82VkZGRcr98+XLL7e7du+W1PjOde97oEEDoEEDoEEDoEEDo\nEEDoEEDoEMA5+jQ6OztbbkNDQ+W13d3d5d7V1TWjZ5oLz58/L/erV6+W+8OHD8v9+/fvf/xMtI83\nOgQQOgQQOgQQOgQQOgQQOgQQOgRY9Ofou3fvLveBgYFy37VrV8tt/fr1M3qmufLt27eW2+DgYHnt\nxYsXy31iYmJGz8TC5I0OAYQOAYQOAYQOAYQOAYQOAYQOARb9OXpvb++s9tkYHR0t9wcPHpT75ORk\nuVffjI+Pj5fXksUbHQIIHQIIHQIIHQIIHQIIHQIIHQI0ms1m+2/SaLT/JhCu2Ww2Wm3e6BBA6BBA\n6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA\n6BDgr/y4Z2B+eaNDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFD\nAKFDAKFDAKFDAKFDAKFDAKFDAKFDgP8Ca9g1McGyJGQAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f98e117ea20>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "label: 5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "oTy7XDwMMq3o"
      },
      "cell_type": "markdown",
      "source": [
        "### Validation用データセットを作る\n",
        "\n",
        "次に，上で作成した`train_val`データセットを，Training用のデータセットとValidation用のデータセットに分割します．これもChainerが提供しているデータセット分割用の関数を用いて行うことができます．元々60000個のデータが入っている`train`データセットを，ランダムに選択された50000個のデータと残りの10000個のデータの2つに分割しましょう．これには，`split_dataset_random`という関数を使用します．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xeCk_TCcMq3o",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import split_dataset_random\n",
        "\n",
        "train, valid = split_dataset_random(train_val, 50000, seed=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kJrPx08DMq3q"
      },
      "cell_type": "markdown",
      "source": [
        "第1引数が分割したい対象のデータセットオブジェクト，第2引数は1つ目のデータセットの要素数，3つ目の引数はランダムな抽出を行う際に用いられる乱数シードです（これは省略することができます）．\n",
        "\n",
        "これで元々の`train_val`を，ランダムに選んだ50000個のデータからなる`train`データセットと，残りの10000個からなる`valid`データセットに分けることができます．何度も実行する際に異なる分け方になってしまわないよう，第3引数の`seed`を設定しておくことをオススメします．それでは，それぞれのデータセットの中に入っているデータの数を確認してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "TfT0WBQfMq3r",
        "outputId": "c27581e2-9cc2-4a47-ac5e-b47d4924eae4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "print('Training dataset size:', len(train))\n",
        "print('Validation dataset size:', len(valid))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training dataset size: 50000\n",
            "Validation dataset size: 10000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "IbZLLj6ZMq3v"
      },
      "cell_type": "markdown",
      "source": [
        "### Iteratorの作成\n",
        "\n",
        "データセットの準備は完了しましたが，これらをそのままニューラルネットワークの学習に使うのは，少し不便があります．なぜなら，ニューラルネットワークのパラメータ最適化手法として広く用いられているStochastic Gradient Descent (SGD)という手法は，ニューラルネットワークにデータを一つ一つ入力するのではなく，いくつかのデータを束ねた **ミニバッチ** と呼ばれるまとまりを作って入力するためです．そのため，**バッチサイズ分だけデータとラベルを束ねる作業が必要です．**．\n",
        "\n",
        "そこで，**データセットから決まった数のデータとラベルを取得し，それらを束ねてミニバッチを作ってくれる機能を持ったIteratorを使います**．`Iterator`は，先程作ったデータセットオブジェクトをくるむ形で作ることができ，`next()`メソッドで新しいミニバッチを返してくれます．データセット内のデータすべてを1回ずつ学習に利用し終えた時点のことを1エポック（epoch）と呼びますが，Iteratorの内部ではこのエポックカウントなどの情報が記録されており，データセット内のデータを何度も使って学習のループを回すようなコードを書く際に便利です．\n",
        "\n",
        "データセットオブジェクトからイテレータを作るには，以下のようにします．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "cZdvCRhxMq3w",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import iterators\n",
        "\n",
        "batchsize = 128\n",
        "\n",
        "train_iter = iterators.SerialIterator(train, batchsize)\n",
        "valid_iter = iterators.SerialIterator(\n",
        "    valid, batchsize, repeat=False, shuffle=False)\n",
        "test_iter = iterators.SerialIterator(\n",
        "    test, batchsize, repeat=False, shuffle=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "elxQ9EGEMq30"
      },
      "cell_type": "markdown",
      "source": [
        "今，学習に用いるデータセット用のイテレータ（`train_iter`）と，検証用のデータセット用のイテレータ（`valid_iter`），および学習したネットワークの評価に用いるテストデータセット用のイテレータ（`test_iter`）の計3つを作成しました．ここでは`batchsize = 128`としているため，作成した3つの`Iterator`はそれぞれ，`next()`メソッドが呼ばれたとき（例えば`train_iter.next()`）**128枚の数字画像データを一括りにして返します**．実際に`next()`の返り値を調べてみましょう．"
      ]
    },
    {
      "metadata": {
        "id": "q8NpWnEyPVDJ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "batch = train_iter.next()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "MH5CRLQdRhBb",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "この`batch`という変数は，`(img, label)`というタプルが128個（ミニバッチサイズ個）並んだリストになっています．それでは，このリストの長さが確かにミニバッチサイズの128であることを確かめてみましょう．"
      ]
    },
    {
      "metadata": {
        "id": "BdkvW4y2RlJt",
        "colab_type": "code",
        "outputId": "097e38c5-20ba-4e2f-dadb-a7171990ec86",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "print('batchsize:', len(batch))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "batchsize: 128\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "b2Tkc_aCWTTk",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "次に，この`batch`というリストの一つ目の要素（画像とラベルを持つタプルになっているはずです）を`batch[0]`として取り出してみます．"
      ]
    },
    {
      "metadata": {
        "id": "TGrVsbkmWqkm",
        "colab_type": "code",
        "outputId": "605857ee-a851-4885-c54f-607653628d03",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "x, t = batch[0]\n",
        "\n",
        "print('x:', x.shape)\n",
        "print('t:', t.shape)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "x: (784,)\n",
            "t: ()\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "8xflt5_YRXBp",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "そのときの返り値である2つの配列 `x` と `t` のshapeを調べてみると，データはそれぞれ784次元の1次元ベクトルとして格納されていて，正解ラベルはスカラであることが分かります．784は，$28 \\times 28$で，28ピクセル四方の画像データの画素値を1列に並べたものになっています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "71RNU5KmMq31"
      },
      "cell_type": "markdown",
      "source": [
        "#### SerialIteratorについて\n",
        "\n",
        "Chainerがいくつか用意している`Iterator`の一種である`SerialIterator`は，データセットの中のデータを順番に取り出してくる最もシンプルな`Iterator`です．コンストラクタの引数にデータセットオブジェクトと，バッチサイズを取ります．このとき，渡したデータセットオブジェクトから，何周も何周もデータを繰り返し読み出す必要がある場合は`repeat`引数を`True`とし，1周が終わったらそれ以上データを取り出したくない場合はこれを`False`とします．これは，主にvalidation用のデータセットに対して使うフラグです．デフォルトでは，`True`になっています．また，`shuffle`引数に`True`を渡すと，データセットから取り出されてくるデータの順番をエポックごとにランダムに変更します．`SerialIterator`の他にも，マルチプロセスで高速にデータを処理できるようにした`MultiprocessIterator`や`MultithreadIterator`など，複数の`Iterator`が用意されています．詳しくは以下を見てください．\n",
        "\n",
        "- [Chainerで使えるIterator一覧](https://docs.chainer.org/en/stable/reference/iterators.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "PX0GJaWLMq32"
      },
      "cell_type": "markdown",
      "source": [
        "### ネットワークの定義\n",
        "\n",
        "では，学習させるネットワークを定義してみましょう．今回は，全結合層のみからなる多層パーセプトロンを作ってみます．中間層のユニット数は適当に100とし，今回は10クラス分類をしたいので，出力ユニット数は10とします．今回用いるMNISTデータセットは0〜9までの数字のいずれかを意味する10種のラベルを持つためです．では，ネットワークを定義するために必要な`Link`, `Function`, そして`Chain`について，簡単にここで説明を行います．"
      ]
    },
    {
      "metadata": {
        "id": "-H4lADrCSI_o",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### LinkとFunction\n",
        "\n",
        "Chainerでは，ニューラルネットワークの各層を，`Link`と`Function`に区別します．\n",
        "\n",
        "- **Linkは，パラメータを持つ関数です．**\n",
        "- **Functionは，パラメータを持たない関数です．**\n",
        "\n",
        "これらを組み合わせてネットワークを記述します．パラメータを持つ層は，`chainer.links`モジュール以下にたくさん用意されています．パラメータを持たない層は，`chainer.functions`モジュール以下にたくさん用意されています．これらに簡単にアクセスするために，\n",
        "\n",
        "```\n",
        "import chainer.links as L\n",
        "import chainer.functions as F\n",
        "```\n",
        "\n",
        "と別名を与えて，`L.Convolution2D(...)`や`F.relu(...)`のように用いる慣習がありますが，特にこれが決まった書き方というわけではありません．"
      ]
    },
    {
      "metadata": {
        "id": "nuv4elsRSLkj",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Chain\n",
        "\n",
        "`Chain`は，**パラメータを持つ層（Link）をまとめておくためのクラス**です．パラメータを持つということは，基本的にネットワークの学習の際にそれらを更新していく必要があるということです（更新されないパラメータを持たせることもできます）．Chainerでは，モデルのパラメータの更新は，`Optimizer`という機能が担います．その際，更新すべき全てのパラメータを簡単に発見できるように，`Chain`で一箇所にまとめておきます．そうすると，`Chain.params()`メソッドを使って**更新されるパラメータ一覧が簡単に取得できます．**"
      ]
    },
    {
      "metadata": {
        "id": "V2rcq0wlSNWN",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Chainを継承してネットワークを定義しよう\n",
        "\n",
        "Chainerでは，ネットワークは`Chain`クラスを継承したクラスとして定義されることが一般的です．その場合，そのクラスのコンストラクタで，`self.init_scope()`で作られる`with`コンテキストを作り，その中でネットワークに登場する`Link`をプロパティとして登録しておきます．こうすると，自動的に`Optimizer`が最適化対象のパラメータを持つ層だな，と捉えてくれます．\n",
        "\n",
        "もう一つ，一般的なのは，ネットワークの順伝播（データを渡して，出力を返す）を，`forward`メソッドに書いておくという方法です．こうすると，ネットワーククラスをinstantiateして作ったオブジェクトを，関数のようにして使うことができます（例：`output = net(data)`）．"
      ]
    },
    {
      "metadata": {
        "id": "o_sws9APSPR1",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### GPUで実行するには\n",
        "\n",
        "`Chain`クラスは`to_gpu`メソッドを持ち，この引数にGPU IDを指定すると，指定したGPU IDのメモリ上にネットワークの全パラメータを転送します．こうしておくと，前進計算も学習の際のパラメータ更新なども全部GPU上で行われるようになります．GPU IDとして-1を使うと，すなわちこれはCPUを意味します．"
      ]
    },
    {
      "metadata": {
        "id": "9MoCp9d4SRRh",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 同じ結果を保証したい\n",
        "\n",
        "ネットワークを書き始める前に，まずは乱数シードを固定して，本記事とほぼ同様の結果が再現できるようにしておきましょう．（cuDNNが有効になっている環境下でより厳密に計算結果の再現性を保証したい場合は，`chainer.config.cudnn_deterministic`というConfiguringオプションについて知る必要があります．こちらのドキュメントを参照してください：[chainer.config.cudnn_deterministic](https://docs.chainer.org/en/stable/reference/configuration.html?highlight=chainer.config.cudnn_deterministic)．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "5JecdGUXMq32",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import random\n",
        "import numpy\n",
        "import chainer\n",
        "\n",
        "def reset_seed(seed=0):\n",
        "    random.seed(seed)\n",
        "    numpy.random.seed(seed)\n",
        "    if chainer.cuda.available:\n",
        "        chainer.cuda.cupy.random.seed(seed)\n",
        "        \n",
        "reset_seed(0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "G_HvOMluMq37"
      },
      "cell_type": "markdown",
      "source": [
        "#### ネットワークを表すコード\n",
        "\n",
        "いよいよネットワークを書いてみます！"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "VQ-6GuZNMq3_",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import chainer\n",
        "import chainer.links as L\n",
        "import chainer.functions as F\n",
        "\n",
        "class MLP(chainer.Chain):\n",
        "\n",
        "    def __init__(self, n_mid_units=100, n_out=10):\n",
        "        super(MLP, self).__init__()\n",
        "        \n",
        "        # パラメータを持つ層の登録\n",
        "        with self.init_scope():\n",
        "            self.l1 = L.Linear(None, n_mid_units)\n",
        "            self.l2 = L.Linear(n_mid_units, n_mid_units)\n",
        "            self.l3 = L.Linear(n_mid_units, n_out)\n",
        "\n",
        "    def forward(self, x):\n",
        "        # データを受け取った際のforward計算を書く\n",
        "        h1 = F.relu(self.l1(x))\n",
        "        h2 = F.relu(self.l2(h1))\n",
        "        return self.l3(h2)\n",
        "\n",
        "gpu_id = 0  # CPUを用いる場合は，この値を-1にしてください\n",
        "\n",
        "net = MLP()\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    net.to_gpu(gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "BnYIri8AMq4C"
      },
      "cell_type": "markdown",
      "source": [
        "できました！疑問点はありませんか？ちなみに，Chainerにはたくさんの学習可能なレイヤやパラメータを持たないレイヤが用意されています．ぜひ一度以下の一覧のページを見てみましょう．\n",
        "\n",
        "- [Chainerで使える関数(Function)一覧](https://docs.chainer.org/en/stable/reference/functions.html)\n",
        "- [Chainerで学習できるレイヤ(Link)一覧](https://docs.chainer.org/en/stable/reference/links.html)\n",
        "\n",
        "`Link`一覧には，ニューラルネットワークによく用いられる全結合層や畳み込み層，LSTMなどや，ReLUなどの活性化関数などなどだけでなく，有名なネットワーク全体も`Link`として載っています．ResNetや，VGGなどです．また，`Function`一覧には，画像の大きさをresizeしたり，サイン・コサインのような関数を始め，いろいろなネットワークの要素として使える関数が載っています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qIN7jkqPMq4C"
      },
      "cell_type": "markdown",
      "source": [
        "##### 入力側ユニット数の自動計算\n",
        "\n",
        "上のネットワーク定義で，`L.Linear`は全結合層を意味しますが，最初のLinear層は第一引数に`None`が渡されています．これは，実行時に，つまり**データがその層に入力された瞬間，必要な数の入力側ユニット数を自動的に計算する**ということを意味します．ネットワークが最初に計算を行う際に，初めて `n_input` $\\times$ `n_mid_units` の大きさの行列を作成し，それを学習対象とするパラメータとして保持します．これは後々，畳み込み層を全結合層の前に配置する際などに便利な機能です．\n",
        "\n",
        "様々な`Link`は，それぞれ学習対象となるパラメータを保持しています．それらの値は，NumPyの配列として簡単に取り出して見ることができます．例えば，上のモデル`MLP`は`l1`という名前の全結合層が登録されています．この全結合層は重み行列`W`とバイアス`b`という2つのパラメータを持ちます．これらには外から以下のようにしてアクセスすることができます："
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "bn8mqvauMq4D",
        "outputId": "da66a665-2a52-46da-be32-39628f135b5c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "cell_type": "code",
      "source": [
        "print('1つ目の全結合相のバイアスパラメータの形は，', net.l1.b.shape)\n",
        "print('初期化直後のその値は，', net.l1.b.array)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1つ目の全結合相のバイアスパラメータの形は， (100,)\n",
            "初期化直後のその値は， [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0.]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "-ExaLiUFMq4H"
      },
      "cell_type": "markdown",
      "source": [
        "しかしここで，`net.l1.W.array`の中身を同様に表示してみようとすると，`None`が返されます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "U8fNWFseMq4I",
        "outputId": "3bd40269-25c6-4d82-bf86-d3738b523d61",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "print(net.l1.W.array)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qdDHoa8kMq4L"
      },
      "cell_type": "markdown",
      "source": [
        "なぜでしょうか？我々は`l1`をネットワークに登録するときに，`L.Linear`の第一引数に`None`を渡しましたね．そして，**まだネットワークに一度もデータを入力していません**．そのため，**まだ重み行列Wは作成されていません．**そのため，まだ`net.l1.W`は具体的な配列を保持していないのです．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "yF92dGMjMq4M"
      },
      "cell_type": "markdown",
      "source": [
        "### 最適化手法の選択\n",
        "\n",
        "では，上で定義したネットワークをMNISTデータセットを使って訓練してみましょう．学習時に用いる最適化の手法としてはいろいろな種類のものが提案されていますが，Chainerは多くの手法を同一のインターフェースで利用できるよう，`Optimizer`という機能でそれらを提供しています．`chainer.optimizers`モジュール以下に色々なものを見つけることができます．一覧はこちらにあります：\n",
        "\n",
        "- [Chainerで使える最適化手法一覧](https://docs.chainer.org/en/stable/reference/optimizers.html)\n",
        "\n",
        "ここでは最もシンプルな勾配降下法の手法である`optimizers.SGD`を用います．`Optimizer`のオブジェクトには，`setup`メソッドを使ってモデル（`Chain`オブジェクト）を渡します．こうすることで`Optimizer`に，何を最適化すればいいか把握させることができます．\n",
        "\n",
        "他にもいろいろな最適化手法が手軽に試せるので，色々と試してみて結果の変化を見てみてください．例えば，下の`chainer.optimizers.SGD`のうち`SGD`の部分を`MomentumSGD`, `RMSprop`,  `Adam`などに変えるだけで，最適化手法の違いがどのような学習曲線（ロスカーブ）の違いを生むかなどを簡単に調べることができます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "Bfr21c6dMq4N",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import optimizers\n",
        "\n",
        "optimizer = optimizers.SGD(lr=0.01).setup(net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "3sFOwliOMq4Q"
      },
      "cell_type": "markdown",
      "source": [
        "#### 学習率（learning rate）\n",
        "\n",
        "今回はSGDのコンストラクタの`lr`という引数に $0.01$ を与えました．この値は学習率として知られ，モデルをうまく訓練して良いパフォーマンスを発揮させるために調整する必要がある重要な**ハイパーパラメータ**として知られています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "lqFm-as1Mq4R"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習する\n",
        "\n",
        "いよいよ学習をスタートします！今回は分類問題なので，`softmax_cross_entropy`というロス関数を使って最小化すべきロスの値を計算します．\n",
        "\n",
        "まず，ネットワークにデータを渡して，出てきた出力と，入力データに対応する正解ラベルを，`Function`の一種でありスカラ値を返す**目的関数**に渡し，ロス（最小化したい値）の計算を行います．ロスは，`chainer.Variable`のオブジェクトになっています．そして，この`Variable`は，**今まで自分にどんな計算が施されたかを辿れるようになっています．**この仕組みが，Define-by-Run [[Tokui 2015]](http://learningsys.org/papers/LearningSys_2015_paper_33.pdf)とよばれる発明の中心的な役割を果たしています．\n",
        "\n",
        "**計算したロスに対する勾配をネットワークに逆向きに流していく**処理は，Chainerではネットワークが吐き出した`Variable`が持つ`backward`メソッドを呼ぶだけでできます．これを呼ぶと，前述のようにこれまでの計算過程を逆向きに遡って**誤差逆伝播用の計算グラフを構築し**，途中のパラメータの勾配を連鎖率を使って計算してくれます．（詳しくは筆者が[日本ソフトウェア科学会で行ったチュートリアルの資料](https://www.slideshare.net/mitmul/chainer-79942361)をご覧ください．）\n",
        "\n",
        "こうして計算された各パラメータに対する勾配を使って，先程`Optimizer`を作成する際に指定したアルゴリズムを使ってネットワークパラメータの更新（＝学習）が行われるわけです．\n",
        "\n",
        "まとめると，今回1回の更新処理の中で行うのは，以下の4項目です．\n",
        "\n",
        "1. ネットワークにデータを渡して出力`y`を得る\n",
        "2. 出力`y`と正解ラベル`t`を使って，最小化すべきロスの値を`softmax_cross_entropy`関数で計算する\n",
        "3. `softmax_cross_entropy`関数の出力（`Variable`）の`backward`メソッドを呼んで，ネットワークの全てのパラメータの勾配を誤差逆伝播法で計算する\n",
        "4. Optimizerの`update`メソッドを呼び，3.で計算した勾配を使って全パラメータを更新する\n",
        "\n",
        "パラメータの更新は，何度も何度も繰り返し行います．一度の更新に用いられるデータは，ネットワークに入力されたバッチサイズ分だけ束ねられたデータのみです．そのため，データセット全体のデータを使うために，次のミニバッチを入力して再度更新，その次のミニバッチを使ってまた更新，ということを繰り返すわけです．そのため，この過程を学習ループと呼んでいます．"
      ]
    },
    {
      "metadata": {
        "id": "4CEuZN9GSr8o",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 目的関数\n",
        "\n",
        "ちなみに，目的関数は，例えば分類問題ではなく簡単な回帰問題を解きたいような場合，`F.softmax_cross_entropy`の代わりに`F.mean_squared_error`などを用いることもできます．他にも，いろいろな問題設定に対応するために様々なロス関数がChainerには用意されています．こちらからその一覧を見ることができます：\n",
        "\n",
        "- [Chainerで使える目的関数（ロス関数とも呼ばれる）一覧](http://docs.chainer.org/en/stable/reference/functions.html#loss-functions)"
      ]
    },
    {
      "metadata": {
        "id": "bLSWGShBSuNk",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 学習ループのコード"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "zBYXpUQpMq4S",
        "outputId": "1338c4ec-1185-4e1f-bd5c-4f2368191b39",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        }
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from chainer.dataset import concat_examples\n",
        "from chainer.cuda import to_cpu\n",
        "\n",
        "max_epoch = 10\n",
        "\n",
        "while train_iter.epoch < max_epoch:\n",
        "    \n",
        "    # ---------- 学習の1イテレーション ----------\n",
        "    train_batch = train_iter.next()\n",
        "    x, t = concat_examples(train_batch, gpu_id)\n",
        "    \n",
        "    # 予測値の計算\n",
        "    y = net(x)\n",
        "\n",
        "    # ロスの計算\n",
        "    loss = F.softmax_cross_entropy(y, t)\n",
        "\n",
        "    # 勾配の計算\n",
        "    net.cleargrads()\n",
        "    loss.backward()\n",
        "\n",
        "    # パラメータの更新\n",
        "    optimizer.update()\n",
        "    # --------------- ここまで ----------------\n",
        "\n",
        "    # 1エポック終了ごとにValidationデータに対する予測精度を測って，\n",
        "    # モデルの汎化性能が向上していることをチェックしよう\n",
        "    if train_iter.is_new_epoch:  # 1 epochが終わったら\n",
        "\n",
        "        # ロスの表示\n",
        "        print('epoch:{:02d} train_loss:{:.04f} '.format(\n",
        "            train_iter.epoch, float(to_cpu(loss.data))), end='')\n",
        "\n",
        "        valid_losses = []\n",
        "        valid_accuracies = []\n",
        "        while True:\n",
        "            valid_batch = valid_iter.next()\n",
        "            x_valid, t_valid = concat_examples(valid_batch, gpu_id)\n",
        "\n",
        "            # Validationデータをforward\n",
        "            with chainer.using_config('train', False), \\\n",
        "                    chainer.using_config('enable_backprop', False):\n",
        "                y_valid = net(x_valid)\n",
        "\n",
        "            # ロスを計算\n",
        "            loss_valid = F.softmax_cross_entropy(y_valid, t_valid)\n",
        "            valid_losses.append(to_cpu(loss_valid.array))\n",
        "\n",
        "            # 精度を計算\n",
        "            accuracy = F.accuracy(y_valid, t_valid)\n",
        "            accuracy.to_cpu()\n",
        "            valid_accuracies.append(accuracy.array)\n",
        "                        \n",
        "            if valid_iter.is_new_epoch:\n",
        "                valid_iter.reset()\n",
        "                break\n",
        "\n",
        "        print('val_loss:{:.4f} val_accuracy:{:.4f}'.format(\n",
        "            np.mean(valid_losses), np.mean(valid_accuracies)))\n",
        "        \n",
        "# テストデータでの評価\n",
        "test_accuracies = []\n",
        "while True:\n",
        "    test_batch = test_iter.next()\n",
        "    x_test, t_test = concat_examples(test_batch, gpu_id)\n",
        "\n",
        "    # テストデータをforward\n",
        "    with chainer.using_config('train', False), \\\n",
        "            chainer.using_config('enable_backprop', False):\n",
        "        y_test = net(x_test)\n",
        "\n",
        "    # 精度を計算\n",
        "    accuracy = F.accuracy(y_valid, t_valid)\n",
        "    accuracy.to_cpu()\n",
        "    test_accuracies.append(accuracy.array)\n",
        "\n",
        "    if test_iter.is_new_epoch:\n",
        "        test_iter.reset()\n",
        "        break\n",
        "\n",
        "print('test_accuracy:{:.04f}'.format(np.mean(test_accuracies)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "StopIteration",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mStopIteration\u001b[0m                             Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-53-983bd41e3cc0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0mtest_accuracies\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m     \u001b[0mtest_batch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_iter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconcat_examples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgpu_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/chainer/iterators/serial_iterator.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     68\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_repeat\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mepoch\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_previous_epoch_detail\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mepoch_detail\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mStopIteration\u001b[0m: "
          ]
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VPRotZdNMq4V"
      },
      "cell_type": "markdown",
      "source": [
        "`val_accuracy`に着目してみると，最終的におおよそ92%程度の精度で手書きの数字が分類できるようになりました．**学習終了後**に，ループの中でValidationデータセットを使ってモデルの汎化性能をおおまかにチェックしているのと同様にして，**テスト用のデータセットを用いて学習が終了したネットワークの評価を行っています．**テストデータでの評価結果は，およそ93.75%の正解率となりました．"
      ]
    },
    {
      "metadata": {
        "id": "2dr2sZcZS2Ee",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### ValidationやTestを行う際の注意点\n",
        "\n",
        "ここで，ValidationにせよTestにせよ，「評価」を行う際には注意すべき点があります．学習は行わない，評価のためだけのデータをネットワークに渡して出力を計算している部分（例えば，`y_test = net(x_test)`）では，それらの行を2つのコンテキストでくくっています．"
      ]
    },
    {
      "metadata": {
        "id": "hlx3Vz7IS3a8",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "##### `chainer.using_config('train', False)`\n",
        "\n",
        "まず，今回は学習時と推論時で動作が異なる関数は含まれていないため，実際の効力は持ちませんが，Validationやテストのために推論を行うときは`chainer.config.train = False`とします．以下のように，`chainer.using_config('train', False)`をwith構文と共に使えば，その中では`chainer.config.train = False`となります．\n",
        "\n",
        "```python\n",
        "with chainer.using_config('train', False):\n",
        "    --- 何か推論処理 ---\n",
        "```\n",
        "\n",
        "これは，以下のようにするのと同じことです．\n",
        "\n",
        "```python\n",
        "chainer.config.train = False\n",
        "\n",
        "--- 何か推論処理 ---\n",
        "```\n",
        "\n",
        "ただし，Pythonのコンテキストを利用しない場合は，一度このようにどこかで書くと，それ以降この設定はグローバルにずっと有効になることに注意してください．（推論したあと再び学習を行うという場合は，再度`chainer.config.train = True`などのようにすることが必要になります．`chainer.config`以下の規定の値に何かを代入することはグローバルに作用しますので，次に説明する`enable_backprop`についても同様です．）"
      ]
    },
    {
      "metadata": {
        "id": "6KN2FciDS7zX",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "##### `chainer.using_config('enable_backprop', False)`\n",
        "\n",
        "次に，今回は評価に用いる出力の計算後にロス関数の各パラメータについての勾配は必要ないので，内部に計算グラフを保持しておく必要もないため，`chainer.using_config('enable_backprop', False)`として**無駄な計算グラフの構築を行わないようにし，メモリ消費量を節約しています．**"
      ]
    },
    {
      "metadata": {
        "id": "vFLgWimWS9d4",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "##### ChainerのConfig\n",
        "\n",
        "Chainerにはこの他にも，いくつかのグローバルなConfigがプリセットとして用意されています．また，`chainer.config`以下にユーザが自由な設定値を置くこともできます．詳しくはこちらを一読してください：[Configuring Chainer](https://docs.chainer.org/en/stable/reference/configuration.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kBF9Qld0Mq4V"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みモデルを保存する\n",
        "\n",
        "学習が終わったら，その結果を保存します．Chainerには，2種類のフォーマットで学習済みネットワークをシリアライズする機能が用意されています．一つはHDF5形式で，もう一つはNumPyのNPZ形式でネットワークを保存するものです．今回は，追加ライブラリのインストールが必要なHDF5ではなく，NumPy標準機能で提供されているシリアライズ機能（`numpy.savez()`）を利用したNPZ形式でのモデルの保存を行います．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "sE7aEqoaMq4W",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import serializers\n",
        "\n",
        "serializers.save_npz('my_mnist.model', net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "o6lpheDtMq4X",
        "outputId": "b8d9ef06-6c13-4dbf-faa1-080bbfd17e7e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# ちゃんと保存されていることを確認\n",
        "%ls -la my_mnist.model"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "-rw-r--r-- 1 root root 333948 Nov 22 16:30 my_mnist.model\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "2g89uLBEMq4a"
      },
      "cell_type": "markdown",
      "source": [
        "### 保存したモデルを読み込んで推論する\n",
        "\n",
        "学習したネットワークを，それを使って数字の分類がしたい誰かに渡して，使ってもらうにはどうしたら良いでしょうか．もっともシンプルな方法は，ネットワークの定義がかかれたPythonファイルと，今しがた保存したNPZファイルを渡して，以下のように使うことです．以下のコードの前に，渡したネットワーク定義のファイルからネットワークのクラス（ここでは`MLP`）が読み込まれていることを前提とします．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "XoRl-oIEMq4a",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# まず同じネットワークのオブジェクトを作る\n",
        "infer_net = MLP()\n",
        "\n",
        "# そのオブジェクトに保存済みパラメータをロードする\n",
        "serializers.load_npz('my_mnist.model', infer_net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "4klyoIO7Mq4d"
      },
      "cell_type": "markdown",
      "source": [
        "以上で準備が整いました．それでは，試しにテストデータの中から一つ目の画像を取ってきて，それに対する分類を行ってみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "le0Fo53xMq4f",
        "outputId": "93a9c286-3e81-444f-fb5d-fa3d9c56bfb3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        }
      },
      "cell_type": "code",
      "source": [
        "gpu_id = 0  # CPUで計算をしたい場合は，-1を指定してください\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    infer_net.to_gpu(gpu_id)\n",
        "\n",
        "# 1つ目のテストデータを取り出します\n",
        "x, t = test[0]  #  tは使わない\n",
        "\n",
        "# どんな画像か表示してみます\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "# ミニバッチの形にする（複数の画像をまとめて推論に使いたい場合は，サイズnのミニバッチにしてまとめればよい）\n",
        "print('元の形：', x.shape, end=' -> ')\n",
        "\n",
        "x = x[None, ...]\n",
        "\n",
        "print('ミニバッチの形にしたあと：', x.shape)\n",
        "\n",
        "# ネットワークと同じデバイス上にデータを送る\n",
        "x = infer_net.xp.asarray(x)\n",
        "\n",
        "# モデルのforward関数に渡す\n",
        "with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "    y = infer_net(x)\n",
        "\n",
        "# Variable形式で出てくるので中身を取り出す\n",
        "y = y.array\n",
        "\n",
        "# 結果をCPUに送る\n",
        "y = to_cpu(y)\n",
        "\n",
        "# 予測確率の最大値のインデックスを見る\n",
        "pred_label = y.argmax(axis=1)\n",
        "\n",
        "print('ネットワークの予測:', pred_label[0])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nupSB/wclp6FycBcGXAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f98907397f0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "元の形： (784,) -> ミニバッチの形にしたあと： (1, 784)\n",
            "ネットワークの予測: 7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "tkKEfMPbMq4i"
      },
      "cell_type": "markdown",
      "source": [
        "ネットワークの予測は7でした．画像を見る限り，当たっていそうですね！"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "55aQjRHeMq4i"
      },
      "cell_type": "markdown",
      "source": [
        "## Trainerを使ってみよう\n",
        "\n",
        "Chainerは，これまで書いてきたような学習ループを隠蔽する`Trainer`という機能を提供しています．これを使うと，学習ループを陽に書く必要がなくなり，またいろいろな便利なExtentionを使うことで，学習過程でのロスカーブの可視化や，ログの保存などが楽になります．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "zqGffNzPMq4j"
      },
      "cell_type": "markdown",
      "source": [
        "### データセット・Iterator・ネットワークの準備\n",
        "\n",
        "これらはループを自分で書く場合と同じなので，まとめてしまいます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "LWIQJgmeMq4k",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "train_val, test = mnist.get_mnist()\n",
        "train, valid = split_dataset_random(train_val, 50000, seed=0)\n",
        "\n",
        "batchsize = 128\n",
        "\n",
        "train_iter = iterators.SerialIterator(train, batchsize)\n",
        "valid_iter = iterators.SerialIterator(valid, batchsize, False, False)\n",
        "test_iter = iterators.SerialIterator(test, batchsize, False, False)\n",
        "\n",
        "gpu_id = 0  # CPUを用いたい場合は，-1を指定してください\n",
        "\n",
        "net = MLP()\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    net.to_gpu(gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qpv-bUQfMq4n"
      },
      "cell_type": "markdown",
      "source": [
        "### Updaterの準備\n",
        "\n",
        "ここからが学習ループを自分で書く場合と異なる部分です．ループを自分で書く場合には，データセットからバッチサイズ分のデータをとってきてミニバッチに束ねて，それをネットワークに入力して予測を作り，それを正解と比較し，ロスを計算してバックワード（誤差逆伝播）をして，`Optimizer`によってパラメータを更新する，というところまでを，以下のように書いていました．\n",
        "\n",
        "```python\n",
        "# ---------- 学習の1イテレーション ----------\n",
        "train_batch = train_iter.next()\n",
        "x, t = concat_examples(train_batch, gpu_id)\n",
        "\n",
        "# 予測値の計算\n",
        "y = net(x)\n",
        "\n",
        "# ロスの計算\n",
        "loss = F.softmax_cross_entropy(y, t)\n",
        "\n",
        "# 勾配の計算\n",
        "net.cleargrads()\n",
        "loss.backward()\n",
        "\n",
        "# パラメータの更新\n",
        "optimizer.update()\n",
        "```\n",
        "\n",
        "これらの処理を，まるっと`Updater`はまとめてくれます．これを行うために，**UpdaterにはIteratorとOptimizerを渡してやります．** `Iterator`はデータセットオブジェクトを持っていて，そこからミニバッチを作り，`Optimizer`は最適化対象のネットワークを持っていて，それを使って前進計算とロスの計算・パラメータのアップデートをすることができます．そのため，この2つを渡しておけば，上記の処理を`Updater`内で全部行ってもらえるというわけです．では，`Updater`オブジェクトを作成してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "NIz8Fj2IMq4o",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import training\n",
        "\n",
        "gpu_id = 0  # CPUを使いたい場合は-1を指定してください\n",
        "\n",
        "# ネットワークをClassifierで包んで，ロスの計算などをモデルに含める\n",
        "net = L.Classifier(net)\n",
        "\n",
        "# 最適化手法の選択\n",
        "optimizer = optimizers.SGD(lr=0.01).setup(net)\n",
        "\n",
        "# UpdaterにIteratorとOptimizerを渡す\n",
        "updater = training.StandardUpdater(train_iter, optimizer, device=gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "BywdNhUSMq4s"
      },
      "cell_type": "markdown",
      "source": [
        "##### ロス計算のためのChain\n",
        "\n",
        "ここでは，ネットワークを`L.Classifier`で包んでいます．`L.Classifier`は一種の`Chain`になっていて，渡されたネットワーク自体を`predictor`というattributeに持ち，**ロス計算を行う機能を追加してくれます．**こうすると，`net()`はデータ`x`だけでなくラベル`t`も取るようになり，まず渡されたデータを`predictor`に通して予測を作り，それを`t`と比較して**ロスのVariableを返すようになります．**ロス関数として何を用いるかはデフォルトでは`F.softmax_cross_entropy`となっていますが，`L.Classifier`の引数`lossfunc`にロス計算を行う関数を渡してやれば変更することができるため，Classifierという名前ながら回帰問題などのロス計算機能の追加にも使うことができます．（`L.Classifier(net, lossfun=L.mean_squared_error, compute_accuracy=False)`のようにする）\n",
        "\n",
        "`StandardUpdater`は前述のような`Updater`の担当する処理を遂行するための最もシンプルなクラスです．この他にも複数のGPUを用いるための`ParallelUpdater`などが用意されています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VxnV33vIMq4s"
      },
      "cell_type": "markdown",
      "source": [
        "### Trainerの準備\n",
        "\n",
        "実際に学習ループ部分を隠蔽しているのは`Updater`なので，これがあればもう学習を始められそうですが，`Trainer`はさらに`Updater`を受け取って学習全体の管理を行う機能を提供しています．例えば，**データセットを何周したら学習を終了するか(stop_trigger)** や，**途中のロスの値をどのファイルに保存したいか**，**ロスカーブを可視化した画像ファイルを保存するかどうか**など，学習全体の設定として必須・もしくはあると便利な色々な機能を提供しています．\n",
        "\n",
        "必須なものとしては学習終了のタイミングを指定する`stop_trigger`がありますが，これは`Trainer`オブジェクトを作成するときのコンストラクタで指定します．指定の方法は単純で，`(長さ, 単位)`という形のタプルを与えればよいだけです．「長さ」には数字を，「単位」には`'iteration'`もしくは`'epoch'`のいずれかの文字列を指定します．こうすると，たとえば100 epoch（データセット100周）で学習を終了してください，とか，1000 iteration（1000回更新）で学習を終了してください，といったことが指定できます．`Trainer`を作るときに，`stop_trigger`を指定しないと，学習は自動的には止まりません．\n",
        "\n",
        "では，実際に`Trainer`オブジェクトを作ってみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-K_GXDUVMq4t",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "max_epoch = 10\n",
        "\n",
        "# TrainerにUpdaterを渡す\n",
        "trainer = training.Trainer(\n",
        "    updater, (max_epoch, 'epoch'), out='results/mnist_result')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "LtZDUXIUMq4v"
      },
      "cell_type": "markdown",
      "source": [
        "`out`引数では，この次に説明する`Extension`を使って，ログファイルやロスの変化の過程を描画したグラフの画像ファイルなどを保存するディレクトリを指定しています．\n",
        "\n",
        "Trainerと，その内側にあるいろいろなオブジェクトの関係は，図にまとめると以下のようになっています．このイメージを持っておくと自分で部分的に改造したりする際に便利だと思います．\n",
        "\n",
        "![image](https://qiita-image-store.s3.amazonaws.com/0/17934/a751df31-b999-f692-d839-488c26b1c48a.png)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WgLOnmhuMq4v"
      },
      "cell_type": "markdown",
      "source": [
        "### TrainerにExtensionを追加する\n",
        "\n",
        "`Trainer`を使う利点として，\n",
        "\n",
        "- ログを自動的にファイルに保存（`LogReport`)\n",
        "- ターミナルに定期的にロスなどの情報を表示（`PrintReport`）\n",
        "- ロスを定期的にグラフで可視化して画像として保存（`PlotReport`)\n",
        "- 定期的にモデルやOptimizerの状態を自動シリアライズ（`snapshot`）\n",
        "- 学習の進捗を示すプログレスバーを表示（`ProgressBar`）\n",
        "- ネットワークの構造をGraphvizのdot形式で保存（`dump_graph`）\n",
        "- ネットワークのパラメータの平均や分散などの統計情報を出力（`ParameterStatistics`）\n",
        "\n",
        "などなどの様々な便利な機能を簡単に利用することができる点があります．これらの機能を利用するには，`Trainer`オブジェクトに対して`extend`メソッドを使って追加したい`Extension`のオブジェクトを渡してやるだけです．では実際に幾つかの`Extension`を追加してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "oAtZtGfWMq4w",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.training import extensions\n",
        "\n",
        "trainer.extend(extensions.LogReport())\n",
        "trainer.extend(extensions.snapshot(filename='snapshot_epoch-{.updater.epoch}'))\n",
        "trainer.extend(extensions.Evaluator(valid_iter, net, device=gpu_id), name='val')\n",
        "trainer.extend(extensions.PrintReport(['epoch', 'main/loss', 'main/accuracy', 'val/main/loss', 'val/main/accuracy', 'l1/W/data/std', 'elapsed_time']))\n",
        "trainer.extend(extensions.ParameterStatistics(net.predictor.l1, {'std': np.std}))\n",
        "trainer.extend(extensions.PlotReport(['l1/W/data/std'], x_key='epoch', file_name='std.png'))\n",
        "trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], x_key='epoch', file_name='loss.png'))\n",
        "trainer.extend(extensions.PlotReport(['main/accuracy', 'val/main/accuracy'], x_key='epoch', file_name='accuracy.png'))\n",
        "trainer.extend(extensions.dump_graph('main/loss'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "D2tRnyVYMq4y"
      },
      "cell_type": "markdown",
      "source": [
        "#### `LogReport`\n",
        "\n",
        "`epoch`や`iteration`ごとの`loss`, `accuracy`などを自動的に集計し，`Trainer`の`out`引数で指定した出力ディレクトリに`log`というファイル名で保存します．"
      ]
    },
    {
      "metadata": {
        "id": "-4cZiPrvUqfB",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `snapshot`\n",
        "\n",
        "`Trainer`の`out`引数で指定した出力ディレクトリに`Trainer`オブジェクトを指定されたタイミング（デフォルトでは1エポックごと）に保存します．`Trainer`オブジェクトは上述のように`Updater`を持っており，この中に`Optimizer`とモデルが保持されているため，この`Extension`でスナップショットをとっておけば，学習の復帰や学習済みモデルを使った推論などが学習終了後にも可能になります．"
      ]
    },
    {
      "metadata": {
        "id": "nomZePWnUsFT",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `dump_graph`\n",
        "\n",
        "指定された`Variable`オブジェクトから辿れる計算グラフをGraphvizのdot形式で保存します．保存先は`Trainer`の`out`引数で指定した出力ディレクトリです．\n"
      ]
    },
    {
      "metadata": {
        "id": "d5DugCn3UthJ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `Evaluator`\n",
        "\n",
        "評価用のデータセットの`Iterator`と，学習に使うモデルのオブジェクトを渡しておくことで，学習中のモデルを指定されたタイミングで評価用データセットを用いて評価します．内部では，`chainer.config.using_config('train', False)`が自動的に行われます．`backprop_enable`を`False`にすることは行われないため，メモリ使用効率はデフォルトでは最適ではありませんが，基本的には`Evaluator`を使えば評価を行うという点において問題はありません．\n"
      ]
    },
    {
      "metadata": {
        "id": "rbnF4Of8UvTZ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `PrintReport`\n",
        "\n",
        "`Reporter`によって集計された値を標準出力に出力します．このときどの値を出力するかを，リストの形で与えます．\n"
      ]
    },
    {
      "metadata": {
        "id": "IzRAhjcfUwl8",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `PlotReport`\n",
        "\n",
        "引数のリストで指定された値の変遷を`matplotlib`ライブラリを使ってグラフに描画し，出力ディレクトリに`file_name`引数で指定されたファイル名で画像として保存します．"
      ]
    },
    {
      "metadata": {
        "id": "Pmgkto2tUxyV",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `ParameterStatistics`\n",
        "\n",
        "指定したレイヤ（Link）が持つパラメータの平均・分散・最小値・最大値などなどの統計情報を計算して，ログに保存します．パラメータが発散していないかなどをチェックするのに便利です．\n"
      ]
    },
    {
      "metadata": {
        "id": "YzFusGNSUzWF",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "---\n",
        "\n",
        "これらの`Extension`は，ここで紹介した以外にも，例えば`trigger`によって個別に作動するタイミングを指定できるなどのいくつかのオプションを持っており，より柔軟に組み合わせることができます．詳しくは公式のドキュメントを見てください．\n",
        "\n",
        "- [ChainerのTrainer extension一覧](http://docs.chainer.org/en/stable/reference/extensions.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "UENQI-q5Mq4z"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習を開始する\n",
        "\n",
        "学習を開始するには，`Trainer`オブジェクトのメソッド`run`を呼ぶだけです！"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "h92kAz7-Mq4z",
        "outputId": "d8de1383-6d27-42b0-a12d-5209c2a6c83f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "cell_type": "code",
      "source": [
        "trainer.run()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  l1/W/data/std  elapsed_time\n",
            "\u001b[J1           1.66917     0.599884       0.93892        0.806764           0.0359232      9.46737       \n",
            "\u001b[J2           0.673347    0.843211       0.519291       0.86699            0.0366054      17.7069       \n",
            "\u001b[J3           0.459921    0.878686       0.414858       0.887658           0.037035       25.9638       \n",
            "\u001b[J4           0.389535    0.893262       0.370489       0.896855           0.037301       34.2848       \n",
            "\u001b[J5           0.353169    0.901255       0.342332       0.904569           0.03749        42.5561       \n",
            "\u001b[J6           0.330151    0.90609        0.32213        0.909711           0.037639       51.0419       \n",
            "\u001b[J7           0.312338    0.910846       0.306804       0.91337            0.0377671      59.2301       \n",
            "\u001b[J8           0.298136    0.914663       0.295119       0.915843           0.0378811      67.4759       \n",
            "\u001b[J9           0.285837    0.917559       0.284161       0.918513           0.0379865      75.698        \n",
            "\u001b[J10          0.275229    0.921116       0.27476        0.921776           0.0380852      83.9563       \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "4N-T8yJIMq42"
      },
      "cell_type": "markdown",
      "source": [
        "初めに取り組んだ学習ループを自分で書いた場合よりもより短いコードで，リッチなログ情報とともに，下記で表示してみるようなグラフなども作りつつ，同様の結果を得ることができました．1層目の全結合層の重み行列の値の標準偏差が，学習の進行とともに徐々に大きくなっていっているのも見て取れて，面白いですね．\n",
        "\n",
        "では，保存されているロスのグラフを確認してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "vGulNmkgMq43",
        "outputId": "2a5bea3d-c982-4c9d-b918-9ef5bb32bc28",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "from IPython.display import Image\n",
        "Image(filename='results/mnist_result/loss.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nohvv8kgAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WDR3LRzkMq46"
      },
      "cell_type": "markdown",
      "source": [
        "精度のグラフも見てみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "eJmS70CGMq46",
        "outputId": "9d172639-c2f4-42a0-f0c0-c106c65e1293",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/mnist_result/accuracy.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "sAG2GYmwMq48"
      },
      "cell_type": "markdown",
      "source": [
        "もう少し学習を続ければ，まだ多少精度の向上が図れそうな雰囲気がありますね．\n",
        "\n",
        "ついでに，`dump_graph`という`Extension`が出力した計算グラフを，`Graphviz`を使って画像化して見てみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "6cznAWVbMq49",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!dot -Tpng results/mnist_result/cg.dot -o results/mnist_result/cg.png"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "Eo0dsPW-Mq4_",
        "outputId": "6613fca6-6068-4e98-fc6c-b8c9cdae835b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1256
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/mnist_result/cg.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nLsWNGze6XN9///d/48cff8QPP/yAt956C7/85S/x5Zdfdvl8XZGZmYklS5bgxIkTyMrKwn/8x39g\nw4YNeOGFF8yO6+jflwaub775BrGxsbCwsMChQ4fw9ttvmz2v1+vbzMjy9vbGV199hVdffRXz589H\nSkpKp6/b1TFJrVZj+fLliI6OxunTp7Fp0ybs3bsXb775ZpeO6wkck+6PYxK156uvvsLUqVN75dx9\nYYzhPcx7mIiIiOhOAy503LBhA7766iv885//FDa0KCgowPr167Fs2bI2s3RuZ29vj6VLl8LZ2Rn2\n9vaYO3cuZs2ahePHj6OiokI47rPPPoOrqyuee+45ODg4QCaTYdWqVcjPz0d2dnana7axsYFKpUJp\naanZ19KlS/H8889367pKpRJFRUXtPvfMM89AJpNh5cqVXQ5Ljxw5gtDQUDg6OmLp0qWYPXt2l87T\nUc3NzW1mbEilUiQmJmL48OGwt7fHnDlz8NhjjyEtLQ1VVVXCcR39+9LANm/ePBiNRnz//fdtnjtx\n4gROnDgBjUbT5rljx45h7ty5nb5ed8akjz/+GKNGjcIf/vAH2NnZITw8HM8//zz+/e9/49y5c50+\nrqM4JnUcxyTqLAsLix49X18aY3gP8x4mIiIiut2ACh1LS0vx4Ycf4uWXX4aNjY3weFBQEDZu3Ign\nnngC1tbWd/3+bdu2tdmNe9iwYQBgNkugoqICLi4uZm8cRo8eDQC4fPlyp+tOSUlps+NvRUUF1Go1\npk2b1uXrNjc347333mszm+t2v//975Gfn49t27Z1um5TTQ9yg6HPP/8c165dM3ts06ZNZn9vAMIG\nArcvcero35cGtlmzZkEqleK7775r81xaWhpcXV1x6NAhs8ebm5tRUFCA6dOnd+pa3RmTdDodjh07\nhsmTJ5vd8w8//DCMRiOOHDnSqeM6g2NSx3FMos6SSqU9dq6+OMbwHuY9TERERGQyoELH7du3w2g0\nIi4ursfOeeXKFdja2sLDw0N4zMPDA1evXjU7ztTDbNy4cT1y3U8//RS/+tWvzB7r7HXff/994ZP6\nu3FycsLkyZOxbds23LGR+T2lpaVh+vTpqKqqwhdffNFur7fbGY1GbNmyBY8++ij8/PwQGhqKX//6\n121mYZ06dQpxcXEIDg6Gv78/HnvsMfz0008AgHfffRd//vOfUVZWBi8vr3sGQKWlpXB0dMTYsWPv\n+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\ng+Gex548eRKTJ09+EGURERERERE9KMl8F01Eg863336LxsbGex5jMBhgNBrx/vvvY+7cubh+/foD\nqq7/WL58OYxGIywtLTFt2jQGjrgVaK9YsQJ/+MMfYDAY7hs4SqVS7Ny58wFVR0RERERE9OAwdCSi\nQeezzz7r8OYcBoMB3333HSZOnAiVStXLlfUvTz75JCQSCQwGA3etBlBeXo5p06Zh165dbTbYuRut\nVoudO3eipaWll6sjIiIiIiJ6sLi8mogGlYaGBowcORJarRZWVlZ3Pc5oNArP6/V66HQ6SCQSTJo0\nCWPGjHlQ5fZ5GRkZqKioQHx8PKytrcUuRzQ1NTXIyMhAc3MzLCwshK/2luXr9fo2MyD37duHJ554\n4kGVS0RERERE1NuSOzbVh4hogCgrK+vwrDwrKys4OjoCAE6cOIH0jBPIP1eNi3V2kFhzd2EA0Nm4\nY4ijAbkXAaDtpjyDgUGvRV3VZQwZ7g07WAAAmhquwlaiR9Lbb8HW1tbseKlUiqFDh5o95u3t/cDq\nJSIiIiIiehA405GIqAPWrl2Lv32yDU/+V6bYpfQpem0LyouOwyP4F2KX0qdkH/4bruZ9jvMlGrFL\nISIiIiIiEgM3kiEioq6zktowcCQiIiIiIqI2GDoSERERERERERFRj2LoSERERERERERERD2KoSMR\nERERERERERH1KIaORERERERERERE1KMYOhIREREREREREVGPYuhIREREREREREREPYqhIxERERER\nEREREfUoho5ERERERERERETUoxg6EhERERERERERUY9i6EhEREREREREREQ9iqEjERERERERERER\n9SiGjkRERERERERERNSjGDoSERERERERERFRj5KIXQAR0UB0PvsgTn35NuqvlQEAhjiMgnvgw3h4\n5ca7fs9F1VH8sO3XeGTlRowLmfWgSr2rO3+G9gwd7oHFf8p+gFXdW1/7HRIREREREQ1WDB2JiHqB\n94R4eE+Ix963I9HceA2/XFd4/28yGnu/sE6482dI/OA8AMBo0EOv10Lb3IBv/h4vcpV36GO/QyIi\nIiIiosGKoSMRUR/hEfwLrPiwVOwy7svC0goSSytIpLZwchkvWh06bTMOJT+Bea8cFh7rL79DIiIi\nIiKigY49HYmIqMtmPvc/ol1bnfE/aK6/Ktr1iYiIiIiI6O4405GIqA+4cu4kjv1rNRprL2PaU+sh\nm74K+T9txal9bwNGIx55ZgsK0v6FypKfYW3rgEkL3sH4yIXC9xsNepw+9FeoT+5Gc8NVOI0ajwmz\nXoZPxIJb5y8+AcXul9F4vQIGXSscXXww+cl3MTZoBnKOfozT36yHhaUVnnrnNHKOJuNc1peYs+YA\nnFx9O1T/idQ3UJC2HTZ2zsJS8ozPX4P65C7oWpuwbL0atkNHdOpnAoDiU3uRd2wjassLYWFpCduh\nIxEwbRlaGmuQn/YvGHSt2PLbEXAc6Y2HEj9p8zu89csxIveHDShKT8GNa2WQSIdgtN80RD3xNpxd\n/QCg03URERERERHRvXGmIxFRH+A2forZMmEAkD30LIJnvACdthlSm6F49NmtePodJRxGeiHts9/D\noNcKx5468C5yjv4DUxatxS//UoBxIY/h2L9W4+qFW5u8NNVXwydiARb/KRtL31NBamOPY/96DgAQ\nOvMlBD/6G2hbGnH2//sbHEZ4wsU7EkbcvT9ieVEacr/7RPj3qQnr4BP+hNkx057+KyLmvNHlnynv\n2Eb8uOMFeE+ch6XvqbBkbR4mPPYH1FUWY8qi9+AZ/BgcR3pj1T+v4al3str9HQKA8tB6ZH71J0yY\n9TKWrSvC3Je/RmPtZXz9tzloqq/udF1ERERERER0fwwdiYj6AVefSZDaOsB26Ej4RCyArvUmGmov\nAQD02hYU/LQVXmFz4D0hHtZDnDDh8VdgaSWF+sQuAID3xHkIn/0abOycYWM/DJ4hj6OlsQbNDebL\nk6Pmvw3Z9FWI+/UOYRYgALQ23cCW344Qvg59bB4w9vTPZNBrcfqbv2K0fwzCfvF72NgPg42dMwKm\nLcNIz4kdvoZO24y87z+Fd9hc+E56CtZDHDF8jAzRS/6G5oZrKFTs6FRdRERERERE1DFcXk1E1M9Y\nSawBAAa9DgBQV6WBrrUJw8YECcdIpLYY4uiC65Xqds9haXVr+DcaDB26pvUQR2H3agCo0KTjatmZ\nLtXfnjt/pprL+WhtqsPYoBlmx1lYWiH4kec6fN7rFYXQtjRipOcEs8dHeU6EpcQaVaXKTtVFRERE\nREREHcPQkYion9O23AQAZB1ci6yDa82es3NyBQBczDuCnO8+QW1FIVqb67u9XHi0XzRG+0V36xz3\nom2uBwDY2Dl16zwtN+sAAFIb+zbP2QxxhLa5oVvnJyIiIiIiovYxdCQiEsmV4gxcvXAWwTNe6NZ5\nbIeOBABMWbQWwY883+b5hppLOLo5EV4T5uKhZR/Dzmk0VMc349S+y3CoCgAAIABJREFUpG5dtzfZ\nObkBAJobarp1HlNo2V642NJ0A/bDxnTr/ERERERERNQ+9nQkIhLJ1QtnIbG26/Z5hg5zh5XUBtcu\n5bb7fG15Pgx6LWQPPQOHkV6wktrAAhbdvu6dLKysYDD0zDLkoSM8YGM/DJcKjnXrPMNGB0FqY4/q\n/91Qx6SqVAmDrhUjPcK6dX4iIiIiIiJqH0NHIqIHzKDXoqm+GhUaBSQ23Q8draQ28J/yS5zL+hL5\nP22FtrkeRoMejdfLcbOuEvbDxwIALhceh17bgrqqkvv2MuwKx1E+aGmsRdnZQzDotWhuuIr6motd\nOpeVxAYTHvsDrhRn4ETqG2i8XgGj0QBtcwOuVxQBAGzsh+FmXQXqr12Atrmh3SXjVlIbhDz6W5Rm\nf43iU3uhba5HTXk+0ve8AjsnVwTFruzOj0xERERERER3YWE0Go1iF0FE1NetXbsWf/tkG578r8wO\nHV969huc+vJt3Lh6/p7Hxa1OgVfYHOQf34Izhz9E040qSKyHwD1wOtyDZuDUvreha22Ck4sPZv02\nFZeLfsLPX74FbXM9hg73wOO/+xJOLj4w6Fqh/GYdzmV9gZvXr8DazhmjfaciYu4f4Tw6AJkH3kVh\negqMBgPcgx7GaN9oZOx9DY4jvTFW/ijUGf8DnbYZ9sPcETXvP+E76SlUlpzCTztfRF3VOQDAkP+f\nvTuPj6o+9P//HjKTQEISthBWSSAbySSETMKuUIoLEbguFGXVttqql6vWalvrra2tPKq/1qt4r0Ut\nUqxXrP5crrZWr7QoJmEJSQjZSRACatgSQiB7JpnvHz5mLkNYknDgZHk9H488fOTMmXPeyTiH5J3P\n53yChmvwyBil3v/eOb+Wprpq/WP9nTp2YJf8g0boqvjr5GPtr7x//KeCQsJ14wPv62D+xx3+miSp\naOsrKknfqJrj32QYNCJa0TNWKPaa76vqyzxtfnmVGk8f17CrEjUycqZKtr3m9T289oevSy6X8v/5\ngkoyXtXpqi9l8wvQyMiZSrnplwoePuGb83z+SqdyXUzux/+hyoI3dWB/WYf2BwAAAIBeZi2lIwB0\nQGdLR/RtlI4AAAAA+ri1TK8GAAAAAAAAYChKRwAAAAAAAACGonQEAAAAAAAAYChKRwAAAAAAAACG\nonQEAAAAAAAAYChKRwAAAAAAAACGonQEAAAAAAAAYChKRwAAAAAAAACGonQEAAAAAAAAYChKRwAA\nAAAAAACGonQEAAAAAAAAYChKRwAAAAAAAACGonQEAAAAAAAAYChKRwAAAAAAAACGonQEAAAAAAAA\nYChKRwAAAAAAAACGonQEAAAAAAAAYCir2QEAoKeoPXlU/1z/XbNjoAc4ebRMwX5mpwAAAAAA81A6\nAkAHTJw4UYsWzDc7Rrdz5MgRVVVVKS4uzuwo3cuEOI0cOdLsFAAAAABgGovL5XKZHQIA0DOtWbNG\nr776qkpLS82OAgAAAADoPtZyT0cAAAAAAAAAhqJ0BAAAAAAAAGAoSkcAAAAAAAAAhqJ0BAAAAAAA\nAGAoSkcAAAAAAAAAhqJ0BAAAAAAAAGAoSkcAAAAAAAAAhqJ0BAAAAAAAAGAoSkcAAAAAAAAAhqJ0\nBAAAAAAAAGAoSkcAAAAAAAAAhqJ0BAAAAAAAAGAoSkcAAAAAAAAAhqJ0BAAAAAAAAGAoSkcAAAAA\nAAAAhqJ0BAAAAAAAAGAoSkcAAAAAAAAAhqJ0BAAAAAAAAGAoSkcAAAAAAAAAhqJ0BAAAAAAAAGAo\nSkcAAAAAAAAAhqJ0BAAAAAAAAGAoSkcAAAAAAAAAhqJ0BAAAAAAAAGAoSkcAAAAAAAAAhqJ0BAAA\nAAAAAGAoSkcAAAAAAAAAhqJ0BAAAAAAAAGAoSkcAAAAAAAAAhqJ0BAAAAAAAAGAoSkcAAAAAAAAA\nhqJ0BAAAAAAAAGAoq9kBAAA9w759+7Rlyxavbbt27VJNTY1efvllr+1jxoxRamrqlYwHAAAAAOhG\nLC6Xy2V2CABA9/fll19q3Lhxslgs8vHxkSS5/wmxWCyez51Op5588kk99thjpmUFAAAAAJhqLdOr\nAQAdMnbsWE2fPl2S1NLSopaWFjmdTjmdTq/PJem2224zMyoAAAAAwGSUjgCADlu5cqVnVOO5WCwW\nORwORUREXMFUAAAAAIDuhtIRANBhS5YsuWDp6OPjo1WrVl3BRAAAAACA7ojSEQDQYUOGDNG8efNk\ntZ57HbK2tjYtWbLkCqcCAAAAAHQ3lI4AgE5ZsWKF2tra2m338fHR7NmzNWLECBNSAQAAAAC6E0pH\nAECn3HTTTfL19T3nYytXrrzCaQAAAAAA3RGlIwCgUwICArRw4ULZbDav7f369dPNN99sUioAAAAA\nQHdC6QgA6LTly5fL6XR6PrdarUpNTdWgQYNMTAUAAAAA6C4oHQEAnTZ//nwNHDjQ83lbW5tWrFhh\nYiIAAAAAQHdC6QgA6DRfX18tWbLEM8Xaz89PN954o8mpAAAAAADdBaUjAKBLli1bppaWFvn4+Gjx\n4sUaMGCA2ZEAAAAAAN0EpSMAoEvmzJmjkJAQtba2avny5WbHAQAAAAB0IxaXy+UyOwQA9AXV1dXK\nyspSVlaWsrOztWvXLh06dMjsWJAUFBSkyZMnKzk5WcnJyXI4HIqIiJDFYjE7GgAAAAD0RGspHQHg\nMqipqVFOTo6nZMzKytL+/fslSaNGjVJ8fLzi4+MVFhbWo4utgwcPaufOnVqyZInZUS5JTU2N8vLy\nlJ+fr9LSUrW0tCg4OFgOh8NTRCYnJys8PNzsqAAAAADQE1A6AsClqq2tVW5urrKzs5Wdna2srCzt\n3btXbW1tCg0Nld1uV3x8vOx2uyZNmqSQkBCzIxvq4MGDGjdunNkxDON0OrV//37l5+eroKBABQUF\nys3NVUtLi4KCghQfHy+Hw+H5iI2N7dHFMQAAAABcBpSOANAZLS0tKi0tVXZ2tjIyMpSenq69e/eq\ntbVVwcHBioyM9BSM8fHxioqKMjsyDHBmEemeGr9//37P6263272KyLi4OLMjAwAAAICZKB0B4HzO\nLBjdIxizsrLU3NysoKAgRUVFeRWMkZGRjHjrQ+rq6lRUVOQ1InLfvn1qa2vTiBEjPPeGdDgcSklJ\n0YgRI8yODAAAAABXCqUjAEjfjGTbu3evV8GYnZ2tpqYmBQYGKjo6moIRF3WuIrKsrEwul6tdETl1\n6lQNHz7c7MgAAAAAcDlQOgLoe85VMO7evVsNDQ0KCAhQbGys7Ha7p2CMiIhQv379zI6NHqq2tlbF\nxcUdKiKnT5+uYcOGmR0ZAAAAAC4VpSOA3q21tVUlJSVeBWNubq7q6+vl7++vuLg4CkZccadPn1ZJ\nSYlXEVlaWipJ7YrIGTNmaOjQoSYnBgAAAIBOoXQE0LtUVFR4LfKSm5ururo62Ww2hYeHexWMiYmJ\nstlsZkcGJEmnTp3S3r17PfcOzc/P17FjxyRJI0eO9FqoZtasWRo8eLDJiQEAAADgvCgdAfRc7oLR\nPYJx+/btOnHihKxWq8aPH+9VME6aNEm+vr5mRwY65ejRo57RkPn5+crLy9Px48fl4+OjqKgorxGR\nSUlJ8vf3NzsyAAAAAEiUjgB6irMLxh07dqiqquqcBWNCQoL8/PzMjgxcFmcXkbm5uaqqqjpnEelw\nODRgwACzIwMAAADoeygdAXQ/ZxeMmZmZntFdEyZM8CoY4+Pj1b9/f7MjA6Y6u4jMyclRdXW1rFar\nIiMjvYrI5ORk3jMAAAAALjdKRwDmOrNgzM7OVmZmpuc+duPGjZPD4fAUjHa7nVFbQAedXURmZ2fr\n5MmTstlsioiI8CoiU1JSGB0MAAAAwEiUjgCunJMnT6qgoMBroZfDhw9LkkJDQ73KxZSUFAUHB5uc\nGOhdjh496rVQTVFRkerr62Wz2RQZGem1UE1iYqJ8fHzMjgwAAACgZ6J0BHBlzJw5U9u2bZMkhYWF\nyW63KyEhQQkJCbLb7Ro4cKDJCYG+x+l0at++fZ5FagoKClRUVKSmpiYNHDhQn3/+uSZPnmx2TAAA\nAAA9D6UjgCsjMjJSU6ZM0c9+9jMFBQWZHQfAeTidTm3fvl0rV65URkaGZsyYYXYkAAAAAD3P2n5m\nJwDQd4waNYrCEejmrFarIiIizI4BAAAAoIejdASATkhPT9fTTz/tta2trU2vvPKKbrnllnM+Z+3a\ntZo3b57i4uIUGRmp2bNn67e//a3q6ura7fv+++9r0aJFiouL04wZM/Twww/r+PHjl5T5Yvkkadeu\nXbr11lsVExOjlJQUPfXUU2pubu70fps3b9a6devU2tp6SZmbm5v1xBNPKDk5WTExMVq+fLmSkpIU\nFham119//ZKO3VHr1q3T3LlzFR0drYkTJ2ru3Ll65plnVFtb67VfZ15fAAAAAOgrKB0BoIOeffZZ\nbdy4UatXr/ZsO3DggJYsWaLf/OY3amhoOOfztm3bpjvuuEMZGRnKzc3VI488oldeeUX33Xef135/\n+9vf9MADDyg1NVU7duzQ+vXrlZmZqTvuuENOp7NLmTuSr7S0VCtXrtTMmTOVk5Ojl156SW+99ZYe\ne+yxTu937bXXys/PT8uWLdOpU6e6lFmS/vjHP+qzzz7Tli1b9Pjjj2v58uV69913u3y8rti1a5eW\nLl2q7du3KysrSz/+8Y+1bt063XvvvV77dfT1BQAAAIC+hNIRADpg3bp1+uCDD/TCCy8oICBAklRc\nXKynn35aK1asUGxs7HmfGxAQoGXLlmnQoEEKCAjQggULdMMNN2jr1q2e1bsl6fXXX1doaKh++MMf\nKjAwULGxsbrrrrtUVFSk3NzcTmfuaL7nn39eISEh+tGPfiR/f38lJSXpnnvu0dtvv60vvvii0/t9\n73vfU2xsrO68884ul6WffPKJEhISFBQUpGXLlik1NbVLx+moxsbGdiNBbTabVq1apSFDhiggIEA3\n3nijrr/+eqWlpenYsWOe/Tr6+gIAAABAX0LpCAAXUV5ermeeeUYPPfSQ/Pz8PNsnTpyoF198UTfd\ndJN8fX3P+/wNGzbIx8fHa9vgwYMlyWv04eHDhzV8+HBZLBbPtpEjR0qSvv76607n7kg+p9OpTz/9\nVFOnTvU675w5c+RyufTJJ590aj+3Bx98UEVFRdqwYUOnc0vffC+sVmuXntsVb775pqqqqry2vfTS\nS16vtySFhoZKktfU6Y6+vgAAAADQl1A6AsBFbNy4US6XS/PmzTPsmEeOHFH//v01duxYz7axY8eq\nsrLSaz/3/Ryvuuoqw859pi+//FJ1dXUaPXq01/Zx48ZJkkpKSjq1n1twcLCmTp2qDRs2yOVydThP\nWlqaZs+erWPHjumdd95RWFjYBUdpulwurV+/Xt/+9rcVGRmphIQE3X333V4jLyUpMzNT8+bNk91u\nV1RUlK6//np9/vnnkqRf//rXevLJJ3Xw4EGFhYVp9uzZ5z1feXm5goKCNGbMmAt+Hed6fQEAAACg\nL6F0BICL2LJli8aPH68BAwYYcryGhgZt27ZNS5culc1m82xfvXq1jh8/ro0bN6qurk6lpaXasGGD\nrrnmGk2ePNmQc5/NXWq6p4y7+fn5qX///p4StKP7nSkuLk5HjhxRcXFxh/NcffXV2rp1q4YNG6Zb\nb71V5eXlKioqOu/+zz33nJ5++mmtXr1aOTk5euutt3T48GF95zvf8cpUWVmpBQsWKCMjQ5mZmfL3\n99cDDzwgSXr88cc1b948jRs3TuXl5dq6davXOZxOp44cOaJXX31V6enpeuKJJ7xet7Od7/UFAAAA\ngL6E0hEALqC+vl5ffvmlZ0SfEV544QUNHz5cDz/8sNf2qVOn6t5779WvfvUrxcXF6brrrlNdXV27\n1bKN1NTUJEntpgdLktVqVWNjY6f2O1N4eLik9qMgjdLY2Kj169frhhtu0M0336zAwEDFxMRozZo1\nOnHihDZt2uTZNzU1VQ8++KCCg4M1aNAgXXvttaqurtaJEycuep5p06Zp2rRpeu655/Too49q4cKF\nF9z/fK8vAAAAAPQllI4AcAFVVVVyuVzq37+/Icf7+OOP9eGHH+q1115rN2rwd7/7nTZt2qRNmzap\nqKhIaWlpcjgcuuWWWy7bgiTuexaea8GXlpYWz9fd0f3O5B4Zeq5RkEYoLS1VXV2dEhISvLZPmjRJ\nNpvtgovvuO8X2draetHz7NixQzk5OXr++ef1zjvvKDU1td39H90u9PoCAAAAQF9C6QgAF+Ae4Xf2\ngiJd8de//lXr1q3TX/7yl3b3BDx27JhefPFFLVu2TDNmzJC/v7/Gjh2rp556SkePHtVLL710yec/\nl5CQEElSbW2t1/aGhgY1NTVp+PDhndrvTO7vmft7aLRTp05Jaj/lW5KCgoK8sm7ZskW33XabkpKS\nFBkZqd/+9rcdPo/VatWQIUN09dVX6z//8z9VWlqqF154od1+F3p9AQAAAKCvoXQEgAtwj+DryIi4\nC9m4caPee+89bdq0ybMC8pnKy8vV2tra7rGBAwdq0KBBKi0tvaTzn8/YsWMVEBDQbnXsgwcPSpJi\nYmI6td+ZWlpaJMmwUaJnCwoKktS+CJW+KSTdK39XVFToBz/4gUJCQvQ///M/Kigo0M9+9rMunTMs\nLEw+Pj7tXo+Lvb4AAAAA0NdQOgLABQwdOlQWi0WnT5/u0vNdLpeeeuop7d27Vy+//PJ5p9yOGDFC\n0jcjHs9UV1enkydPego0o1mtVn3rW9/Szp071dbW5tn+6aefymKx6Nprr+3Ufmdyf8+GDRt2WbJH\nR0crICBAeXl5Xttzc3PV0tKi+Ph4Sd/cU9LpdGrVqlW66qqr5OfnJ4vFcsFjV1dX6/7772+33V0O\nu1+Pjr6+AAAAANDXUDoCwAUMGDBAV111VZfvqVhWVqYXX3xRb7zxhiIiIhQWFub18fLLL0v6ZiTh\n9OnT9cYbbygzM1ONjY06fPiwHn30UUnSbbfd5jnm6tWr5XA4VFBQcOlfoKT7779flZWVevbZZ1Vf\nX6+cnBy9/PLLWrx4scaPH9/p/dzc3zP3KEijc/v5+enuu+/Wxx9/rPfee0+1tbUqKSnRY489puHD\nh2vZsmWSpFGjRkmS0tPT1dTUpAMHDrS73+OgQYN09OhRffXVV6qrq5Ovr6/S0tK0bds21dbWyul0\nqrCwUA899JD8/f111113Ser46wsAAAAAfQ2lIwBcxNy5c1VaWtpuhebdu3dr8eLFmjJlinJzc1Vc\nXKyUlBTdeuutyszMlPTNSLiOsFgs+sMf/qCFCxfqJz/5iRISEjRv3jxVVFToxRdf1JQpUzz7trS0\nqKqqSps3b77gMTuST5KioqL02muv6fPPP1diYqLuueceLVmyRGvWrPE6Xkf3c8vLy9OIESM8pWNH\ncn/99de68cYbVVlZqffff18LFizQRx99pPXr12vx4sWSpDVr1uiee+6RJD3wwAP6yU9+oueff16J\niYm67bbbNGbMGL355pvy9/eX9E3pee+99+rPf/6zUlJS9Pvf/17Tpk2TJC1evFiHDx/WihUrNHTo\nUM2bN0933nmnGhoalJycrJ/+9KeaOnWqYmNjdd9992nMmDF67733FB0dLanjry8AAAAA9DUWF78x\nAbgCIiMjddNNN2n16tVmR+m08vJyzZs3T7/73e908803mx1HbW1tuv3227V48WItWbLE7DjnVF1d\nrWnTpunhhx/W3XffLaln5MY3Dh8+rOnTpysjI0MzZswwOw4AAACAnmctIx0B4CLCwsL00EMP6fnn\nn1ddXZ2pWVpbW/XJJ5+otrZWCxcuNDXLhTz33HOKjY3Vd7/7XUk9JzcAAAAAwBiUjgDQAffdd59S\nU1P1b//2b11eVMYIO3bs0EcffaRXX31VAwYMMC3Hhaxfv15FRUXauHGjrFarpJ6RGwAAAABgHKvZ\nAQCgp3jkkUeUlpamP/zhD/rpT39qSoaZM2dq5syZppy7IzZv3qzm5mb95S9/kY+Pj2d7d88NAAAA\nADAW93QEcEVERkbq2LFjSkxMlN1uV0JCghISEjwrCwMwT11dnQoKCpSXl6f8/Hzt2bNHBw8e5J6O\nAAAAALpqLaUjgCsiKytL27dvV1ZWlrKysrR37161trZq6NChSkhIUHx8vOdjxIgRZscFeq36+noV\nFhYqPz/f87F//361tbUpNDRUycnJno+5c+d6VgEHAAAAgE6gdARgjrq6Ou3evVvZ2dnKzs72FJFt\nbW0KDg5WfHy8kpOTZbfbNWnSJIWEhJgdGehxnE6n9u/fr/z8fBUUFKigoEC5ublqaWlRUFCQ4uPj\n5XA4PB9xcXFmRwYAAADQO1A6Aug+Tp8+rT179pyziAwNDZXdbld8fLzsdrsSExM1bNgwsyMD3ca5\nCsY9e/aoubn5nAVjbGysLBaL2bEBAAAA9E6UjgC6t1OnTikvL8+riCwpKZHL5WpXRCYlJWnIkCFm\nRwYuu3MVjHl5eWpqalJgYKBnpLC7YJw4caL69etndmwAAAAAfQelI4Cep6amRvn5+V5FZHFxsSS1\nKyIdDocGDx5scmKg61pbW/XFF194FYz5+flqbGzUwIEDlZCQQMEIAAAAoLuhdATQO5w8eVIFBQWe\nIjItLU3l5eWS2heRKSkpCg4ONjcwcB5Hjx71LLiUn5+vwsJCNTQ0yGazKTIy0lMuzpo1S4mJifLx\n8TE7MgAAAACcjdIRQO9VUVHhKSGzs7OVmZmpY8eOSZLGjRsnh8PhVUYOGDDA5MToa44ePeoZwege\nvXvy5EnZbDZFRER4jWBMSUmRn5+f2ZEBAAAAoCMoHQH0LWcXkTt37tTx48fl4+OjCRMmyG63e4rI\n+Ph49e/f3+zI6CXOLhhzcnJUXV0tq9WqyMhIr4IxOTmZ//cAAAAA9GSUjgBwZhGZlZWlHTt2qKqq\nSlarVePHj/cqIhMSEhhthos6u2DMzc1VVVWVfHx8FBUV5VUwOhwORtkCAAAA6G0oHQHgXM4uIrdv\n364TJ06cs4icNGmSfH19zY4Mk5xdMObl5XlGz55dMCYlJcnf39/syAAAAABwuVE6AkBHnVlEpqen\na8eOHaqrq5PNZlN4eLhXEZmYmCibzWZ2ZBispqZGpaWlXgu9uO8TOnLkSK/Ri7NmzWLldAAAAAB9\nFaUjAHRVa2urSkpKvEZE5ubmqr6+XjabTTExMUpOTvYUkREREerXr5/ZsdFBp0+fVklJiWcUY0FB\ngUpLSyVJI0aM8BrBOHPmTA0ZMsTkxAAAAADQbVA6AoCRnE6n9u7d61VE7t69Ww0NDQoICFBsbKzX\niEiKyO6htrZWxcXFXgVjWVmZXC5Xu4Jx+vTpGjZsmNmRAQAAAKA7o3QEgMutublZ+fn5nim5WVlZ\nKiwsVEtLi9nRcJYxY8YoJSXFUzImJydr6NChZscCAAAAgJ6G0hEAzNDY2Kg9e/bo0KFDZke5JH/7\n29+Unp6up556yuwolyQwMFBJSUkaPny42VEAAAAAoDegdAQAdN2aNWv06quveu51CAAAAACApLXc\nSAwAAAAAAACAoSgdAQAAAAAAABiK0hEAAAAAAACAoSgdAQAAAAAAABiK0hEAAAAAAACAoSgdAQAA\nAAAAABiK0hEAAAAAAACAoSgdAQAAAAAAABiK0hEAAAAAAACAoSgdAQAAAAAAABiK0hEAAAAAAACA\noSgdAQAAAAAAABiK0hEAAAAAAACAoSgdAQAAAAAAABiK0hEAAAAAAACAoSgdAQAAAAAAABiK0hEA\nAAAAAACAoSgdAQAAAAAAABiK0hEAAAAAAACAoSgdAQAAAAAAABiK0hEAAAAAAACAoSgdAQAAAAAA\nABiK0hEAAAAAAACAoSgdAQAAAAAAABiK0hEAAAAAAACAoSgdAQAAAAAAABiK0hEAAAAAAACAoSgd\nAQAAAAAAABiK0hEAAAAAAACAoSgdAQAAAAAAABiK0hEAAAAAAACAoSgdAQAAAAAAABjKanYAAEDP\nsHPnTv385z9Xa2urZ9uxY8d0+vRpzZkzx7PNYrFo7ty5+sUvfmFCSgAAAABAd0DpCADokPj4eG3f\nvl0NDQ3tHjty5IjX59/97nevVCwAAAAAQDfE9GoAQIf4+/vrlltukc1mu+B+vr6+uummm65QKgAA\nAABAd0TpCADosGXLlqmlpeW8j1utVi1atEhBQUFXMBUAAAAAoLuhdAQAdNh1112nwYMHn/fx1tZW\nLV++/AomAgAAAAB0R5SOAIAOs1qtuu222+Tr63vOxwMCAjR//vwrnAoAAAAA0N1QOgIAOmXp0qVq\nbm5ut91ms2nJkiXy8/MzIRUAAAAAoDuhdAQAdMrVV1+tUaNGtdve0tKiZcuWmZAIAAAAANDdUDoC\nADrFYrFo+fLl7aZYDx06VHPmzDEnFAAAAACgW6F0BAB02tlTrH19fbVy5Ur5+PiYmAoAAAAA0F1Q\nOgIAOm3y5MmKiIjwfN7c3KylS5eamAgAAAAA0J1QOgIAumTlypWy2WySpLFjxyolJcXkRAAAAACA\n7oLSEQDQJcuWLVNLS4ssFovuuOMOWSwWsyMBAAAAALoJq9kBAAAdV1xcrPz8fLNjeISFham8vFyD\nBg3SW2+9ZXYcSVJgYKDmz59vdgwAAAAA6NMsLpfLZXYIAEDHrFmzRv/+7/9udoxuLXx8hPZ/UWZ2\nDAAAAADoy9Yy0hEAepghI8brll/sMjuGJKm+5qi+yHpb8d/+V7OjSJJyP/4PVRa8aXYMAAAAAOjz\nuKcjAKDL/INDFXvNXWbHAAAAAAB0M5SOAIBL4mPzMzsCAAAAAKCboXQEAAAAAAAAYChKRwAAAAAA\nAACGonQEAAAAAAAAYChKRwAAAAAAAACGonQEAAAAAAAAYChKRwAAAAAAAACGonQEAAAAAAAAYChK\nRwAAAAAAAACGonQEAAAAAAAAYChKRwAAAAAAAACGonQEAABaSrp9AAAgAElEQVQAAAAAYChKRwAA\nAAAAAACGspodAABweR3I/asy3/2lTlcd9NruY/WTf3CoRkbN0uT5Dytw6LguH3NAYIhGx8zRnDtf\nPOf+BZ++pLzNa1Vfc1SyWBQcEq4Zt/1eo2Nme/b533VLdWTfNrU01Sl4+ARds+J5hY6f2oWvGAAA\nAABgNkpHAOjlwhMXKjxxod76ZbIa66q06vcH5HK1qbH2hL4u3qL0Nx7SlwWfaPEvtssvYEiXjrn8\nqZIL7m//1g9l/9YPtf5fh2r4uCQteuSTdvtcf+8bOlyWod0f/V6p97/Xpa8VAAAAANA9ML0aAPog\ni6WfBgQOU8SUJYqdfbcaTlfq65KtZscCAAAAAPQSlI4A0McFhYRLkupPHTM5CQAAAACgt2B6NQD0\ncaeO7ZckDR1j99ruamtVzt//P5XueEONtZUKDpmgxBse0njHzWbEBAAAAAD0IJSOANBHNTfU6OCe\nj1T0+XqNtV+nkZEzvR7PfP/XKvrsj5rz3Zc0Ovoa5W3+T336px8oKCRcw65KNCk1AAAAAKAnoHQE\ngD6kueGU1v/r0P/bYLEoecHPlXDtv3nt19rSpOLPX1HYpBsVnrhQkpQ4/2Hl//MPKt2+idIRAAAA\nAHBB3NMRAPoQ3wFBuuuFKt31QpUS5v2b5HLJd0CQ+vnYvParOVYmZ3ODBo+a6NlmtfXXgKDhOnm0\n9ErHBgAAAAD0MIx0BIA+avL8h1WW+aZ2ffAbjUuYr4DBoz2PtTTVS5Ky/rpGWX9d4/U8/+DQSzqv\ny9V2/sfaWtsVoAAAAACAnofSEQD6KFv/gZryL7/U1tf+VRl/eUTX3bvJ81j/gcMkSdMWr5H9W/d0\n6fhH9m1T5aE9ss+917PNL2Cw6muOnPc5p6sOauAZ5ScAAAAAoGdiejUA9GGRU2/T8DCHDhX8r/bn\n/I9n+8DBo+Vj81PVV/ldPnbloT2y+vp7bRsVdbXqTh7W0f2Z7Z/gcql0+xsKCXN0+ZwAAAAAgO6B\n0hEA+jKLRdO/85RksWj7Wz9TU/1JSZKPzU9R05bri6x3VfT5K2ppPC1XW6vqTlaovuboBQ/Z1tqi\nhtPHdbgsXVY/79IxeeFj8h0QrH+u/67K93woZ3O9Wp1NOvF1gT790w/kanMqcsqSy/blAgAAAACu\nDKZXA0Avd3R/pj5/bbVOVR6QJG36eZzGJczXzNt/L0kKCUtS1NTbVbrjDb35eJImXXe/Jl33oKYv\nXiPfAYHK2/y8dvz/P5ev/yCNjJgux4JHdaw8S5nv/tJzTK8Vsc8QOW2Z1+fBoRG6+dHPtOd/n9XO\nd36hLTWH1c/STwOHjVP45EW6esVa9bP6XsbvBgAAAADgSrC4XC6X2SEAAB2zZs0a/cd/bdAtv9hl\ndpRuKffj/1BlwZs6sL/M7CgAAAAA0JetZXo1AAAAAAAAAENROgIAAAAAAAAwFKUjAAAAAAAAAENR\nOgIAAAAAAAAwFKUjAAAAAAAAAENROgIAAAAAAAAwFKUjAAAAAAAAAENROgIAAAAAAAAwFKUjAAAA\nAAAAAENROgIAAAAAAAAwFKUjAAAAAAAAAENROgIAAAAAAAAwFKUjAAAAAAAAAENROgIAAAAAAAAw\nFKUjAAAAAAAAAENROgIAAAAAAAAwFKUjAAAAAAAAAENZzQ4AAOic5sY67c/5H7NjdEvVFcVmRwAA\nAAAAiNIRAHqc2pNHteWV75sdo9uaMCHC7AgAAAAA0OdZXC6Xy+wQAICeac2aNXr11VdVWlpqdhQA\nAAAAQPexlns6AgAAAAAAADAUpSMAAAAAAAAAQ1E6AgAAAAAAADAUpSMAAAAAAAAAQ1E6AgAAAAAA\nADAUpSMAAAAAAAAAQ1E6AgAAAAAAADAUpSMAAAAAAAAAQ1E6AgAAAAAAADAUpSMAAAAAAAAAQ1E6\nAgAAAAAAADAUpSMAAAAAAAAAQ1E6AgAAAAAAADAUpSMAAAAAAAAAQ1E6AgAAAAAAADAUpSMAAAAA\nAAAAQ1E6AgAAAAAAADAUpSMAAAAAAAAAQ1E6AgAAAAAAADAUpSMAAAAAAAAAQ1E6AgAAAAAAADAU\npSMAAAAAAAAAQ1E6AgAAAAAAADAUpSMAAAAAAAAAQ1E6AgAAAAAAADAUpSMAAAAAAAAAQ1E6AgAA\nAAAAADAUpSMAAAAAAAAAQ1E6AgAAAAAAADAUpSMAAAAAAAAAQ1E6AgAAAAAAADAUpSMAAAAAAAAA\nQ1nNDgAA6BmamppUX1/vta2hoUFtbW2qrq722m61WhUYGHgl4wEAAAAAuhFKRwBAh2RnZ2vmzJnn\nfGzIkCFen//gBz/QSy+9dCViAQAAAAC6IaZXAwA6ZPr06RozZkyH9l26dOllTgMAAAAA6M4oHQEA\nHWKxWLRy5UrZbLYL7hcSEqJrrrnmCqUCAAAAAHRHlI4AgA5bsWKFWlpazvu4r6+v7rjjDvXrxz8v\nAAAAANCX8VshAKDDYmNjFRMTc97Hm5ubmVoNAAAAAKB0BAB0zqpVq847xTo8PFxJSUlXOBEAAAAA\noLuhdAQAdMqyZcvkdDrbbXdPrQYAAAAAgNIRANAp48aNk8PhkMVi8drO1GoAAAAAgBulIwCg01at\nWiUfHx/P5xaLRQkJCYqKijIxFQAAAACgu6B0BAB02u233y6Xy+X53Gq1MrUaAAAAAOBB6QgA6LSQ\nkBDNnj3bM9rR6XTqtttuMzkVAAAAAKC7oHQEAHTJypUr5XK51K9fP82YMUOjR482OxIAAAAAoJug\ndAQAdMktt9wiq9WqtrY2plYDAAAAALxYzQ4AAH3Nvn37lJWVpezsbB08eNDsOJckJCREFRUV+vDD\nD7V582az43RZYGCgkpKSlJycrEmTJql///5mRwK8nDx5Uvn5+SosLFReXp4qKyvNjoRLZLFYFB4e\nLrvdLrvdrtjYWPn6+podC31QRUWFMjIylJGRoYqKCrPj9EoDBgxQSkqKZs2apfj4eK/F+ACgN7O4\nzlwJAABgqPLycmVlZSkrK0u7du1STk6OTp48KavVqujoaI0bN04Wi8XsmF125MgRffXVV0pOTjY7\nyiVxFzqnTp2SzWZTbGysUlJS5HA4lJycrISEBMoAXBFNTU0qKipSYWGh8vPzPR9fffWVJCk4OFjR\n0dEKCQkxOSkuVWtrqw4dOqSysjK1tLTIarUqMjJS8fHxSkhIUFxcnOLj4xUeHq5+/ZicBGO0traq\nsLBQ6enp2rZtm9LT03Xw4EFZrVbFxsZq7NixZkfslWpra7V7926dOnVKgYGBmjp1qmbNmqUZM2Zo\n2rRpCgwMNDsiAFwOaykdAcAgFRUVys7O9nzs3LlTx48fl4+PjyZMmOAZzRIfHy+73a4BAwaYHfmS\nNTU1KSMjQ3PnzjU7iiGOHj2q/Px8FRQUKD8/Xzk5OaqurvaUAcnJyXI4HHI4HEpJSZGfn5/ZkdGD\nua8Z7pLR/dHU1CSbzabw8HBFRka2++jJf6hAe06nUxUVFSotLVVBQYHKyspUVlamffv2qa2tTb6+\nvpowYYKSk5MVFxen2NhYJScna+TIkWZHRw9QV1en3bt3KyMjw1M0njhxQgEBAZo4caLnD2xTpkxR\nUFCQ2XF7vUOHDmnXrl3Kzs5WVlaWysrK1K9fP0VFRenqq6/WzJkz5XA4FBcXZ3ZUADACpSMAdMXh\nw4c9U6TdPzgeOXJEkjR8+HDFx8crOTnZ80uiv7+/yYnRVWcXkVlZWaqpqZHNZlNERIRXETllyhRG\nRKKd6upqFRYWesrFrKws5eXlqba2VpIUGhrqKRTtdruioqIUHR3N/0t9XEtLiw4cOKD8/Hzt27fP\nU0oePXpUkjRo0CDFxsZ6pmY7HA4lJiZq4MCBJieHmdw/n2RkZCgtLU1ZWVlqbm5WaGio59+r+Ph4\nTZ48WVYrd9oyW2VlpXJzcz0/S+7Zs0fNzc0aMWKEkpOTNWvWLM2cOZOfLwD0VJSOAHAxJ0+eVEFB\ngVfBWFxcLOmbsuDM0YvJyckaNGiQyYlxObW2tuqLL77wKiILCwvV0NAgm82myMhIzy8JDodDEydO\nZGpkH9Hc3KyysjLP6EX3dcP9B4ng4GBFRUUpMjJSERERio+PV2xsrAICAkxOjp6kpqZGpaWlnhGR\nBQUFKioqUl1dnSRpxIgRXkVkXFyc7HY7I7N7odbWVpWUlHhGMbp/PnHPsHCXjFOnTtWYMWPMjosO\ncDqdKi4u9oyG3L59u2dkamJioufni5kzZ2rIkCFmxwWAi6F0BIAz1dTUKD8/36tgLCkpkcvlalcw\nJiUl8QMfJLUvIt1lZGNjowYOHKiEhASvEZEUkT2b0+nUoUOHVFhY6FUw7t27V21tbZ6p0Xa73TOC\nMSoqSldddZXZ0dGLuUdlnzk9u6SkRM3NzZ6R2e4y0j1NOzY2lun6PcjZU6UzMjJUXV2tgQMHKjEx\nUcnJybLb7Zo6dSr3COxFLjQl+8zRkEzJBtANUToC6LtOnz6tPXv2dKhgnDx5soYOHWp2ZPQgTqdT\n+/fv9yoi8/Ly1NTUpMDAQM8UfHcRyS//3VNFRYVnWrS7XNy9e7caGhpktVo1evRoz6hFd8EYERFB\nqYxuwX0dcheR7qnahw4dksvlUlBQkCIiIhQXF+cZFZmQkKDhw4ebHR36v/u+XmiqdEpKiuLi4rjm\n9CHuKdnu0fSZmZlqampqNyWbe08D6AYoHQH0DbW1tZ575rgLRveopLMLxsTERA0bNszsyOiFzlVE\nuu/fFBQUpPj4eE8JSRF5ZdXU1Gjfvn2e0YuFhYXas2ePKisrJXnfd/HM+y/2hgWh0PecPn1a5eXl\nXovXlJSUeP5/Hzx4sNf07NjYWCUlJXF/4svo7KnS6enpOnDggKxWq8aPH+8pGadNm6bRo0ebHRfd\nyPmmZPv7+2vy5MlMyQZgJkpHAL1Pc3Oz8vPzlZ6e7ikZS0pK1NbWpqCgIEVFRXlGmaWkpDCiA6Y6\nu4jMyspSUVGRWltbz1lEMn3q0rS0tKi0tNQzetFdMJaXl3tGfo0bN85rUZeJEycy0hl9gvt+ke4R\nke57RrpH9o4dO1ZxcXGeItLhcCgmJkY+Pj5mR+9x3H8MvdBUaXfRyB830FnnmpLtcrkUHh6uWbNm\neYpI/rgJ4DKjdATQs7kLhDNHMLqnH51ZMLpHMkZFRZkdGbio+vp6FRYWeo2I3Ldvn9ra2jR48GA5\nHA7PQjUpKSkaMWKE2ZG7JffURHfB6P5oamry3Hfx7FWjx44dyy9gwBmcTqcqKiraLV7jvib5+vp6\nFi1xl5FxcXEaP3682dG7lYqKCq8FX3bt2qWWlhamSuOKcN9SKCsry2tKdmhoqFJSUpiSDeByoXQE\n0HM4nU7t3bvXq2DMzs723CMvOjraq2CMjIykPECvUVdXp6KionMWke77OLlHQ06ZMkWhoaFmR75i\nqqurPfdcLCwsVFZWlvLy8lRbWyvp/1aZj4qKUkREhKKiohQdHS1fX1+TkwM9V0tLiw4cOOAZFVla\nWqp9+/bp4MGDkqRBgwYpNjbWayXtSZMm9YkFTs6eKp2Wlqby8nJZrVbP98Jut2v69OkaNWqU2XHR\nB509JXvHjh2qqqryTMl2OByaNWuW5s6dy0h/AJeC0hFA93SugjEnJ8ezGvDEiRNlt9s9BSMLN6Av\nqq2tVXFxsVcR6Z5CdXYROW3aNIWEhJgd+ZI0NzerrKzMa8Xo7OxsHTlyRJIUHBysqKgoz2Iu8fHx\nio2NVUBAgMnJgb7DPUX7zMVriouLVVdXJ0kaMWKEVxHpnq7dv39/k5N33ZlTpdPS0pSenq6amhoF\nBgZq0qRJnqnSycnJPfrrRO/mnpLt/rc1Pz+fKdkALhWlIwDzuUcEnFkwuleHDQgI8IyUoGAELu70\n6dMqKSnxKiJLS0slqV0ROWPGjG45gsHpdOrQoUOeey66C0b34k/uqdF2u90zPZoVd4Hu7ejRoyor\nK/MsXrNv3z7t3bvXc7uDiIgITxnpnqbdXcuNM6dKp6enKzc317MwHVOl0Vu4y3T3rYuysrLU2Nio\n4cOHa8qUKUzJBtARlI4Arrwzf1jPzs7W7t27VV9fL5vNprCwMM8U6ZSUFMXGxnKDeuASnTp1Snv3\n7vVarObQoUOS2heRs2bN0uDBg69YtoqKCs+0aHe56P6jg9Vq1ejRoz2jFt0FI394AHoH90Ja7lGR\nZ364F3aKiIhQXFycZ1RkfHz8Fb19xNlTpT///HMdPHjQa6p0cnKypk2b1i3/iAMY5ewp2Tt37lRl\nZaVsNpvi4+M9oyG/9a1vadiwYWbHBdA9UDoCuDJ+85vfaPPmzdq9e7dqa2vl6+ur2NhYxcfHKyEh\nwTOC0Wq1mh0V6BOOHj2qvLw85efnKy8vTwUFBaqsrJSPj4+ioqKUkpKiJ598UmPHjjX0vM3Nzbr/\n/vs9ozBramokSWPGjFFkZKRiYmIUHR2t6OhoRUREyGazGXp+AN2fe8R2aWmp13/d14tRo0bJbrdr\n4cKFWr169WXJsH79ev33f/+3du3apfr6eg0ZMsTzxxmHw6GEhARGd6HPO3DggNd91vft2ydJiomJ\n0axZs/Tss89yixOgb6N0BHBlREZGatCgQbr11luVkJCg6OhoCkagm6moqFBeXp527typP/3pT8rI\nyNCMGTMMPUddXZ0GDhyo6667TnPmzPEs6tIXFpcAcGkOHz7sKSDfffddjRgxQp999tllOVdqaqr2\n79+v73//+3I4HJowYcJlOQ/Qm1RXVysnJ0cfffSR3n77bR05cqRPLWwHoJ21/MYP4IqZM2eOli5d\nanYMAOcxatQojRo1SpMmTdKf/vSny3qu22+/XXPnzr2s5wDQu4wcOVIjR47U7Nmz9dVXX3luE3G5\nJCQkaMmSJZf1HEBvMnjwYH3729/WwIED9fbbb5sdB0A3wA2RAKAT0tPT9fTTT3tta2tr0yuvvKJb\nbrnlnM9Zu3at5s2bp7i4OEVGRmr27Nn67W9/61nJ80zvv/++Fi1apLi4OM2YMUMPP/ywjh8/fkmZ\nL5ZPknbt2qVbb71VMTExSklJ0VNPPaXm5uZO77d582atW7dOra2tl5S5ublZTzzxhJKTkxUTE6Pl\ny5crKSlJYWFhev311y/p2B21bt06zZ07V9HR0Zo4caLmzp2rZ555RrW1tV77deb1Re9z4403Kiws\nTGFhYUpJSdETTzxx0eccOHBAixYtUmxsrMLDw7Vq1aounbsr1yPJuPd7V3A96hquRzifRYsWafz4\n8Zo/f/5lOb7Z1xnex7yPAfRslI4A0EHPPvusNm7c6HX/qAMHDmjJkiX6zW9+o4aGhnM+b9u2bbrj\njjuUkZGh3NxcPfLII3rllVd03333ee33t7/9TQ888IBSU1O1Y8cOrV+/XpmZmbrjjjvkdDq7lLkj\n+UpLS7Vy5UrNnDlTOTk5eumll/TWW2/pscce6/R+1157rfz8/LRs2TKdOnWqS5kl6Y9//KM+++wz\nbdmyRY8//riWL1+ud999t8vH64pdu3Zp6dKl2r59u7KysvTjH/9Y69at07333uu1X0dfX/ROH374\noa6++mpZLBb9/e9/1y9/+Uuvx1tbW9uN8A4PD9cHH3ygRx55RP/yL/+iP//5z50+b1evR0a+3zuL\n61HXcT3C+XzwwQeaPn36ZTl2d7jO8D7mfQygZ6N0BIAOWLdunT744AO98MILnhtiFxcX6+mnn9aK\nFSsUGxt73ucGBARo2bJlGjRokAICArRgwQLdcMMN2rp1qw4fPuzZ7/XXX1doaKh++MMfKjAwULGx\nsbrrrrtUVFSk3NzcTmfuaL7nn39eISEh+tGPfiR/f38lJSXpnnvu0dtvv60vvvii0/t973vfU2xs\nrO68884ul6WffPKJEhISFBQUpGXLlik1NbVLx+moxsbGdiM2bDabVq1apSFDhiggIEA33nijrr/+\neqWlpenYsWOe/Tr6+qL3WrRokVwul/75z3+2e2z79u3avn27ysrK2j326aefasGCBZ0+36Vcj4x+\nv3cU16OO43qErrBYLIYerztdZ3gf8z4G0HNROgLARZSXl+uZZ57RQw895LVS5cSJE/Xiiy/qpptu\nkq+v73mfv2HDBvn4+HhtGzx4sCR5jRI4fPiwhg8f7vWLw8iRIyVJX3/9dadzdySf0+nUp59+qqlT\np3qdd86cOXK5XPrkk086tZ/bgw8+qKKiIm3YsKHTuaVvvhdXcqGhN998U1VVVV7bXnrppXYrk7pv\nhn7mFKeOvr7ovW644QbZbDb94x//aPdYWlqaQkND9fe//91re2Njo4qLizV79uxOnetSrkeX6/3e\nEVyPOo7rEbrCZrMZdqzueJ3hfcz7GEDPROkIABexceNGuVwuzZs3z7BjHjlyRP3799fYsWM928aO\nHavKykqv/dz3c7zqqqsMO/eZvvzyS9XV1Wn06NFe28eNGydJKikp6dR+bsHBwZo6dao2bNggl8vV\n4TxpaWmaPXu2jh07pnfeeUdhYWEXHE3hcrm0fv16ffvb31ZkZKQSEhJ09913txuJlZmZqXnz5slu\ntysqKkrXX3+9Pv/8c0nSr3/9az355JM6ePCgwsLCLlgClZeXKygoSGPGjLng13Gu1xe9V2BgoGbP\nnq309HQ1NjZ6trtH5KSmpuqjjz7yek5GRoauueYaT1GwdetWxcXF6b/+678ueK5LuR5drve7Ubge\ncT1C15WXl2vu3LmaOHGioqOj9Z3vfEe7du3y2qcnX2d4H/M+BtAzUToCwEVs2bJF48eP14ABAww5\nXkNDg7Zt26alS5d6jUxYvXq1jh8/ro0bN6qurk6lpaXasGGDrrnmGk2ePNmQc5/NXWq6p065+fn5\nqX///p4StKP7nSkuLk5HjhxRcXFxh/NcffXV2rp1q4YNG6Zbb71V5eXlKioqOu/+zz33nJ5++mmt\nXr1aOTk5euutt3T48GF95zvf8cpUWVmpBQsWKCMjQ5mZmfL399cDDzwgSXr88cc1b948jRs3TuXl\n5dq6davXOZxOp44cOaJXX31V6enpeuKJJy44ouR8ry96t4ULF6qxsVHp6emebWlpaZo1a5ZSU1NV\nUlKiAwcOeB779NNPtXDhQs/n7kUS2traLnieS7keXc73uxG4HnE9QtcFBwfrz3/+s/Lz8/XXv/5V\nLS0tWrFihdd1p6dfZ3gf8z4G0PNQOgLABdTX1+vLL7/0/OXdCC+88IKGDx+uhx9+2Gv71KlTde+9\n9+pXv/qV4uLidN1116murq7dqpFGampqkqR203gkyWq1ekZtdXS/M4WHh0u6fKOiGhsbtX79et1w\nww26+eabFRgYqJiYGK1Zs0YnTpzQpk2bPPumpqbqwQcfVHBwsAYNGqRrr71W1dXVOnHixEXPM23a\nNE2bNk3PPfecHn30Ua+i6FzO9/qid5s3b5769+/vNcV627Ztmj59upKTkxUaGqoPP/zQ81hubq5m\nzZrl+Xzu3LkqLCzU/ffff95zXOr16HK+343A9YjrEbouICBAY8aMkdVqVVRUlJ566ik1NTXpjTfe\n8OzT068zvI95HwPoeSgdAeACqqqq5HK51L9/f0OO9/HHH+vDDz/Ua6+91u6v+7/73e+0adMmbdq0\nSUVFRUpLS5PD4dAtt9xy2W4c7r630LluzN7S0uL5uju635ncIyQu16io0tJS1dXVKSEhwWv7pEmT\nZLPZLrj4jvu+Tu5RHxeyY8cO5eTk6Pnnn9c777yj1NTUdvdpcrvQ64veLSAgQHPnztU///lPuVwu\nNTc3y2q1ymq1ymKxaP78+Z77OpaVlSkuLq7T9xe71OvR5Xy/G4HrEdcjGCcmJkaBgYGdGhUode/r\nzP9j787DqqwTv49/gMMmiqiIGyoiix4WMXBLrFQsRyXLJNOUbDKtfs0409M0zVY25YxOM7+JftOk\n/tQMK0tKK6tpsmkRNBdwYRMQFTcQRXEB2eH5w+ecR9wCPXKzvF/XxTWX59zc5wNnzt3hc74Lr2Ne\nxwBanqZbTRcAWiDLJ/GXL/x9IzZs2KDly5fr/fffty4cbnHixAktWbJETz31lG6//XZJUrt27bRo\n0SKFhoZq6dKlWrBgwU1nuFzXrl0lSSUlJfVuLysrU0VFhby8vBp13KUsvzPL79DWzp07J+nKqVmS\n5O7uXi/rN998o6VLl2rfvn06f/58o3a/NJlM6ty5s0aNGiVvb2+NHj1ab7zxhl544YV6x13v+UXb\nEB0drS+++EKpqak6fvx4vXW8JkyYoFWrVunQoUM3vGv1zV6PbuXr3Ra4Hv04rkdoDEdHx0bv9tyc\nrzO8jgGg5WGkIwBch+WT9oZ8cn09q1at0vr16/Xee+9d9Y1jXl6eampqrrivffv28vDwUE5Ozk09\n/rX07t1bbm5uV+yOfejQIUkXR0o05rhLVVVVSdItGxXl7u4u6co/WKSLfzhYdv7Oz8/X3Llz1bVr\nV3388cdKT0/X888/f0OP6ePjIwcHhyuejx97ftE2jBkzRm5ubtq4caO2bdumoUOHWu+LiIiQl5eX\ntZQcMWJEo89/s9ejW/l6twWuR43D9QjXU11drTNnzqhnz56N+r7mfJ3hdQwALQ+lIwBcR5cuXWRn\nZ6fz58/f0PfX1dVp0aJFys7O1rJly645NaZ79+6SLo54vFRpaanOnDljfaNrayaTSaNHj9a2bdvq\nLSz/7bffys7OTuPGjWvUcZey/M48PT1vSfbAwEC5ubkpNTW13u27d+9WVVWVQkJCJF1c+6m6ulqx\nsbHq06ePnJ2dZWdnd91zFxcXX3XNK0s5bHk+Gvr8om1wdnbWuHHj9MUXX8jFxUX29v//bZa9vb3G\njx+vdevWydPTs9FTq6Wbvx7dyte7LXA9ujquR7gRP/zwg2praxUcHNyo72vO1xlexwDQ8lA6AsB1\n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\nh8vV1dXouGhhLFOlLR/IW5ZeYao0gCZG6QigbbC8ub90RKRlUwrL1EvLiMiwsDB23cMtcXnBmJ6e\nrj179lhH5l5eMPLHQNM5e/ascnNz6xWRe/bsUVFRkaSLU7QtoyIvHR1JGYCW6Pz588rLy7Nu6rJv\n3z5lZWVZ///eqVOnemsums1m3XbbbWrXrp3ByVuvy6dkJyUl6eDBgzKZTPL19bUWkMOHD1evXr2M\njotm5PKp0j/88INOnz5tnSptKRhHjhypzp07Gx0XQNtC6Qig7bJMNbm0iMzKylJdXd0VReTgwYMZ\n6YRGuVrBmJqaal2D1DLaloKxecvPz7eOirRsXrNr1y7ryK9evXpZ14m0bF7DxlZoLizXoUs3dcnN\nzdXhw4etI3v9/PwUFBRkLRjZCb75sCwRYdmgxrJ8DFOy27aioiLt3r3buuGLZaq0ZX1npkoDaEYo\nHQHgUmfPnlVaWlqDisjbbruNT4wh6eIIlf3799crGNPS0qy7rYeGhtYrGAcOHMgfiC1YdXW1Dh8+\nbB0VaSkjLaOnLetFBgcHW0dFBgQEqE+fPkZHRytWWFiotLQ0a8GYm5urrKwsVVZWytHRUX5+ftZN\nXSyjF/mwo2UpLS3Vrl27rjslOzg4WMOGDVOHDh2MjgsbudpUaXt7ewUEBNQrGVl+BUAzROkIAD/m\nzJkz1k+TLW/49u7dK0lXFJERERHy8PAwODFuJUvBaHnjn5aWpoyMDJWVlcnR0VH+/v7WPwAoGNuW\nyspK7du3r14RmZKSouPHj0uSOnbsqICAAPn7+1tHRZrNZrm5uRmcHC3J2bNnr9jUJTMzU6WlpZJk\nHe106aYuwcHBjHhqhS6fkr1jxw5lZWXJ3t5efn5+1g+7hg0bJm9vb6PjogGuNVXazc1NYWFhTJUG\n0NJQOgLAjSgoKLDuAGgpIi3FgpeXl3XqrOUPP9bBarkso4csoxeTk5N19uxZSZKrq6uCg4M1efJk\n3XnnnRo6dKicnJwMTozmpri42Do92zI6cs+ePSopKZFUf71Iy+Y1AQEBlERtXFVVlQ4ePGidEm1Z\nf7GwsFCS5OHhIbPZbB29GB4errCwMLVv397g5GhKdXV12rJli1avXq21a9fq3LlzmjBhgsxm8zWn\nZIeEhGjw4MEymUxGx2/zLFOlLe8lLes8Xz5VmvcXAFooSkcAsBXL2kuWr23btunkyZNycHBQ//79\n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\nAAAArQUjHQEAAFqp4/u36tu35qq0+Jhuf3CxzHfOUeamFdq+/kWprk6jf7pcexPfUuGBbXJy6aCh\n97+k/hEPWL+/rrZGO7/4i3K2rlF5SZE6du2vsPHPyDf8/ovnz/1BSWueUemZAtVWV8rdy1fDpvxR\n3gPHKHXj69r5+WLZ2TvowZd2KnVjnPYnr9PE+Z+oYze/BuX/IeF57U1cJed2Htap5Fs+eE45W99T\ndWWZZi7OkUv7Lo36mSQpd/tapX+7RMX5WbKzt5dLe08F3j5TFaWnlZn4lmqrK7X8v7rI3bOf7oj9\nxxW/w4u/nDqlffOmsjfH69ypQzI5uqqH/+0act+L8ujmL0mNzgUAANCaMNIRAACgleref3i9acKS\nZL7jMQWPeVLVVeVydG6vsY+t0LSXUtTB00eJ7/5CtTVV1mO3f/JHpW78Hw2fulAP/3mv+oTco2/f\nmquiwxc3eSk7f1K+4ffroZd3a8afMuTo7KZv35onSQod93MFj31KVRWl2vPv/1aHLn3l1S9Cdbr2\n+oj52YlK+/of1n+PiFkk39vuq3fM7dP+ovCJz9/wz5T+7RJ99/aT6jf4Xs34U4amL0xX2D2/1NnC\nXA2f+if1Db5H7p79NOeNU3rwpeSr/g4lKeWLxdrx6csKG/+MZi7K1qRnPlNp8TF99t8TVXb+ZKNz\nAQAAtDaUjgAAAG1UN9+hcnTpIJf2nvINv1/VlRdUUnxUklRTVaG9m1bIZ9BE9QuLlpNrR4X95FnZ\nOzgq54f3JEn9Bt+r2yY8J+d2HnJ266S+IT9RRelplZfUn548ZPKLMt85R1GPv20dBShJlWXntPy/\nuli/vni9fsFo65+ptqZKOz//i3oERGrQ3b+Qs1snObfzUODtM+XZd3CDH6O6qlzp//mn+g2aJL+h\nD8rJ1V2de5o1cvp/q7zklLKS3m5ULgAAgNaI6dUAAACQg8lJklRbUy1JOntin6ory9Sp50DrMSZH\nF7m6e+lMYc5Vz2HvcPGtZV1tbYMe08nV3bp7tSQV7NusokO7bij/1Vz+M50+lqnKsrPyHjim3nF2\n9g4KHj2vwec9U5ClqopSefYNq3d7176DZW9y0om8lEblAgAAaI0oHQEAAHCFqooLkqTkDQuVvGFh\nvfvadewmSTqS/pVSv/6HiguyVFl+/qanC/fwH6ke/iNv6hzXU1V+XpLk3K7jTZ2n4sJZSZKjs9sV\n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\n5ovSEQAAtG6XFowpKSnatm2bTp48KQcHB/Xv379ewRgSEiIXFxejIwPNRklJifbu3dugInLEiBHy\n9PQ0OjIAAGgeKB0BAEDrcXnBuGPHDhUWFkqSvLy8NGTIEIWHhyskJERBQUFq166dwYmBlufcuXPK\nzs6uV0Tm5ORI0hVF5MiRI9W5c2eDEwMAAANQOgIAgJapvLxc33zzjXVzjOTkZBUUFMjOzk79+vWz\nTo22FIxubm5GRwZarRMnTig1NVXp6elKTU1VWlqaTp48KXt7ewUEBCgiIkIREREaNmyYhg8fbnRc\nAABw61E6AgCAlmn37t0aPHiwevfurUGDBllLxuDgYHXo0MHoeECbV1BQoLS0NGsZuWvXLrm5uenY\nsWNGRwMAALdenMnoBAAAADcjPj5e/fr1MzoGgMv06NFDPXr00N133y1JWrFihVasWGFwKgAA0FTs\njQ4AAADQ1iUlJWnx4sX1bqutrdWKFSs0ZcqUq35PXFycoqKiFBQUJH9/f915553685//rNLS0iuO\n/eSTT3TvvfcqKChIt99+u5599lmdPHnypjL/WD5J2rFjhx544AENGDBAQ4YM0aJFi1RZWdno4zZu\n3Kg333xTNTU1N5W5srJSL730kiIiIjRgwAA9/PDDuu222+Tj46N33333ps7dUG+++abGjBmjwMBA\nDRw4UGPGjNHf/vY3lZSU1DuuMc8vAABAc0TpCAAAYKC///3vWrVqlZ5++mnrbQcPHtSDDz6ol19+\nWWVlZVf9vi1btuiRRx7R5s2btXv3bv3qV7/SihUr9NRTT9U77rPPPtP8+fM1YcIEbd26VcuXL9f2\n7dv1yCOPqLq6+oYyNyRfTk6OZs2apZEjR2rnzp1aunSp1q5dq9/97neNPm7cuHFydnbWjBkzdO7c\nuRvKLEn/+7//q++++07ffPONXnjhBT388MNat27dDZ/vRuzYsUPTp0/XDz/8oOTkZP2f//N/9Oab\nb+rJJ5+sd1xDn18AAIDmitIRAADAIG+++aY+/fRTvfHGG9aNbvbu3avFixdr5syZMpvN1/xeNzc3\nzZgxQx4eHnJzc9OkSZM0fvx4ff/99yooKLAe9+6776pbt26aN2+eOnToILPZrDlz5igzM1O7d+9u\ndOaG5nv99dfVtWtX/fKXv1S7du1022236YknntCHH36o/fv3N/q4n/70pzKbzZo9e/YNl6VfffWV\nQkND5e7urhkzZmjChAk3dJ6GKi8vv2IkqKOjo2JjY9W5c2e5ublp4sSJuueee5SYmKgTJ05Yj2vo\n8wsAANBcUToCAAAYIC8vT3/729/0zDPPyNnZ2Xr7wIEDtWTJEt13331ycnK65vevXLlSDg4O9W7r\n1KmTJNUbfVhQUCAvLy/Z2dlZb+vRo4ck3dCGHg3JV11drW+//VbDhg2r97h33XWX6urq9NVXXzXq\nOItf/OIXyszM1MqVKxudW7r4uzCZmm5J8w8++ECnTp2qd9vSpUvrPd+S1K1bN0mqN3W6oc8vAABA\nc0XpCAAAYIBVq1aprq5OUVFRNjvn8ePH5eLiot69e1tv6927t4qKiuodZ1nPsU+fPjZ77EsdOXJE\npaWl6tWrV73b+/btK0nKyspq1HEWHTt21LBhw7Ry5UrV1dU1OE9iYqLuvPNOnThxQh999JF8fHyu\nO0qzrq5Oy5cv19ixY+Xv76/Q0FA9/vjj9UZeStL27dsVFRWl4OBgBQQE6J577tGmTZskSX/84x/1\nyiuv6NChQ/Lx8dGdd955zcfLy8uTu7u7vL29r/tzXO35BQAAaK4oHQEAAAzwzTffyNfXV66urjY5\nX1lZmbZs2aLp06fL0dHRevvTTz+tkydPatWqVSotLVVOTo5WrlypO+64Q4MHD7bJY1/OUmpapoxb\nODs7y8XFxVqCNvS4SwUFBen48ePau3dvg/OMGjVK33//vTw9PfXAAw8oLy9PmZmZ1zz+tdde0+LF\ni/X0009r586dWrt2rQoKChQTE1MvU1FRkSZNmqTNmzdr+/btateunebPny9JeuGFFxQVFaW+ffsq\nLy9P33//fb3HqK6u1vHjx/X2228rKSlJL730Ur3n7XLXen4BAACaK0pHAACAJnbhwgUdOXLEOqLP\nFt544w15eXnp2WefrXf7sGHD9OSTT2rBggUKCgrS3XffrdLS0it2y7aliooKSbpierAkmUwmlZeX\nN+q4S/Xr10/SlaMgbaW8vFzLly/X+PHjdf/996tDhw4aMGCAFi5cqNOnT+u9996zHjthwgT94he/\nUMeOHeXh4aFx48apuLhYp0+f/tHHGT58uIYPH67XXntNv/nNbxQdHX3d46/1/AIAADRXlI4AAABN\n7NSpU6qrq5OLi4tNzvfll1/q888/1+rVq68YNfjqq6/qvffe03vvvafMzEwlJiYqPDxcU6ZMuWUb\nkljWLLzahi9VVVXWn7uhx13KMjL0aqMgbSEnJ0elpaUKDQ2td/ugQYPk6Oh43c13LOtF1tTU/Ojj\nbN26VTt37tTrr7+ujz76SBMmTLhi/UeL6z2/AAAAzRWlIwAAQBOzjPC7fEORG7Fhwwa9+eabev/9\n969YE/DEiRNasmSJZsyYodtvv13t2rVT7969tWjRIhUWFmrp0qU3/fhX07VrV0lSSUlJvdvLyspU\nUVEhLy+vRh13KcvvzPI7tLVz585JunLKtyS5u7vXy/rNN99o2rRpuu222+Tv768///nPDX4ck8mk\nzp07a9SoUfqf//kf5eTk6I033rjiuOs9vwAAAM0ZpSMAAEATs4zga8iIuOtZtWqV1q9fr/fee8+6\nA/Kl8vLyVFNTc8V97du3l4eHh3Jycm7q8a+ld+/ecnNzu2J37EOHDkmSBgwY0KjjLlVVVSVJNhsl\nejl3d3dJVxah0sVC0rLzd35+vubOnauuXbvq448/Vnp6up5//vkbekwfHx85ODhc8Xz82PMLAADQ\nnFE6AgAANLEuXbrIzs5O58+fv6Hvr6ur06JFi5Sdna1ly5Zdc8pt9+7dJV0c8Xip0tJSnTlzxlqg\n2ZrJZNLo0aO1bds21dbWWm//9ttvZWdnp3HjxjXquEtZfmeenp63JHtgYKDc3NyUmppa7/bdu3er\nqqpKISEhki6uKVldXa3Y2Fj16dNHzs7OsrOzu+65i4uL9fOf//yK2y3lsOX5aOjzCwAA0JxROgIA\nADQxV1dX9enT54bXVNy3b5+WLFmiNWvWyM/PTz4+PvW+li1bJuniSMIRI0ZozZo12r59u8rLy1VQ\nUKD/y96dR1dV3/v/fyU5CSETyBBQQBJIYoaTcDKjCSA0iCJ4S6WgFJXeK1ap1dbrcNt+v7W9V9fV\nX+1SuXWi4Nfqcmh7W2/tdahQRJJAyEBO5okhpBLGECAJCZnO7w/W2c0xiBlO2Al5PtY6f7DPzj5v\nctbeO+d1Pp/358c//rEkafXq1cYxH3zwQSUmJqq0tHTw/0FJDz30kE6ePKnnn39e586d0969e7Vp\n0yatXLlSs2bN6vd+Ts7fmXMUpLvrHjNmjNavX69PPvlE77//vpqbm1VZWamf/vSnCg4O1po1ayRJ\n11xzjSQpKytL58+f18GDB3v1exw/fryOHTumL774Qi0tLfLx8VFmZqZ27dql5uZmdXZ2qqysTI88\n8oj8/Px07733Sur7+wsAADCcEToCAACYYNGiRaquru61QnNhYaFWrlyplJQU2e12VVRUKDk5Wbff\nfrtyc3MlXRgJ1xceHh56+eWXtXz5cj3++OOKi4tTRkaG6uvr9eqrryolJcXYt6OjQw0NDdq6desl\nj9mX+iQpIiJCb731lnbu3Cmbzab7779fq1at0tNPP+1yvL7u51RcXKypU6caoWNf6j58+LBuvfVW\nnTx5Un/+85+1bNkyffzxx9q8ebNWrlwpSXr66ad1//33S5IefvhhPf7449q4caNsNptWr16t6dOn\n63e/+538/PwkXQg9H3jgAb355ptKTk7Wc889p7lz50qSVq5cqSNHjmjt2rWaOHGiMjIytG7dOrW2\ntiopKUlPPPGEUlNTFR0drQ0bNmj69Ol6//33dd1110nq+/sLAAAwnHk4+KsGAACMQHa7XfHx8frs\ns88UGhpqdjn9Vltbq4yMDP3yl7/UihUrzC5H3d3duuOOO7Ry5UqtWrXK7HIuqrGxUXPnztWjjz6q\n9evXSxoZdeOCLVu2aMuWLb16eAIAgCvSi4x0BAAAMEFISIgeeeQRbdy4US0tLabW0tXVpU8//VTN\nzc1avny5qbVcygsvvKDo6Gh997vflTRy6gYAABiNCB0BAABMsmHDBi1dulQ/+MEPBryojDvk5OTo\n448/1m9/+1uNHTvWtDouZfPmzSovL9cbb7whi8UiaWTUDQAAMFpZzC4AAABgNHvssceUmZmpl19+\nWU888YQpNaSlpSktLc2U1+6LrVu3qr29Xe+99568vLyM7cO9bgAAgNGM0BEAAIxo+/bt04wZM4zR\nbyPRvHnzNG/ePLPLGLYWL16sxYsXm10GBqGpqYlejgAAjDIj969zAAAwqvn6+iowMFDr16+Xj4+P\noqKiZLVaFRcXp7i4OIWHh4/oIBIYqVpaWlRWVqbi4mIVFxertLRUBw8elMPhkM1mM7s8AABwmbB6\nNQAAGNHq6+tVUFCggoICZWVlKScnRy0tLfL29lZoaKisVqusVqtiY2Nls9nk7e1tdsnAFaOzs1MH\nDhxQfn6+8vPzVVJSov3796u7u1vjx49XTEyMEhMTlZiYqPT0dM2aNcvskgEAwOXxIqEjAAC4onR1\ndamystIIIvPz82W323Xu3Dl5e3srMjJSSUlJRhAZFhYmT0/W1gO+jjNgLCkpUWlpqUpLS2W329XR\n0aGgoCDFxsYaAWNiYqJiYmLMLhkAAJgkpft1AAAgAElEQVSH0BEAAFz5Ojs7VVVV5RJEFhYWqrW1\nVf7+/oqOjnYZEUkQidHuYgFjUVGR2tvbLxowRkdHy8PDw+yyAQDA8EHoCAAARqeLBZF79+5VW1ub\nAgICFBkZqdjYWCOIDA8PJ1TBFeliAWNxcbHOnz+vwMBAxcbGKikpyQgYo6KiCOUBAMDXIXQEAABw\n6ujoUHV1tUsQmZ+fb4zuioiIIIjEiNbV1aX9+/e7BIylpaXGqN85c+YQMAIAAHcgdAQAALiUnkFk\ndna2srKyVFVVpa6uLo0bN07h4eEuQWRERITZJQOGY8eOqaSkRAUFBcrLy1N5ebnR3zQ8PNxlinRK\nSop8fHzMLhkAAFwZCB0BAAD6q7m5WXa73WVEZFVVlbq7uzVlyhQjgLRarZozZ44mT55sdskYBZwB\nY2lpqRE0nj59Wt7e3goLC3MZwZicnKwxY8aYXTIAALhyEToCAAC4Q1NTk4qKilyCyMrKSjkcjl5B\nZHx8vCZOnGh2yRjBvhwwFhYW6tSpU7JYLAoPD3cJGJOSkuTr62t2yQAAYHQhdAQAABgqZ8+eVXFx\ncZ+CyISEBE2YMMHskjEMfTlgtNvtamhokJeXlyIiIlwCxsTERI0dO9bskgEAAAgdAQAALqczZ84Y\nU1+dQWRFRYUk9QoiExMTddVVV5lcMS6nLweMxcXFOnHixEUDxoSEBPn5+ZldMgAAwMUQOgIAAJjt\n9OnTKi0tNRaqKSgo0JEjRyT1DiKTk5M1btw4kyuGO5w9e1ZVVVXGKuklJSU6fvy4JGnq1KkuAWN6\nejoBNAAAGEkIHQEAAIaj+vp6YzRkQUGBcnNzdfz4cXl5eWn27NmyWq0uYSRTaoe3pqYmVVZWGqMY\nS0tLVV1dLal3wHjDDTfQ8xMAAIx0hI4AAAAjxaFDh5Sfn6+CggLl5eWpoKBAjY2NxuIhsbGxiouL\nY0TcMFFXV6fi4mKVlJToiy++kCTNnDlTycnJSkpKMoLG8ePHm1wpAACA2xE6AgAAjGT79+83ekPm\n5eWpsLBQZ86cMbssSJo+fboRLjofjGAEAACjBKEjAAAAhhebzaZly5bpqaeeMrsUAAAADMyLnmZX\nAAAAAAAAAODKQugIAAAAAAAAwK0IHQEAAAAAAAC4FaEjAAAAAAAAALcidAQAAAAAAADgVoSOAAAA\nAAAAANyK0BEAAAAAAACAWxE6AgAAAAAAAHArQkcAAAAAAAAAbkXoCAAAAAAAAMCtCB0BAAAAAAAA\nuBWhIwAAAAAAAAC3InQEAAAAAAAA4FaEjgAAAAAAAADcitARAAAAAAAAgFsROgIAAAAAAABwK0JH\nAAAAAAAAAG5F6AgAAAAAAADArQgdAQAAAAAAALgVoSMAAAAAAAAAtyJ0BAAAAAAAAOBWhI4AAAAA\nAAAA3IrQEQAAAAAAAIBbEToCAAAAAAAAcCtCRwAAAAAAAABuRegIAAAAAAAAwK0IHQEAAAAAAAC4\nFaEjAAAAAAAAALcidAQAAAAAAADgVoSOAAAAAAAAANyK0BEAAAAAAACAWxE6AgAAAAAAAHAri9kF\nAAAAYPRqampSZ2eny7auri61tbWpsbHRZfvYsWPl6+t7OcsDAADAAHk4HA6H2UUAAABgdHrkkUf0\n/PPP92nfrVu3KiMjY4grAgAAgBu8yPRqAAAAmObOO+/s036TJk3SwoULh7gaAAAAuAuhIwAAAEyT\nnJyskJCQS+7j4+OjtWvXysvL6/IUBQAAgEEjdAQAAICp7r77bnl7e3/l8+3t7X0eEQkAAIDhgdAR\nAAAAprrzzjvV0dHxlc/PmDFDycnJl7EiAAAADBahIwAAAEwVGRkpq9UqDw+PXs95e3tr3bp1F30O\nAAAAwxehIwAAAEx39913X7RnY0dHh1avXm1CRQAAABgMQkcAAACY7o477lBXV1ev7dHR0YqJiTGh\nIgAAAAwGoSMAAABMN2PGDM2dO1eenv/489Tb21v33HOPiVUBAABgoAgdAQAAMCzcddddLr0bOzs7\ntWrVKhMrAgAAwEAROgIAAGBYWL16tRE6enp6KjU1VSEhIeYWBQAAgAEhdAQAAMCwMGHCBH3jG9+Q\nl5eXPD09ddddd5ldEgAAAAaI0BEAAADDxtq1a9XV1SWHw6GVK1eaXQ4AAAAGyGJ2AQAAADDXY489\nptraWrPLkHShj6Onp6cmTZqk73//+2aXY7j99tt1xx13mF0GAADAiEHoCAAAMMp99PFfVX+yTVdd\nE2V2KZKkseOuVrfvFBXsbze7FElSfdUORUREEDoCAAD0A6EjAAAAFGJbpqTb/o/ZZUiSDld8puDQ\nZHn7BphdiiTpg2fnm10CAADAiEPoCAAAgGFlWtRCs0sAAADAILGQDAAAAAAAAAC3InQEAAAAAAAA\n4FaEjgAAAAAAAADcitARAAAAAAAAgFsROgIAAAAAAABwK0JHAAAAAAAAAG5F6AgAAAAAAADArQgd\nAQAAAAAAALgVoSMAAAAAAAAAtyJ0BAAAAAAAAOBWhI4AAAAAAAAA3IrQEQAAAAAAAIBbEToCAAAA\nAAAAcCuL2QUAAABg5Dlo/4ty//SkmhoOuWz3soyR37gpujoiXfG3PKrAiTMHfMyxgZM1LfJG3bju\n1YvuX/rZayre+qLOnTkmeXho3ORQ3bD6OU2LXGDs89dX7tTRfbvUcb5F44Jna/7ajZoyK3UA/2MA\nAAD0B6EjAAAA+i3UtlyhtuX6/ZNJamtp0N3PHZTD0a225lM6XLFdWe8+or+XfqqV/3e3xvhPGNAx\nv/NM5SX3ty78nqwLv6fN35+o4JkJuu2xT3vts+SBd3WkJluFHz+npQ+9P6D/KwAAAPqP6dUAAABw\nCw8PT40NnKSwlFWKXrBerU0ndbjyc7PLAgAAgAkIHQEAAOB2QZNDJUnnzh43uRIAAACYgenVAAAA\ncLuzxw9IkiZOt7psd3R3ae9H/5+qc95VW/NJjZs8W7abH9GsxBVmlAkAAIAhQugIAAAAt2lvPaND\nRR+rfOdmzbDepKvD01yez/3zv6t8x29043df07Tr5qt463/ps/93n4Imh2rStTaTqgYAAIC7EToC\nAABgUNpbz2rz9yf+Y4OHh5KW/URxi3/gsl9Xx3lV7NyikDm3KtS2XJJku+VRlfztZVXvfofQEQAA\n4ApCT0cAAAAMis/YIN37UoPufalBcRk/kBwO+YwNkqeXt8t+Z47XqLO9VVddE2Vss3j7amxQsE4f\nq77cZQMAAGAIMdIRAAAAbhN/y6Oqyf2d8j74D82Mu0X+V00znus4f06SlP+Xp5X/l6ddfs5v3JRB\nva7D0f3Vz3V39QpAAQAAMLQIHQEAAOA23r4BSvmnJ/X5W99X9nuP6aYH3jGe8w2YJEmau/JpWRfe\nP6DjH923SyfrimRd9ICxbYz/VTp35uhX/kxTwyEF9Ag/AQAAMPSYXg0AAAC3Ck9dreCQRNWV/lUH\n9v6PsT3gqmny8h6jhi9KBnzsk3VFsvj4uWy7JmKeWk4f0bEDub1/wOFQ9e53NTkkccCvCQAAgP4j\ndAQAAIB7eXjo+m8/I3l4aPfv/03nz52WJHl5j1HE3O9of/6fVL5zizramuTo7lLL6XqdO3Pskofs\n7upQa9MJHanJkmWMa+iYtPyn8hk7Tn/b/F3VFn2ozvZz6uo8r1OHS/XZ/7tPju5OhaesGrL/LgAA\nAHpjejUAAAD67diBXO1860GdPXlQkvTOT2I0M+4Wpd3xnCRpckiCIlLvUHXOu/rdzxI056aHNOem\nH+r6lU/LZ2ygirduVM4ffiIfv/G6Oux6JS77sY7X5iv3T08ax3RZEbuH8LlrXP49bkqYVvx4h4r+\n+rz2/PH/avuZI/L08FTApJkKjb9N89a+KE+LzxD+NgAAAPBlHg6Hw2F2EQAAADBPjDVOPtMzlHTb\n/zG7lGHpg2fn6961/6Snn37663cGAACAJL3I9GoAAAAAAAAAbkXoCAAAAAAAAMCtCB0BAAAAAAAA\nuBWhIwAAAAAAAAC3InQEAAAAAAAA4FaEjgAAAAAAAADcitARAAAAAAAAgFsROgIAAAAAAABwK0JH\nAAAAAAAAAG5F6AgAAAAAAADArQgdAQAAAAAAALgVoSMAAAAAAAAAtyJ0BAAAAAAAAOBWhI4AAAAA\nAAAA3IrQEQAAAAAAAIBbEToCAAAAAAAAcCtCRwAAAAAAAABuZTG7AAAAAJiv1v6/OnN8v9llDEtn\nTv7d7BIAAABGHEJHAACAUW7pLUtUW1trdhmGiooKjRs3Ttdcc43ZpUiSEmffpNjYWLPLAAAAGFE8\nHA6Hw+wiAAAAACebzaZly5bpqaeeMrsUAAAADMyL9HQEAAAAAAAA4FaEjgAAAAAAAADcitARAAAA\nAAAAgFsROgIAAAAAAABwK0JHAAAAAAAAAG5F6AgAAAAAAADArQgdAQAAAAAAALgVoSMAAAAAAAAA\ntyJ0BAAAAAAAAOBWhI4AAAAAAAAA3IrQEQAAAAAAAIBbEToCAAAAAAAAcCtCRwAAAAAAAABuRegI\nAAAAAAAAwK0IHQEAAAAAAAC4FaEjAAAAAAAAALcidAQAAAAAAADgVoSOAAAAAAAAANyK0BEAAAAA\nAACAWxE6AgAAAAAAAHArQkcAAAAAAAAAbkXoCAAAAAAAAMCtCB0BAAAAAAAAuBWhIwAAAAAAAAC3\nInQEAAAAAAAA4FaEjgAAAAAAAADcitARAAAAAAAAgFsROgIAAAAAAABwK0JHAAAAAAAAAG5F6AgA\nAAAAAADArQgdAQAAAAAAALgVoSMAAAAAAAAAt7KYXQAAAABGr08//VS1tbUu2xoaGlRYWKhNmza5\nbJ8/f74iIyMvY3UAAAAYKEJHAAAAmKa8vFw/+tGPZLFY5OHhIUlyOBw6evSotm7dKknq7u5WV1eX\nqqqqzCwVAAAA/eDhcDgcZhcBAACA0enIkSOaPn26uru7v3IfDw8PxcXFyW63X8bKAAAAMAgv0tMR\nAAAAprn66quVnp4uLy+vr9zHYrHonnvuuYxVAQAAYLAIHQEAAGCqu+6665LPd3Z2atWqVZepGgAA\nALgDoSMAAABMtXLlSnl6XvzPUk9PT6Wnp2vatGmXuSoAAAAMBqEjAAAATDV+/HjdfPPNslh6r3Ho\n4eGhu+++24SqAAAAMBiEjgAAADDdd77zHXV1dfXa7uHhoRUrVphQEQAAAAaD0BEAAACmW758uXx9\nfV22eXl5acmSJZo4caJJVQEAAGCgCB0BAABgOj8/P61YsULe3t7GNofDobVr15pYFQAAAAaK0BEA\nAADDwpo1a9TR0WH828fHR8uXLzexIgAAAAwUoSMAAACGhSVLluiqq66SJHl7e2vFihXy9/c3uSoA\nAAAMBKEjAAAAhgWLxaLVq1fLYrGoo6NDa9asMbskAAAADBChIwAAAIaNO++8U52dnQoKCtJNN91k\ndjkAAAAYIIvZBQAAAGDg9u/fr4KCAuXn5ysvL0+FhYU6c+aM2WUN2tmzZzVmzBizyxiU6dOnKykp\nyeXBStzor5MnTyozM1Off/65duzYoZKSEnV3d5td1ojm5+enuXPnasGCBVqwYIFSU1Pl6+trdlm4\nQrS3t6u8vFxFRUXGw26369SpU2aXhn4ICQmRzWbTnDlzjEdoaKg8PDzMLm1E8XA4HA6ziwAAAMDX\nO3TokPLz81VQUKC8vDwVFBSosbFRFotF4eHhio2NVVxcnNEXcaR6//33FRsbq7CwMLNLGZS6ujoV\nFxerpKREX3zxhSRp5syZSk5ONkLIxMREjR8/3uRKMZwcPXpUO3fu1M6dO7Vjxw6Vl5fLw8NDUVFR\nSk1NVVxcnMsq7+i/M2fOKD8/Xzk5Oaqvr5evr69SUlK0YMECzZ8/XzfccIP8/PzMLhMjwMmTJ2W3\n210CxoqKCnV0dMjHx0eRkZGKjIxUVFSUgoODzS4XfdTd3a3a2lpVVFSovLxcdXV16u7uVlBQkGJj\nY40w0mazyWq1auzYsWaXPFy9SOgIAAAwDNXX16ugoMB45Obm6vjx4/Ly8tLs2bNltVpltVoVGxt7\nxf3BW1dXp+nTp8vT88rpBNTU1KTKykqVlJSotLRUpaWlqq6uliRNnTrVCCATExN1ww03MCJyFDl6\n9KgyMzOVlZWlrKwsFRYWytPTU7Nnz1ZSUpLS0tJ0ww03jPgvE4arY8eOKT8/X9nZ2crPz1d1dbUs\nFovi4uKUnp6u9PR0ZWRk8PtHr/tyWVmZamtr5XA4NG7cOOPLP6vVqoiICF133XXy8fExu2y4QUdH\nhw4ePGjcw0tKSlRRUaGWlhZJve/jMTExmjVrlslVDwuEjgAAAGY7ffq0SktLlZ2draysLBUUFOjI\nkSOSpClTpriEi8nJyRo3bpzJFcMdzp49q6qqKuXn5ys/P18lJSU6fvy4pN4fYNLT0wk9rhD19fXK\nzs7Wtm3blJmZqYqKClksFkVHRysxMVFJSUlKT0/nPDfJiRMnlJuba4wqLykpkaenpyIiIjRv3jxl\nZGRo0aJFfDFwBWtqalJ1dbXKysqM9iVFRUVqaWmRxWLRtGnTFBYW5hIwXnvttWaXDRMcO3bMCCJr\namqMhzOItlqtRggZHR2tpKSk0dbKgdARAADgcjpz5oxKSkqMkRL5+fmqqKiQ1DtgTExMJGgaZXp+\ngCkpKVFxcbFOnDghLy8vRUREuASRCQkJTAEdAQ4cOKCsrCxlZ2fr008/VW1trSwWi6KiopSenq7E\nxESlpqYqMDDQ7FJxEQ0NDSosLFRBQYGysrJUVlam7u5uhYaGavHixcrIyNDChQs1adIks0vFADhH\nL5aXl6usrEz5+fmqqqpSd3e3AgMDFRkZqfDwcJeQ8UqaWQD3c85scAaQzvt5W1ub0Q7HarUaXzSl\npKRoypQpZpc9VAgdAQAAhsrZs2dVXFzsEjBWVlbK4XD0ChgTEhI0YcIEs0vGMPTlINJut6uhoeGi\nQWRiYiIfiE3WM2T85JNPVFdXp7FjxyomJkbJyclKS0sbjaNdrhjNzc2y2+3GdGy73a6Ojg4jhExL\nS9ONN97IyLdhpqOjQ9XV1S5To53XUsn1S7/w8HDjwaIhcIfOzk4dOHDACCKd9/Rjx45JujC7oWcQ\nmZiYqMjISHl5eZlc+aAROgIAALhDU1OTioqK+hQwxsfHMzUPg/LlILKwsFCnTp0yRlH0DCIJuIbW\ngQMHtG3bNmVlZWn79u06fPiw/Pz8lJCQYCwYlJKSQm+3K1RLS4sKCwuNELKoqEjt7e0KDQ01ekLe\ndNNNCgkJMbvUUaOxsdGYGu0MGMvKynT+/Hl5e3srNDTU6IscERGhmJgYZhXAFGfOnFF1dbXLFO2q\nqiq1t7fLx8fH6O3rnKI9Av9+JHQEAADoL+dIl54Bo3M61pcDxjlz5mjy5Mlml4xR4MtBZEFBgU6f\nPi1vb2+FhYW5BJHJyckaM2aM2SWPOF1dXaqsrDR6Mm7fvl0NDQ3y9/dXfHy8ETKmpqaywvQode7c\nOe3du9foCblnzx61t7dr6tSpRk/ItLQ0xcTEmF3qiNfZ2amqqiqXqdEFBQU6evSopAujF50jFp33\n5dmzZ18Jo8dwBXOOiiwpKdG+fftUXV3tMiq3Z89nZ6/I6Ojo4Toql9ARAADgUnpOyXIu9FJVVaWu\nrq5eq1XGxsYqIiLC7JIBgzOILCgoUF5ensrLy3Xu3Dl5e3srPDzcZVo2o/F66+rqkt1uN6ZLb9u2\nTY2NjQoICJDNZjOmSsfHx8tisZhdLoah1tZWlZaWGitk5+Xl6fz580YImZaWpvT0dCUkJAzX0GBY\ncPZD7hkwFhYWqrW1VRaLRbNmzXIJGG02G302cUVx3s979orct2+furu7FRQUZIzedU7RHiZ9nwkd\nAQAAnL7c88m5qnB7e7uCgoIUERHhEjDS7wkjTVdXl/bv32+MiHQ+Wltb5e/vrzlz5riMiIyKipKn\np6fZZV82nZ2dKioqMqZLZ2Zm6syZM5o0aZLxu0lPT1dMTMyo+r3AfTo7O1VRUaGsrCzl5+crNzdX\nTU1NCg4O1oIFCwgh9Y/FXZwLvJSWlhrtSnp+2ecMGePi4hi5jVGppaVFBw4cUHV1tXE/Lysr07lz\n52SxWDRjxgzFxMQY9/SYmBjNmjXrcpZI6AgAAEYn57SsngHj3r171dbWpoCAAEVGRhIwYlToOZXL\n+aGluLhY58+fV2BgoGJjY6/YILKjo0PFxcXatm2btm7dql27dqm1tVXBwcFKTk42pqJbrVbOfwwJ\nZwiZl5dnrJDtDLrnzp2r9PR0ZWRkKD4+/oo575za29tVU1Nj3IcLCgpUVFSk5uZmeXl5afr06S6r\nRkdERLBAD9AHX263sm/fPtXV1cnhcGj8+PG9gkir1TpUwT2hIwAAuPJdLGB0Tsvy9/dXdHS0MS0l\nNjZWYWFhV9yHO6A/LhZEOhfICAoKUmxsrMvU7GHcT8qFs99edna2tm7dquzsbLW1tWnKlClKSkoy\npkvzJQPM0tXVpfLyciOEzM7O1unTpxUYGKjU1FSjJ+RI6xtaX19vTI3+ci/kgIAAhYaGuvRejImJ\nGQ5TQ4ErxtmzZ1VVVWWEkDU1NcYXjD17Pzv7RKampio4OHiwL0voCAAArizOhR56Box2u93oYxcZ\nGamkpCQCRqCfLhZE2u12dXR0XDSIHA4LZTQ3NysnJ0dZWVnG4/z58y4hY3p6OqOnMGx1d3dr3759\nRk/I3bt369SpUwoICFBqaqqxQva8efOGxRTjnm1KnFOjc3NzdeLECUkyFluLiIgwRjFyHwbM4byv\nO/tElpSUqLi42Dhfp06d6tIncgCzHQgdAQDAyNaz91NWVpZycnLU0tIib29vhYaGuoxgtNlsI2pk\nCDDcOT+wOPuflpSUaP/+/eru7u41hSs9PX3Ie0k1NTVpz5492rZtmzIzM5WXl6eOjg7NnDlTiYmJ\nSkpK0oIFCzRt2rQhrQMYSnV1dUZPyJycHNXX18vPz0/x8fHGdOz09HT5+voOaR2NjY3GyMWCggKV\nlZWpvLxcbW1tve7BERERio6O1oQJE4a0JgCDd+zYMdXU1Lj0ity/f7+6uroUGBio8PBwl/u7zWZT\nQEDAxQ5F6AgAAEamyspKpaSkqKmpST4+PoqKipLValVcXJzi4uIUHh7OarKACVpaWlRWVqbi4mIV\nFxertLRUBw8elMPhkM1mU2Fh4ZC87pNPPqmnnnpKkhQREaG5c+cqJSVFqampmjhx4pC8JjAc7Nu3\nT7m5udqzZ4/27Nmjo0ePauzYsfrrX/+qefPmDclrWq1WlZWVSbowGioyMlJRUVGKjo5WVFSUQkND\n5eXlNSSvDeDya21tVVVVlcrLy1VRUaHKykpVVFSoublZnp6e+tGPfqTnnnvuyz/2In+JAwCAEamt\nrU1NTU36zW9+o4ULFxIwAsOEv7+/UlJSlJKSYmxramrS888/r08++WTIXrehoUHR0dF66623dNVV\nVw3Z6wDDTVhYmMLCwrRmzRpJUlVVlZYsWaKmpqYhe80TJ07oX/7lX/T973+f0YvAKDB27FjZbDbZ\nbDZjm8PhUF1dnR566CE1NjZe9OdonAAAAEa0sLAwAkdgmAsMDLwsU5oDAgIIHDHqTZ8+/bK8zowZ\nMwgcgVHMw8NDM2fOvOR9l9ARAADAZFlZWXr22WddtnV3d2vLli361re+ddGfefHFF5WRkaGYmBiF\nh4drwYIF+s///E+1tLT02vfPf/6zbrvtNsXExOiGG27Qo48+ajQJH6ivq0+S8vLydPvttysyMlLJ\nycl65pln1N7e3u/9tm7dqldeeUVdXV2Dqrm9vV2/+MUvlJSUpMjISH3nO99RQkKCQkJC9Pbbbw/q\n2H31yiuvaNGiRbruuusUFRWlRYsW6Ve/+pWam5td9uvP+4uR4bbbbtOsWbN0yy23DMnxB3IdkTj/\nOP9Gr1tvvVUhISEKCQlRcnKyfvGLX3ztzxw8eFC33XaboqOjFRoaqrvvvntArz1U5+tAcD8fGK4n\nfUPoCAAAYKLnn39eb7zxhh588EFj28GDB7Vq1Sr9x3/8h1pbWy/6c7t27dI999yj7Oxs2e12PfbY\nY9qyZYs2bNjgst///u//6uGHH9bSpUuVk5OjzZs3Kzc3V/fcc486OzsHVHNf6quurtZdd92ltLQ0\n7d27V6+99pp+//vf66c//Wm/91u8eLHGjBmjNWvW6OzZswOqWZJ+85vfaMeOHdq+fbt+9rOf6Tvf\n+Y7+9Kc/Dfh4A5GXl6c777xTu3fvVn5+vv71X/9Vr7zyih544AGX/fr6/mLk+OCDD3T99dcPybEH\neh3h/OP8G80+/PBDzZs3Tx4eHvroo4/05JNPujzf1dWlO++802VbaGioPvjgAz322GP6p3/6J735\n5pv9ft2hPF/7i/v5wHE96RtCRwAAAJO88sor+uCDD/TSSy/J399fklRRUaFnn31Wa9euVXR09Ff+\nrL+/v9asWaPx48fL399fy5Yt080336zPP/9cR44cMfZ7++23NWXKFH3ve99TYGCgoqOjde+996q8\nvFx2u73fNfe1vo0bN2ry5Mn60Y9+JD8/PyUkJOj+++/Xf//3f2v//v393u+f//mfFR0drXXr1g04\nLP30008VFxenoKAgrVmzRkuXLh3Qcfqqra2t18gRb29v3X333ZowYYL8/f116623asmSJcrMzNTx\n48eN/fr6/mLk8fDwcOvxBnMd4fzj/BvtbrvtNjkcDv3tb3/r9dzu3bu1e/du1dTU9Hrus88+07Jl\ny/r9epfjfO0r7ud9x/Vk4AgdAQAATFBbW6tf/epXeuSRRzRmzBhje1RUlF599VV985vflI+Pz1f+\n/Ouvv95rZVBnT52eoxWOHDmi4OBgl6Dj6quvliQdPny433X3pb7Ozk599tlnSk1NdXndG2+8UQ6H\nQ59++mm/9nP64Q9/qPLycr3++nyAYIQAACAASURBVOv9rlu68Lu4nP0/f/e736mhocFl22uvveby\nfkvSlClTJMllqlVf31+MPN7e3m471mCuI5x/F3D+jW4333yzvL29tW3btl7PZWZmasqUKfroo49c\ntre1tamiokILFizo12tdzvO1L7if9x3Xk4EjdAQAADDBG2+8IYfDoYyMDLcd8+jRo/L19dWMGTOM\nbTNmzNDJkydd9nP2c7z22mvd9to9/f3vf1dLS0uvhUNmzpwpSaqsrOzXfk7jxo1TamqqXn/9dTkc\njj7Xk5mZqQULFuj48eP64x//qJCQkEuO6nA4HNq8ebO+8Y1vKDw8XHFxcVq/fn2vkSS5ubnKyMiQ\n1WpVRESElixZop07d0qS/v3f/11PPfWUDh06pJCQkEt+OK2trVVQUNDXLv5wsfcXI09tba0WLVqk\nqKgoXXfddfr2t7+tvLw8l30+//xzxcTE6Ne//vUljzWY6wjn3wWcf6NbYGCgFixYoKysLLW1tRnb\nnSPwli5dqo8//tjlZ7KzszV//nzjC4TheL66C/dzrieDRegIAABggu3bt2vWrFkaO3asW47X2tqq\nXbt26c4773QZSfXggw/qxIkTeuONN9TS0qLq6mq9/vrrmj9/vuLj493y2l/mDDWdU8ecxowZI19f\nXyME7et+PcXExOjo0aOqqKjocz3z5s3T559/rkmTJun2229XbW2tysvLv3L/F154Qc8++6wefPBB\n7d27V7///e915MgRffvb33ap6eTJk1q2bJmys7OVm5srPz8/Pfzww5Kkn/3sZ8rIyNDMmTNVW1ur\nzz//3OU1Ojs7dfToUf32t79VVlaWfvGLX1xyBNxXvb8YecaNG6c333xTJSUl+stf/qKOjg6tXbtW\nBw8eNPZxLrLQ3d19yWMN5jrC+cf5hwuWL1+utrY2ZWVlGdsyMzOVnp6upUuXqrKy0uX8/Oyzz7R8\n+XLj38P1fHUH7udcTwaL0BEAAOAyO3funP7+978bIwDc4aWXXlJwcLAeffRRl+2pqal64IEH9POf\n/1wxMTG66aab1NLS0mvVTHc6f/68JPWaTiRJFovFGE3S1/16Cg0NlTR0ozra2tq0efNm3XzzzVqx\nYoUCAwMVGRmpp59+WqdOndI777xj7Lt06VL98Ic/1Lhx4zR+/HgtXrxYjY2NOnXq1Ne+zty5czV3\n7ly98MIL+vGPf+zyAfZivur9xcjj7++v6dOny2KxKCIiQs8884zOnz+vd99919hn0aJFKisr00MP\nPfSVxxnsdYTzj/MPF2RkZMjX19dlivWuXbt0/fXXKykpSVOmTNGHH35oPGe325Wenm78e7ier+7A\n/ZzryWAROgIAAFxmDQ0Ncjgc8vX1dcvxPvnkE3344Yd66623eo0y+OUvf6l33nlH77zzjsrLy5WZ\nmanExER961vfGrIG5s4eRxdrEN/R0WH8v/u6X0/OESJDNaqjurpaLS0tiouLc9k+Z84ceXt7X3Lx\nHWd/Keeol0vJycnR3r17tXHjRv3xj3/U0qVLe/WLcrrU+4uRLzIyUoGBgf0a7SMN/jrC+cf5hwv8\n/f21aNEi/e1vf5PD4VB7e7ssFossFos8PDx0yy23GH0da2pqFBMT0+9+gmacr+7A/ZzryWBdvs6b\nAAAAkPSPEQFfbkA+EH/5y1+0efNmvffee0YDc6fjx4/r1Vdf1YYNG3TDDTdIkvz8/PTMM88oLi5O\nr732mn7+858PuoYvmzx5siSpubnZZXtra6vOnz+v4ODgfu3Xk/N35vwdutvZs2cl9Z4iJklBQUEu\ntW7fvl2vvfaaampq1NTU1K9VOC0WiyZMmKB58+Zp+vTpWrhwoV566SX97Gc/c9nvUu8vrhze3t79\nXsV1sNcRzj/OP/zD8uXL9dFHH6m4uFhHjx516du3dOlSvfHGGzp06NCAV60243x1B+7nX4/ryaUx\n0hEAAOAyc37j35dv0C/ljTfe0Pvvv6933nnnon/A1tbWqqurq9dzAQEBGj9+vKqrqwf1+l9lxowZ\n8vf377U69qFDhyRdGNnVn/166ujokKQhG9URFBQkqfcHJ+nCBxjnyt/19fW67777NHnyZP3P//yP\nSktL9W//9m8Des2QkBB5eXn1ej++7v3FlaGzs1OnT5/WNddc06+fG+x1hPPvAs4/SBemSPv7+2vr\n1q3as2ePUlJSjOeSkpIUHBxshJLXX399v49vxvnqDtzP+4frSW+EjgAAAJfZxIkT5eHhoaampgH9\nvMPh0DPPPKOqqipt2rTpK6foTJ06VdKFEY89tbS06PTp08Yf3O5msVi0cOFC7dmzx6Wx/meffSYP\nDw8tXry4X/v15PydTZo0aUhqv+666+Tv76/i4mKX7Xa7XR0dHYqNjZV0oQdVZ2en7r77bl177bUa\nM2aMPDw8LnnsxsbGi/b8cobDzvejr+8vrgy7d+9Wd3e3rFZrv35usNcRzr8LOP8gXRh1t3jxYn30\n0Ufy9fWVp+c/ohJPT0/dfPPN+tOf/qRJkyb1e2q1ZM756g7czy+O60nfEToCAABcZmPHjtW11147\n4J6KNTU1evXVV/Xuu+8qLCxMISEhLo9NmzZJujDy4Prrr9e7776r3NxctbW16ciRI/rxj38sSVq9\nerVxzAcffFCJiYkqLS0d/H9Q0kMPPaSTJ0/q+eef17lz57R3715t2rRJK1eu1KxZs/q9n5Pzd+Yc\nNeHuuseMGaP169frk08+0fvvv6/m5mZVVlbqpz/9qYKDg7VmzRpJMkalZWVl6fz58zp48GCv/lDj\nx4/XsWPH9MUXX6ilpUU+Pj7KzMzUrl271NzcrM7OTpWVlemRRx6Rn5+f7r33Xkl9f38xMnV0dBjT\n90pLS/Xzn/9c06ZN07e//W1jnx07digmJka//vWvv/I4g72OSJx/nH/oafny5Tpw4IC+8Y1v9Hru\n1ltvVU1NjZYsWdLrueF2vnI/v4DryfBA6AgAAGCCRYsWqbq6uteKjoWFhVq5cqVSUlJkt9tVUVGh\n5ORk3X777crNzZV04ZvzvvDw8NDLL7+s5cuX6/HHH1dcXJwyMjJUX1+vV1991WX6WEdHhxoaGrR1\n69ZLHrMv9UlSRESE3nrrLe3cuVM2m03333+/Vq1apaefftrleH3dz6m4uFhTp041PqT0pe7Dhw/r\n1ltv1cmTJ/XnP/9Zy5Yt08cff6zNmzdr5cqVkqSnn35a999/vyTp4Ycf1uOPP66NGzfKZrNp9erV\nmj59un73u9/Jz89P0oUPSQ888IDefPNNJScn67nnntPcuXMlSStXrtSRI0e0du1aTZw4URkZGVq3\nbp1aW1uVlJSkJ554QqmpqYqOjtaGDRs0ffp0vf/++7ruuusk9f39xcizYsUKTZ48WTfeeKMiIyN1\n1113KSYmRn/4wx8UEBDQ7+MN5joicf5x/qGnBQsWKCoqSgkJCb2eS05OVlRUlFJTUwd8/Mt1vnI/\n53oynHg4+C0AAIARyG63Kz4+Xp999plCQ0PNLqffamtrlZGRoV/+8pdasWKF2eWou7tbd9xxh1au\nXKlVq1aZXc5FNTY2au7cuXr00Ue1fv16SSOjblywZcsWbdmypVfPL3d58MEHVVBQoPfee29Ijj8c\n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\nli1bpkmTJikzM1OJiYmaMWMGhSMAq0HpCAAAAKBOcHd316xZs/Tjjz8qNjZW7du318yZM807X+/b\nt69S1ykoKFCfPn106NChu5zY+k2ePFnFxcU3fd3JyUmjR4+uxkTW7/Lly7r//vt15syZSr8nJSVF\nTzzxhFq0aKGpU6fK3d1d69at07FjxxQZGal77rnnLiYGgKqhdAQAAABQp9jY2Cg0NFRr1qxRVlaW\n5s6dq7i4OHXr1s08+/HKlSs3ff+nn36qvXv3ql+/ftqxY0c1Jrc+ISEhaty48Q1fs7e317hx4+Ts\n7FzNqazX4cOH1bNnT61fv14ff/zxLc89c+aMFi5cqO7duyswMFCJiYl6+eWXdeLECa1Zs0YRERGy\ns7OrpuQAcPsoHQEAAADUWR4eHpozZ851sx9btWqlJ554QhkZGde95z//+Y/q1aunvLw8DRkypE4/\nr9DW1lYPP/zwDZdYl5SUaPLkyQaksk5bt25VYGCgsrKyJEmLFy++7hyTyaS4uDiNHz9eXl5emjdv\nnvr376/k5GRlZGRozpw5atasWXVHB4AqYSMZAAAAAPiV7Oxsffjhh1q8eLGOHTumoKAgzZo1S/ff\nf7/2798vf39/87k2NjaSpMjISL300ktGRTbU9u3bNWDAgOuON2rUSOfPn2c2nqTPPvtMU6dOVVlZ\nmUwmk/l4UlKS+vfvr4MHD2rFihVasWKFzp8/b94UZsqUKXJxcTEwOQBUGbtXAwAAAMCNmEwmbdiw\nQUuWLNGGDRvUrFkzdevWTd9//71KSkoqnGtjY6OZM2dqwYIFqlevbi0oKy8vl5eXl06ePGk+Zm9v\nryeeeEJvv/22gcmMV15ernnz5um1114z//c19vb2CgkJ0cWLF7Vjxw55e3tr+vTpmj59ury8vIyK\nDACWQukIAAAAAL/nxIkTWrRokRYuXKiioqIbnmNra6t7771Xn376aZ17juFf//pX/etf/6pQxm7b\ntu2GMyDriqKiIj366KP67LPPbrpbtYODgx544AHNmDFDQ4cOrXOFNYBabSF/ogEAAADA7/D09JS3\nt/d1Mxx/zWQy6ZtvvtGgQYN0/vz5akxnvClTplT4blq2bKn+/fsbmMhYZ86cUVBQkP773//etHCU\npNLSUo0aNUrBwcEUjgBqHf5UAwAAAIBKWLRo0S0LJOmXEiktLU2BgYHKzMyspmTG8/HxUefOnSX9\nMntv+vTp5udd1jXp6ekKCAhQenq6SktLf/f8pUuXVkMqAKh+lI4AAAAA8Dt2796t9PR0lZWV/e65\nJSUlOn36tPr06aNt27ZVQzrrMG3aNNnY2Ki4uFgTJ040Oo4hvvvuO/Xv31/nzp275azYa8rKyrR9\n+3b99NNP1ZAOAKoX24gBAAAAwO+4NhvN1ta2wjLY8vJylZeXV9iRWPplxuOlS5c0bNgwzZ49W4GB\ngdWa1wgNGzZUeXm5PDw8dPDgQR08eNDoSNXqm2++0YcffnjT2bDXfndsbGzMs0DLy8tVXFysDz74\nQPPnz6/OuABw17GRDAAAAAD8jsTERGVnZ6ugoEBXrlzRq6++prNns42OhRqke/fu6tevnxwdHeXi\n4iJbW1u5ublJkjp27KgHH3zQ4IQAYFHsXg0AAAAAt8vXr7sc2oQqcMz/VOr88jKTbOrZ3uVUxsv4\n/j15+obKrZm30VGsyvqowXpsyn3MZgRQlyxkeTUAAAAA3GV1oXCUpC5B02Rr72h0DACAFWAjGQAA\nAACARVA4AgCuoXQEAAAAAAAAYFGUjgAAAAAAAAAsitIRAAAAAAAAgEVROgIAAAAAAACwKEpHAAAA\nAAAAABZF6QgAAAAAAADAoigdAQAAAAAAAFgUpSMAAAAAAAAAi6J0BAAAAAAAAGBRlI4AAAAAAAAA\nLIrSEQAAAAAAAIBFUToCAAAAAAAAsCg7owMAAAAAQG13NDVau758RZd/Pi5Jcm7QTK27DNXQ6Ytv\n+p4TGbFKeP9xDZu+WF7dRlZX1Jv67We4kfqNPTXxtdRqTHVr1vYdAkBdQukIAAAAAHeZt3+EvP0j\ntOaVQBUV/KyHIw/+/pvKy+9+sNvw288w7V9HJUnlZSaZTCUqKcrX1wsiDE75G1b2HQJAXULpCAAA\nAABWyNNvuB759zGjY/wum3q2sqtnKzt7JzVsfo9hOUpLivTNwvs15oVvzcdqyncIALURz3QEAAAA\nAFhE2BMfG3bvzKSPVXT5gmH3BwBUxExHAAAAALAyZw7v0KYPZqgg95QGjI+Sz5DHtH/Lcu1a+4pU\nXq5hf1imA1s/0NkjO+Xg1EB9HnhV9wSONb+/vMykPd/8U5k7Vqso/4IaNrtH/iOfV/uAB365/k/b\nlbj6eRVczFZZabHcmrdX3wf/rjZdg5UW+5b2fB0lm3q2Gv/qHqXFLtTh5C9176x1atiiQ6Xyb/98\nrg5sXSFHl0bmpeRJn72kzB2rVFp8RVOiMuVUv8ltfSZJ+mnXGu3btFi5pw/Kpl49OdVvqs4Dpuhq\nQY72b/1AZaXFWvZME7k19dbgaf+57jv85cspV3rCuzq07UPl/XxcdvbOatlxgHrf/4oategoSbed\nCwBwPWY6AgAAAICV8binX4VlwpLkM/iP8gt+SqUlRbJ3rK+QPy7XhFdT1KBpO239ZLbKTCXmc3et\n+7vSYt9Wv3Hz9fA/Dsir2wht+mCGLmT9ssnLlcvn1T7gAU18LVWT/zdD9o6u2vTBE5Kk7mHPyi/k\naZVcLdAP3/0/NWjSVs29A1Wumz8f8fShrUqP+4/5v/s/FKn2ve6vcM6ACf9UwL1zq/yZ9m1arO9X\nPiXvnmM0+X8zNGn+PvmPeE6Xzv6kfuP+V239RsitqbceW/Szxr+afMPvUJJSvonS7vWvyX/k85oS\neUjhz8eoIPeUYv7fvbpy+fxt5wIA3BilIwAAAADUMC3a95G9UwM51W+q9gEPqLS4UPm5JyVJppKr\nOrBludr1uFfe/hFycG4o/1EvqJ6tvTK3r5Ikefcco16jX5KjSyM5urqrbbdRulqQo6L8isuTe9/3\ninyGPKbQx1eaZwFKUvGVPC17pon555u3KhaMlv5MZaYS7fn6n2rZaaB6DJ8tR1d3Obo0UucBU9S0\nbc9K36O0pEj74t+Rd49wdegzXg7ObmrcykdBk/6fivJ/1sHElbeVCwBwcyyvBgAAAIAazNbOQZJU\nZiqVJF0696NKi6/IvVVX8zl29k5ydmuui2czb3iNera//NWwvKysUvd0cHYz714tSdk/btOF43ur\nlP9GfvuZck7tV/GVS2rTNbjCeTb1bOU37IlKX/di9kGVXC1Q07b+FY43a9tT9ewcdO5Yym3lAgDc\nHKUjAAAAANQiJVcLJUnJ0fOVHD2/wmsuDVtIkk7s26i0uP8oN/ugiosu3/Fy4ZYdg9SyY9AdXeNW\nSoouS5IcXRre0XWuFl6SJNk7ul73mqOzm0qK8u/o+gCA/0PpCAAAAABW4MxPSbqQ9YP8gp+6o+s4\n1W8qSeo3br78hj153ev5OScVu3Sa2vmHa/CUt+TSsKUyNi/VrrXz7ui+d5NLQw9JUlF+zh1d51pp\neaNy8eqVPLm6t7qj6wMA/g/PdAQAAAAAK3Ah6wfZObjc8XXqu7eWrb2jfj6ZfsPXc0/vV5mpRD6D\n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\n9enTRy4uLkbHswpnzpxRamqqbG1tNWjQIIWHhys8PFwdOnQwOhqqgclkUkZGhnbu3Gn+OXDggEwm\nkzw8POTr6ysnJyejY962vXv3qnnz5mrdurXRUW5bbm6u0tLSlJ+fLxcXF/Xq1Ut9+/Y1/3h5eRkd\nEQBqkoWUjgAAALCIgoICJSQkKCYmRuvXr9eZM2fk6empQYMGKTg4WIMHD5aDg4PRMa3KxYsXtW3b\nNsXHxysuLk55eXny9vZWRESEIiIi+M5qkdOnTyslJUUpKSlKTk5WUlKScnNz5eLiIl9fX/n5+cnP\nz0/dunVTp06djI5bZVu3blWvXr3k6upqdJQqy8rK0u7du7Vv3z7t27dPqampKikpUYsWLdS7d28F\nBAQoICBAQUFBaty4sdFxAcBaUToCAACg6o4cOaK4uDhFR0dr48aNMplM8vHxUUhIiEJCQtStWzej\nI9YYJpNJe/bsUUJCgrZt26a0tDS5urpq2LBhioiI0JgxY+Th4WF0TFRCQUGB9u7day4ZExMTdfTo\nUUlS27ZtFRAQYC4Y/f39ZW9vb3Bi3EphYaEyMjKUnp5uLiIzMzMlSd7e3ho4cKC5iOzTpw//UAAA\nv6B0BAAAQOWZTCZt375dMTExio2N1Z49e+Ti4qL+/fsrJCREYWFhatasmdExa4WsrCwlJiYqPj5e\nW7ZsUVlZmXr06GGeBRkQEGB0ROiXMXHw4MEKsxiTk5NVXFysFi1amMtFPz8/BQYGqlGjRkZHhgWc\nO3dOaWlp2rdvn9LT05WcnKxLly7J3t5e3bp1q1BE+vr6Gh0XAIxA6QgAAIBby8nJUXx8vKKjoxUT\nE6Pc3Fy1bdtWwcHBCgkJUd++fZmpdZcVFhYqKSlJCQkJio+P19mzZ9W2bVuNGDFC4eHhGj58uBwd\nHY2OWSfUlWXSuD0mk0mHDx+uMBvy2rJsDw8PBQYGsiwbQF1D6QgAAIDrHTlyRNHR0YqOjjbPsuvZ\ns6dCQkIUGhqqjh07Gh2xziorK1NGRobi4+OVkJCg9PR0OTs7Kzg4WBEREQoPD1erVq2Mjlkr/HaZ\ndHJysg4cOCCJZdL4fSzLBlDHUToCAABAKi0t1Y4dOxQTE6O1a9cqMzNT7u7uGjBggIKDgxUWFiY3\nNzejY+IGTp06pc2bN2vbtm3atGmTCgsL5ePjYy4gg4KCZGNjY3RMq8cyaVSHmy3LdnV1VY8ePSrM\n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\n7Vv/trxbPlJQOjqYzGrRbbzior/Vr3u/VG5WmpIuHFXU6hfkUrmmmnYaedPzmF2r6GpK/P89LCW9\nyPsz3oxrVS9J0vnj25WXm62US6euuZ/g0e0L5eruKZ/WAZKkDv1eV5Vavvpx8diCB8hIUjWvFury\n5FwlXzimbz/1129HtignM1X5eblKu3xGx6O+0I7lEwvuGXkjt3qNrqYkKHL187py8YTyLTm6/NtB\npSWdU/V67YvcVySrVZbcLMVFfyNThUq3eTVv/bO53e+B1Zqv7KtXlJ9vUdL5I/rp61dVsaqXGvkF\nXXPspp1GKc+SrbOH/6N7WvS67fcAAMDfYWe1/t+dhQEAAAAUMnXqVH362SINfGPfzQf/n/PHtylm\n13IlnolWxpULssqqStXuUYP2g9SqZ4gcHM3/G2y16tDWWToetVRpl3+Tyewqz0Yd1WHAFFWu0UCS\nlJ70m7bMC9bl3w7K3t5RVes0U6vek1SvdV9d/u2gtswLVlba7/K4p7VqNvTTkR/nypKTqUrV7lHn\nEZ/r4sk9+u/305WTmSrnStXlN+hd2dk76KevXlFm2u8yu7jrwcc/UoN2A7Vvwzs6HvWFrPn5qtO0\nizwbdtSuL1+Sm0c9mSpU1OXzh2V2cVevp1epRr0O2r3mdR35ca6s1nw5ObvJf+J6edzzv5l5Gcnn\ndXjbPJ0/GqG0y2dkyc2SyVxRlTy85VG3pRo/MEw169+ng1tmaH/4NFlys+RapY469Hu94Onat3qN\nflw8RlcSYpWTlSbnStXV+IGhatfnZWVcuXDDfWcObdbetVOUmni6yM+0Te/n1a7vqzq6Y6H2rpsi\nS06mKteor97jv9L5mB3as/ZN5WalqWLVunrkX2tVuUb9az6b6j5tdWzHojt+j5IUuep5xf60Qs6V\nPJSZ+rscnJxV27eT/Ab+W5U8fK6bfd0HD8urWVd16PfGLX+H/yrl0kl99fZ9OnDggFq3bn3zFwAA\n8IdQSkcAAADgBu6kdASKS+Sq53X6wAY98eGvt/ya/8x+XA8OmaZK1bzv6JyUjgCAOxTK8moAAAAA\nuEtY8/OK3P/XZdxJ54/IwWS+48IRAIC/g9IRAAAAAMqIvevfVsqlU0q5dFI7lk1Q+4BXjY4EACin\nKB0BAAAAoJTbt/Hfit29UjmZqQp7s41OH9h43XGOTs76+p37tWnGo2rbZ7LcPX1LOCkAAH8o+nFx\n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\nWQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "afca_9ZgMq5B"
      },
      "cell_type": "markdown",
      "source": [
        "上から下へ向かって，データやパラメータがどのような`Function`に渡されて計算が行われ，ロスを表す`Variable`が出力されたかが分かります．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VKGpB55MMq5B"
      },
      "cell_type": "markdown",
      "source": [
        "### テストデータで評価する\n",
        "\n",
        "上でもValidationデータに対しての評価を学習中に行うために使用されているTrainer Extensionの一つであるEvaluatorは，Trainerと関係なく独立して使うこともできます．以下のようにして`Iterator`とネットワークのオブジェクト（`net`），使用するデバイスIDを渡してEvaluatorオブジェクトを作成し，これを関数として実行するだけです．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "0VPMBv5uMq5C",
        "outputId": "c5611773-8e9c-40e6-93a4-476b71dfa336",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "test_evaluator = extensions.Evaluator(test_iter, net, device=gpu_id)\n",
        "results = test_evaluator()\n",
        "print('Test accuracy:', results['main/accuracy'])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test accuracy: 0.92494065\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "S3wF6tp-Mq5F"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みモデルで推論する\n",
        "\n",
        "それでは，Trainer Extensionのsnapshotが自動的に保存したネットワークのスナップショットから学習済みパラメータを読み込んで，学習ループを書いて学習したときと同様に1番目のテストデータで推論を行ってみましょう．\n",
        "\n",
        "ここで注意すべきは，snapshotが保存するnpzファイルはTrainer全体のスナップショットであるため，extensionの内部のパラメータなども一緒に保存されています．これは，学習自体を再開するために必要だからです．しかし，今回はネットワークのパラメータだけを読み込めば良いので，`serializers.load_npz()`のpath引数にネットワーク部分までのパス（`updater/model:main/predictor/`）を指定しています．こうすることで，ネットワークのオブジェクトにパラメータだけを読み込むことができます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "c75UL_8XMq5H",
        "outputId": "bf1a94ab-3291-43b9-a606-004b6972b262",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "infer_net = MLP()\n",
        "serializers.load_npz(\n",
        "    'results/mnist_result/snapshot_epoch-10',\n",
        "    infer_net, path='updater/model:main/predictor/')\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    infer_net.to_gpu(gpu_id)\n",
        "\n",
        "x, t = test[0]\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "x = infer_net.xp.asarray(x[None, ...])\n",
        "with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "    y = infer_net(x)\n",
        "y = to_cpu(y.array)\n",
        "\n",
        "print('予測ラベル:', y.argmax(axis=1)[0])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nupSB/wclp6FycBcGXAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f9893f96908>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "予測ラベル: 7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "z0KB6IURMq5J"
      },
      "cell_type": "markdown",
      "source": [
        "無事正解できていますね．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "aNGmM0_eMq5K"
      },
      "cell_type": "markdown",
      "source": [
        "## 新しいネットワークを書いてみよう\n",
        "\n",
        "ここでは，MNISTデータセットではなくCIFAR10という32x32サイズの小さなカラー画像に10クラスのいずれかのラベルがついたデータセットを用いて，いろいろなモデルを自分で書いて試行錯誤する流れを体験してみます．\n",
        "\n",
        "| airplane | automobile | bird | cat | deer | dog | frog | horse | ship | truck |\n",
        "|:--------:|:----------:|:----:|:---:|:----:|:---:|:----:|:-----:|:----:|:-----:|\n",
        "| ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck4.png) |"
      ]
    },
    {
      "metadata": {
        "id": "DMuv4lbQRBIC",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### ネットワークの定義\n",
        "\n",
        "ここでは，さきほど試した全結合層だけからなるネットワークではなく，畳込み層を持つネットワークを定義してみます．3つの畳み込み層を持ち，2つの全結合層がそのあとに続いています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "iabj0L8sMq5L",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class MyNet(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, n_out):\n",
        "        super(MyNet, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.conv1 = L.Convolution2D(None, 32, 3, 3, 1)\n",
        "            self.conv2 = L.Convolution2D(32, 64, 3, 3, 1)\n",
        "            self.conv3 = L.Convolution2D(64, 128, 3, 3, 1)\n",
        "            self.fc4 = L.Linear(None, 1000)\n",
        "            self.fc5 = L.Linear(1000, n_out)\n",
        "        \n",
        "    def forward(self, x):\n",
        "        h = F.relu(self.conv1(x))\n",
        "        h = F.relu(self.conv2(h))\n",
        "        h = F.relu(self.conv3(h))\n",
        "        h = F.relu(self.fc4(h))\n",
        "        h = self.fc5(h)\n",
        "        return h"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kExP3QgLMq5O"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習\n",
        "\n",
        "ここで，あとから別のネットワークも簡単に同じ設定で訓練できるよう，`train`関数を作っておきます．これは，\n",
        "\n",
        "- ネットワークのオブジェクト\n",
        "- バッチサイズ\n",
        "- 使用するGPU ID\n",
        "- 学習を終了するエポック数\n",
        "- データセットオブジェクト\n",
        "- 学習率の初期値\n",
        "- 学習率減衰のタイミング\n",
        "\n",
        "などを渡すと，内部で`Trainer`を用いて渡されたデータセットを使ってネットワークを訓練し，学習が終了した状態のネットワークを返してくれる関数です．`Trainer.run()`が終了した後に，テストデータセットを使って評価まで行ってくれます．先程のMNISTでの例と違い，最適化手法にはMomentumSGDを用い，ExponentialShiftというExtentionを使って，指定したタイミングごとに学習率を減衰させるようにしてみます．\n",
        "\n",
        "また，ここでは`cifar.get_cifar10()`が返す学習用データセットのうち9割のデータを`train`，残りの1割を`valid`として使うようにしています．\n",
        "\n",
        "この`train`関数を用いて，上で定義した`MyModel`モデルを訓練してみます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "NEvyuq1TMq5O",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import cifar\n",
        "\n",
        "\n",
        "def train(network_object, batchsize=128, gpu_id=0, max_epoch=20, train_dataset=None, valid_dataset=None, test_dataset=None, postfix='', base_lr=0.01, lr_decay=None, snapshot=None):\n",
        "\n",
        "    # 1. Dataset\n",
        "    if train_dataset is None and valid_dataset is None and test_dataset is None:\n",
        "        train_val, test = cifar.get_cifar10()\n",
        "        train_size = int(len(train_val) * 0.9)\n",
        "        train, valid = split_dataset_random(train_val, train_size, seed=0)\n",
        "    else:\n",
        "        train, valid, test = train_dataset, valid_dataset, test_dataset\n",
        "\n",
        "    # 2. Iterator\n",
        "    train_iter = iterators.MultiprocessIterator(train, batchsize)\n",
        "    valid_iter = iterators.MultiprocessIterator(valid, batchsize, False, False)\n",
        "\n",
        "    # 3. Model\n",
        "    net = L.Classifier(network_object)\n",
        "\n",
        "    # 4. Optimizer\n",
        "    optimizer = optimizers.MomentumSGD(lr=base_lr).setup(net)\n",
        "    optimizer.add_hook(chainer.optimizer.WeightDecay(0.0005))\n",
        "\n",
        "    # 5. Updater\n",
        "    updater = training.StandardUpdater(train_iter, optimizer, device=gpu_id)\n",
        "\n",
        "    # 6. Trainer\n",
        "    trainer = training.Trainer(updater, (max_epoch, 'epoch'), out='results/{}_cifar10_{}result'.format(network_object.__class__.__name__, postfix))\n",
        "    \n",
        "    # 7. Trainer extensions\n",
        "    trainer.extend(extensions.LogReport())\n",
        "    trainer.extend(extensions.observe_lr())\n",
        "    trainer.extend(extensions.snapshot(filename='snapshot_epoch_{.updater.epoch}'), trigger=(10, 'epoch'))\n",
        "    trainer.extend(extensions.Evaluator(valid_iter, net, device=gpu_id), name='val')\n",
        "    trainer.extend(extensions.PrintReport(['epoch', 'main/loss', 'main/accuracy', 'val/main/loss', 'val/main/accuracy', 'elapsed_time', 'lr']))\n",
        "    trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], x_key='epoch', file_name='loss.png'))\n",
        "    trainer.extend(extensions.PlotReport(['main/accuracy', 'val/main/accuracy'], x_key='epoch', file_name='accuracy.png'))\n",
        "    if lr_decay is not None:\n",
        "        trainer.extend(extensions.ExponentialShift('lr', 0.1), trigger=lr_decay)\n",
        "    if snapshot is not None:\n",
        "        chainer.serializers.load_npz(snapshot, trainer)\n",
        "    trainer.run()\n",
        "    del trainer\n",
        "    \n",
        "    # 8. Evaluation\n",
        "    test_iter = iterators.MultiprocessIterator(test, batchsize, False, False)\n",
        "    test_evaluator = extensions.Evaluator(test_iter, net, device=gpu_id)\n",
        "    results = test_evaluator()\n",
        "    print('Test accuracy:', results['main/accuracy'])\n",
        "    \n",
        "    return net"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kURPNSFjMq5S",
        "outputId": "2917ebf3-49ee-4140-8b56-250e36ea47d5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        }
      },
      "cell_type": "code",
      "source": [
        "net = train(MyNet(10), gpu_id=0)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz...\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           1.92606     0.30522        1.72449        0.39707            10.8502       0.01        \n",
            "\u001b[J2           1.60883     0.423584       1.5284         0.462695           20.8037       0.01        \n",
            "\u001b[J3           1.4723      0.469217       1.49049        0.475391           30.5365       0.01        \n",
            "\u001b[J4           1.39285     0.5002         1.39494        0.504102           40.31         0.01        \n",
            "\u001b[J5           1.32884     0.525329       1.37887        0.508398           50.102        0.01        \n",
            "\u001b[J6           1.26799     0.547341       1.35357        0.520508           59.8385       0.01        \n",
            "\u001b[J7           1.21398     0.56782        1.2513         0.566211           69.5161       0.01        \n",
            "\u001b[J8           1.16487     0.583785       1.23549        0.566406           79.2389       0.01        \n",
            "\u001b[J9           1.12206     0.600941       1.24091        0.561523           89.1767       0.01        \n",
            "\u001b[J10          1.07095     0.619747       1.21103        0.573047           99.1846       0.01        \n",
            "\u001b[J11          1.02866     0.637673       1.17802        0.584961           109.298       0.01        \n",
            "\u001b[J12          0.980287    0.653468       1.19598        0.575977           119.079       0.01        \n",
            "\u001b[J13          0.937631    0.66899        1.15998        0.594336           128.96        0.01        \n",
            "\u001b[J14          0.898637    0.682225       1.21704        0.577539           138.685       0.01        \n",
            "\u001b[J15          0.854152    0.696911       1.18729        0.589258           148.52        0.01        \n",
            "\u001b[J16          0.809953    0.713408       1.188          0.590039           158.228       0.01        \n",
            "\u001b[J17          0.764426    0.732178       1.20444        0.588086           168.014       0.01        \n",
            "\u001b[J18          0.721836    0.744252       1.2061         0.59707            177.938       0.01        \n",
            "\u001b[J19          0.665882    0.766181       1.22442        0.600586           187.712       0.01        \n",
            "\u001b[J20          0.622433    0.782959       1.22606        0.605859           197.436       0.01        \n",
            "Test accuracy: 0.6062105\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "cXSoxEcvMq5W"
      },
      "cell_type": "markdown",
      "source": [
        "学習が20エポックまで終わりました．ロスと精度のプロットを見てみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "LsjyDJSPMq5Y",
        "outputId": "011006e3-c371-4965-a3bf-98a0aefd4f5e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/MyNet_cifar10_result/loss.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAeAAAAEGCAYAAAC9yUYKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3Xl8VPW9//HXLNn3bSY7CVsgIZCw\nb7LEAIqi1J3LUq9obYv1Vm0tWitUHqhUtNer3l7lp/ZWtFqVW3cW2VyABEIIJAgJYcm+L2QySSYz\nc35/BFJiAmFJMpmTz/Px4JHMOWfOfDJM5p3vd77n+9UoiqIghBBCiD6ldXQBQgghxEAkASyEEEI4\ngASwEEII4QASwEIIIYQDSAALIYQQDqDv6wesrGzo64cUQginFxLi4+gSRA+TFrAQQgjhABLAQggh\nhANIAAshhBAOIAEshBBCOIAEsBBCiH7rjTfeIDMz85LH/P73vyc/P5/bbrutj6rqGX0+CloIIYS4\nXD/72c+6PSY/Px83N7c+qKZnSQALIYToE5s2bWL//v3U1taSl5fHI488wueff05+fj7r16/nyy+/\n5PDhw7S0tLBo0SLuvPNOVq5cybx586itrSUjI4OamhpOnTrF8uXLufPOOyktLSUsLKzD46SlpfHn\nP/8ZvV6P0Wjkueeeo6qqit/+9rdotVpsNhsvvPACGo2m07aIiIg+ez4kgIUQYgB667Mcvs8q7tFz\nThsTwX0LEi55zOnTp3nvvff48MMPef311/nnP//Jpk2b+Pjjjxk6dChPPPEEzc3NpKamcuedd3a4\nb25uLu+//z6nT5/m0Ucf5c477yQtLY0JEyZ0OG7VqlW8/fbbhIWF8cwzz/DZZ59x9uxZpk6dyooV\nK8jJyaGyspLMzMxO2ySAu1BztpntGUUsmBaDu6vTlC2EEOICo0aNQqPREBISQlxcHDqdjuDgYFpb\nW6mvr+eee+7BxcWF2traTvdNSkpCp9MRGhpKQ0PbpE5paWksX768/Zi6ujo0Gk17q3jSpEns37+f\nu+66i4ceeoiGhgbmzZtHcnIynp6enbb1JadJsh/O1PJVWgEBPm6kjo9ydDlCCOHU7luQ0G1rtTfo\n9fouvy8qKqKgoIB33nkHFxeXLsPwwuPPy8/PZ+jQoRQVFQGg0Wi4cJn71tZWNBoNw4cP55NPPuH7\n77/npZde4vbbb2fhwoVdbusrThPACbGBaIADxyokgIUQQmWys7NJSUnBxcWF7du3Y7PZsFgsl7xP\ncXFxp89//fz80Gg0lJSUEB4eTnp6OuPGjeOLL74gKiqK1NRU/P392bx5My4uLp22SQB3wd/bjWFR\n/uQV1lHb0EKAj/ONeBNCCNG1qVOncubMGZYsWUJqaiqzZs1i9erVl7xPWloaEydO7LR9zZo1PPbY\nY+j1eqKiorjppps4fvw4q1atwtPTE51Ox1NPPUVzc3OnbX1Jo1zYVu8D17IYw/aMIt7dlsu/pQ6T\nVrAQYkCRxRjUx6km4hgXF9LeDS2EEEI4M6cK4PZu6KJ6ahtaHF2OEEIIcdWcKoABJowwoAAZx6UV\nLIQQwnk5XQBLN7QQQgg1cLoA9vd2Y1ikH3lF9dSZpBtaCCGEc3K6AAaYMNJ4rhu60tGlCCGEEFfF\nKQP4fDf0/h/KHV2KEEKIHpaSkkJjYyMAn3zyCX//+9+v6jyVlZU8/fTTlzymrKyMRx99lJUrV7Jz\n586repyr5ZQBLN3QQggxMFxsso3LERISwjPPPHPJY/bt29dpMYe+4jQzYf3Y+BEGcovqyTheyfXj\nIh1djhBCiG785Cc/4bXXXiM8PJzi4mJWrFiB0WjEbDbT3NzMH/7wB0aPHt3hPidPnmTIkCGkpqZy\n1113sXnzZgYNGkRCQkL79y+++CLHjh3jj3/8I3q9Hq1Wy8svv4zJZOLhhx9m06ZNzJkzh7vvvpud\nO3disVh4++238fb2Jj09neXLl5OVlQW0zR399NNPU1hYiMVi4eGHH2b69Om88cYbbNu2Da1Wy+zZ\ns/n5z3/e5bYr4bQBPC7OwN+/zmP/sQoJYCGEuELvHPqYfYUHe/Sck6PGsjTp9ovuT01NZefOnSxe\nvJjt27eTmprKiBEjSE1NZe/evWzYsIFXXnml/fiSkhJCQ0MBsNvtxMfH88ADDzBr1izmzp3LRx99\nxKxZszh79izV1dX84Q9/ID4+npdffpnPPvuM2bNnt5/LZrMxePBg7r//fh555BH27dtHampqe8Cf\n98UXX+Dq6srGjRspLy9n2bJlbNmyhbfeeovvvvsOnU7X3iXe1bYr4ZRd0AABPue6oQvrpBtaCCGc\nwNy5c9mxYwdAewBv2bKFRYsWsX79eurq6jocn56e3qF7ePTo0Wg0GoKCgoiPjwcgMDCQhoYGgoKC\neOmll1iyZAlffPFFp3MBjB8/HqB9OcMLA/687OxsJk2aBIDRaMTV1ZW6ujrmzZvHv//7v/OPf/yD\nW265BaDLbVfCaVvAIN3QQghxtZYm3X7J1mpvGDZsGBUVFZSWltLQ0MDXX3+N0WjkhRde4MiRI/zp\nT3/qcPyP1/rV6XRdfq8oCmvXruWBBx5gxowZvPnmm5jN5k6P/+P7pKWldfn574VLJFgsFrRaLX/8\n4x/Jz8/nq6++YunSpXz44YddbutqycSLuawWcG5uLqmpqWzcuLHTvnfffZe7776bRYsWsXbt2st+\n4J4wLs7QNhpaJuUQQginMGvWLP785z+TkpJCbW0t0dHRAHz99de0trZ2OPbEiRMMHTr0ss5bV1dH\ndHQ0FouF3bt3dzpXV9LT0zsN8EpMTCQtLQ2A0tJStFotGo2GV199lSFDhvDQQw/h5+dHeXl5p20m\nk+myaj2v26g2m82sWbOGKVOmdNpnMpl488032bp1K3q9nvvuu49Dhw6RlJR0RUVcrQAfN4Ze0A3t\n7y1LFAohRH82Z84c7rnnHj799FPMZjO/+93v2Lx5M4sXL+bzzz/n448/Brpe6/dSlixZwooVK4iK\nimLp0qU888wzzJ8//5L3ycvLY9iwYR223XTTTaSnp7N06VJaW1t55pln8PHxoba2ljvuuANPT0+S\nk5OJiIjotM3f3/+KnotulyO0Wq1YrVY2bNhAQEAAS5Ysad/X0tLCLbfcwocffoinpydLly7l2Wef\nJTY29qLnu5blCLvy9YFC3vs6j8Vzhks3tBBCtWQ5QvXptgtar9fj7u7e5T43NzdWrFhBamoqs2fP\nZsyYMZcM394g3dBCCCGc0TWNgjaZTLz++uts3ryZ7du3k5WVxbFjx3qqtsvy425oIYQQwhlcUwDn\n5+cTFRVFYGAgrq6ujB8/nuzs7J6q7bKNb1+iUOaGFkII4RyuKYAjIiLIz8+nubkZaLt+KiYmpifq\nuiLjz3VDyxKFQgghnEW3o6Czs7NZt24dxcXF6PV6tmzZQkpKCpGRkcyZM4fly5ezbNkydDodycnJ\n7Rc696Xz3dC5MhpaCCGEk+h2FHRP6+lR0OdtO1DI32U0tBBCpWQUtPo47VSUPzY+zgBIN7QQQgjn\noJoAPj83dG5hHfUyGloIIUQ/p5oAhn+Nhj4go6GFEEL0c+oKYOmGFkII4SScKoDtiv2S+y8cDS3d\n0EIIIfozpwng7KofeHT3HzhZf/qSx004PylHrnRDCyGE6L+cJoB9XX1otbfycd7nXOrKKemGFkII\n4QycJoCjfSNJNozm9NkCsiovPt3l+W7o4wXSDS2EEKL/cpoABrhl8Dy0Gi2fnPwKm9120eMmxEk3\ntBBCiP7NqQLY4BnC1PCJVJir2Fu6/6LHjYsLAaQbWgghRP/lVAEMMD8mFVetC1+e2kaLzdLlMYG+\n7m3d0DIaWgghRD/ldAHs5+ZLSvQM6i0N7Cz87qLHTYgzoCjSDS2EEKJ/croABkiNnomXiyfbzuzC\n1NrY5THSDS2EEKI/c8oA9tC7c2NMKs22Zrac3tHlMYG+7gyNONcN3dh1V7UQQgjhKE4ZwADTIyYT\n5B7AN0V7qG6q7fKYCSPauqEPHpdWsBBCiP7FaQPYRavn5sHzsCo2vji1tctjzndD75duaCGEEP2M\n0wYwwHhjEhHeYaSXHaTYVNppv3RDCyGE6K+cOoC1Gi0Lh8xHQeGT/K+6PGa8dEMLIYToh5w6gAFG\nBg5neMBQcqqPkVub32n/eOmGFkII0Q85fQBrNBoWDrkRgH/mf9lpoQbphhZCCNEfOX0AAwzyjWKs\nYTRnzhZyqIuFGqQbWgghRH+jigAGWHBuoYZPu1ioQbqhhRBC9DeXFcC5ubmkpqaycePGTvtKS0tZ\ntGgRd9xxB08//XSPF3i5DJ4hTAufRIW5ij0/WqhBuqGFEEL0N90GsNlsZs2aNUyZMqXL/c8//zz3\n3XcfH330ETqdjpKSkh4v8nLdeImFGibFG1EUeG9bbqfPiYUQQoi+1m0Au7q6smHDBgwGQ6d9drud\njIwMUlJSAFi1ahXh4eE9X+Vl8nPz4froGZy1NLCz8NsO+2YmhTMs0o/9xyr4+kCRgyoUQggh2nQb\nwHq9Hnd39y731dTU4OXlxXPPPceiRYt48cUXe7zAK3V99Ey8XbzYdmY3Jsu/FmrQ67T8/NZR+Hq5\n8o+dJ8grqnNglUIIIQa6axqEpSgK5eXlLFu2jI0bN3L06FF27drVQ6VdHQ+9OzfEXN+2UMOZjgs1\nBPi48YtbE1AU+Ms/s+XzYCGEEA5zTQEcEBBAeHg40dHR6HQ6pkyZQl5eXk/VdtXaFmoIPLdQQ02H\nfXHRAdw+azB1Jguvf5KNzW53UJVCCCEGsmsKYL1eT1RUFKdPnwYgJyeH2NjYnqjrmrho9Sw4t1DD\n510s1HDDxGiShwVzrKCO//vmlAMqFEIIMdBplG6GBGdnZ7Nu3TqKi4vR6/UYjUZSUlKIjIxkzpw5\nnDlzhpUrV6IoCsOHD2f16tVotRfP9crKhh7/IbpiV+ys2/9fFJtKWTnhP4j06Tg4zNxs5Zn/3U9F\nbRO/ui2R5OEhfVKXEEJcjZAQH0eXIHpYtwHc0/oqgAF+qM7l1az/R3xQHCvGLO+0v7DCxNq/HUCn\n0/L0veMxBnj2WW1CCHElJIDVRzUzYXVlROAw4gKGcrT6OLm1JzrtjzJ4s+yGOJparLy2KZuWVlsX\nZxFCCCF6nqoDWKPRcOv5hRpOfNXlBBxTR4UxKzmCokoT72w5LpN0CCGE6BOqDmBoW6hhnGEMZxoK\nyaw80uUxi64fRmyYD3uyy9id5biZvIQQQgwcqg9ggJvPLdTwWf5mmq3Nnfa76LX8cmEi3h4uvLct\nl1OlZx1QpRBCiIFkQASwwTOY6eGTqWiqYuV3a3g75z2yq37osGpSkJ87P1sQj82m8N//l42pqdWB\nFQshhFA7VY+CvpDF1sr2gt2klx2koqkKAG8XL8YZk5gYmswgnyg0Gg2ffneKf353ilGDA/n1nWPQ\najQOqVcIIS4ko6DVZ8AE8HmKolDQUER62UEOlB/C1No2X7TBI5jxocmMNyTx3hclHDlZzcLpsdwy\n3fETiwghhASw+gy4AL6QzW7jWG0e6WUHyarModXe1u0c7R1F6YkAGkqCeeS2CYwaHOTgSoUQA50E\nsPoM6AC+ULO1mazKHPaXZ3KsJg8FBUXRoGkI4c4xM5kaPQZXnaujyxRCDFASwOojAdyF+pazZJQf\nYvupdOpsFQC46VxJNozm1iE34usqvwhCiL4lAaw+EsCXoCgKr325l8M1h/EKr8CiMRHsEcRDY+4n\nxFO6pYUQfUcCWH0GxGVIV0uj0fDA3EmEWsZSv38aozwnUdVUzYsZr1HYUOzo8oQQQjgxCeBuuLno\nWHHbKDzc9GR9F8R1QXMwtTbynwf/h+M1neeXFkIIIS6HBPBlMAZ48sDNCdjsCtu+0jFKm4rVbuW1\nrDfJKM9ydHlCCCGckHwGfAVOlZ7lL//Mpqq+mZihLdQF78Fit3DHsFuYFTXN0eUJIVRMPgNWHwng\nK2RubuWtL49xMLcSn0AzLnEZNNkamTcohQWD56GRmbOEEL1AAlh9JICvgqIofH2giH/sPIHi0oj/\nmEM0cZYpYRNYFHcbOq3O0SUKIVRGAlh9JICvwcmSti7panM9folZWFxqSAweyX0Ji2XSDiFEj5IA\nVh8J4GvU2NzKW1/8QGZ+GZ4jslC8K4n1HcQvxvw7Xi6eji5PCKESEsDqIwHcAxRFYdv+Qj7cnYcu\n5jC6oFJCPQ08lHQ/Ae7+ji5PCKECEsDqIwHcg/KL6/nLJ0do8M9CH3oGP1dfHkq6n3DvUEeXJoRw\nchLA6nNZ1wHn5uaSmprKxo0bL3rMiy++yNKlS3usMGc0JMKP1f8+iXjX6bQWxFFvOcv6A//NyfrT\nji5NCCFEP9NtAJvNZtasWcOUKVMuesyJEyfYv39/jxbmrLw9XHj49tHcNnIO1lOjaba18OeM18mq\nzHF0aUIIIfqRbgPY1dWVDRs2YDAYLnrM888/zyOPPNKjhTkzjUbDDZOi+e0NC3ArmoTNBm8c/hvb\nT+2hj3v8hRBC9FP6bg/Q69HrL37Ypk2bmDhxIhERET1amBoMjfBjzV0LeGWzH4VeO9h06p98dvoL\nQr0NGD1DMHiGYPQIxuAVgsEjBHe9m6NLFkII0Ue6DeBLqaurY9OmTbz99tuUl5f3VE2q4u3hwu8W\npvDxviC2F+3E7tFAkb2sy9WU/N382kL53L/z3we6+6PVyLTdQgihJtcUwPv27aOmpobFixdjsVgo\nKCjg2Wef5cknn+yp+lRBq9Fw55QkplcPY+PWXH7IrsHFs4VJSV5ED9JQ3VxNubmSCnMVubUnyK3t\nuMqSXqvH4BGM0TOEGL9ohvkPJtI7XGbcEkIIJ3bZlyG98sorBAQEsGTJki73FxUV8cQTT/DOO+9c\n8jxqvgzpciiKQvoPFby/I496kwVDgAeL5wwncXAQAC02CxXmKirMFZSbK88Fc9vXFpul/TyuOlcG\n+w5iqH8sQ/xjifGNxlXn4qgfSwjRy+QyJPXpNoCzs7NZt24dxcXF6PV6jEYjKSkpREZGMmfOnPbj\nJICvTFOLlU++O8XXB4qwKwrj4kJYdP0wAn3duzxeURRqmuvIrz9Fft0pTtSfpqzxX93+Oo2OQb6R\nDPGLZah/LIP9YvB08eirH0cI0cskgNVHJuJwsMIKE+9sPc6JonrcXHTcMi2GOROi0Ou6/8zXZGkk\nv/4UJ+ra/hWZSrArdgA0aAj3Dm1rIZ8LZT83397+cYQQvUQCWH0kgPsBu6Kw50gZH+46QYO5lbAg\nT5bMjWPkoIArOk+ztZlT9QWcONdKPn22gFa7tX2/0TOERXG3MSxgSE//CEKIXiYBrD4SwP1IY3Mr\nm3afZFdmMQowOd7IXSlD8fe+usuTWu1WCs4WneuyPsWxmjy0Gg0PJt7LyKDhPVu8EKJXSQCrjwRw\nP3Sq9Cwbtx7nVGkDHm46Fk4fTMq4CHTaa7sUKaf6GG8c+RsoCvcnLiUxOL6HKhZC9DYJYPWRAO6n\n7HaFb7JK+Hh3Po3NVqIM3iydG8fQSL9rOu+xmjxeP/xXrIqN+xIWk2xI7KGKhRC9SQJYfSSA+7mz\nZgsf7cznuyOlAExJCOWOWUMI8Ln6WbNO1J3iv7PepNVuZdnIu5kQmtxT5QoheokEsPpIADuJvKI6\n3t2aS0GFCVcXLTdNiWHehChcXa5uMo5T9Wd4LetNmq0tLB5xB1PCJ/RwxUKIniQBrD4SwE7Eblf4\n7kgpm3bnc9bcSpCvO3enDGVcXAgajeaKz1fQUMSrmf+PRquZe+J+wnURF1/xSgjhWBLA6iMB7ITM\nzVY+33OabQcKsdkVhkf582+pw4g2XvkvaLGplFcyN9DQauL2YQtIibquFyoWQlwrCWD1kQB2YuU1\nZj7YcYJDJ6rQANeNCee2GYPx9XK9ovOUNVbwX5mvU29p4NbBNzI3ZnbvFCyEuGoSwOojAawCOadq\n+Pv2PEqqGvFw07Fgaiyp4yMvazat8yrMVfxX5hvUttQxPyaV+bFzrqpbWwjROySA1UcCWCVsdju7\nMkv457cnaWy2Ygzw4O7rhzFmSNBlB2l1Uy3/lfk6Vc01zImexa1DbpQQFqKfkABWHwlglTE1tfLJ\nt6fYmVmMXVFIiA3knuuHERHsdVn3r2up5+XM16kwVzE7cjq3D1sgISxEPyABrD4SwCpVXGni/e15\n5JyuRavRMHtsBLdOj8Xbo/slC+tbGnjl0BuUNpYzPWIydw9fiFZzbbNwCSGujQSw+kgAq5iiKGSd\nqOb9HXlU1Dbh5a5n/pRBpIyNxK2b64dNlkZeObSBIlMJk0PHs3jkHRLCQjiQBLD6SAAPAK1WO9sz\nivhsz2maWqz4erly0+RBzEoOx0V/8SA2t5p59dCbnGkoZLwxiWUj70anvbqJP4QQ10YCWH0kgAeQ\nxuZWtqQXsO1AES0WGwE+btw8ZRDXjQm/6IjpJmsz/531FifrT5MUMor5sXMI8QjCVXdllzoJIa6N\nBLD6SAAPQA1mC5vTCtieUYTFaifI150F02KYOiq0yyButrbw+uG/kluX374twM0fo2cIBs9gDOe+\nGj1DCHQPkK5qIXqBBLD6SAAPYPWNFr7ce4admcVYbXYM/h7cMj2GyfGhaLUdRz5bbK3sK91PcWMZ\nFeYqKsyV1LXUdzqnXqMj2CPoXDj/K6CNniF4u3ih0Wiw2q0021posba0fbW10GRt+9r8468XfN9q\nb2WQTyTxQSOI8Y2S7nAxoEgAq48EsKC2oYXP957mm0Ml2OwKYUGe3Do9lvEjDGgvcQlSi83SHsYV\n5irKzZVUNFVSYa6kydrc6XhXnSt2uw2rYrvmmj30HowIHEZ8YBzxQcPxd7u2ZRqF6O8kgNVHAli0\nq6pv4vM9p/nucBl2RSEyxItbpw9m7PDgK7oWWFEUTK2NbYF8PqCbqqhuqkGn1eGuc8Nd54ab3g13\nnTvuejfcOmxzw/3cV7cLvgcNJ+pOklNznKPVx6lprm1/zAjvsHNhHMdgv0HotfpeeIbEQNVis1De\nWEGzrQW7Ysem2LErtgu+t19yu91ux47CWMNoDJ7BV1WDBLD6SACLTipqzXz6/Wn25pShKDDI6MPC\n62IZfQWzavU2RVEoN1dy9FwY59WdxGq3AuCucyMuYCgjg+KID4wjyCPAwdX2Dy02Cy5avXxGfwk2\nu41ycyUljWWUmsooPve1qrmmR86fEnUdtw9bcFX3lQBWn8sK4NzcXH75y19y7733smTJkg779u3b\nx0svvYRWqyU2Npa1a9ei1V78F1wC2HmUVjfy6fenST9ajgIMDvfl5qkxjB4SdMmuaUew2Czk1Z0k\np/o4P1Qfp6Kpqn1fqKeB+KC21vFQ/8G4DLDWcW1zHV+c2sa+0gN4uXgy8ly3/cjA4fi4eju6PIew\nK3ZqmusoMZVS0lhOaWMZJaYyys2V2H70EYm3ixfh3mGEeRnxcvFEp9GiPfdPp9Fd8L32R9/r0Go0\n57bp0Gt0xPoNwlXX/WQ4XZEAVp9uA9hsNvPggw8SExNDXFxcpwCeO3cuf/vb3wgNDeXhhx/m9ttv\nZ+bMmRc9nwSw8ymqNPHJd6fIOF4JQESwFzdMimZSvPGKFnzoS5Xm6vbWcW7tCSz2VgDcde4kBMUx\nOiSBhKA4PPQeDq6095hbzWw9s4tdRd/Rardi8AimxdZCvaXtd1CDhiifiLY/TgLj+vXANovNQmVT\nNS22Fmz2C7t8bT/q/r14V7DVbqWqqbo9cFtslg6P4apzJdwrlHAvY3vgRniH9Zs/UiSA1afbALZa\nrVitVjZs2EBAQECnADaZTHh7t71AV69eTVJSEgsXLrzo+SSAnVdRpYmv9hWQ/kM5NrtCoK8bcydE\nM2NMGO6u/bdV2WprJb/+NDnVx8iqzKH6XHeiTqNjeMAQxoQkkBgcr5qBXK22VnYX72HL6R2YrU34\nu/lxc+xcJoWNQ4OGksYyjla3/XGSX3+6vcXnoXdnRMAw4oPiGBk4nAB3/z6tW1EUzloaKDdXUNZY\nSbm5gnJzJWWNFdS21PXY42g1WkI9DYR7hxLmFUrEua+B7v79unteAlh9Lvsz4FdeeaXLAD6voqKC\nxYsX849//IOAgIt/5iYB7Pyq65vZsr+Ab7JKsLTa8XLXM3tsJKnjI/H17N8TdCiKQkljGYcrc8iq\nyqGwobh9X4xvNGOCExgdkkCol+GaHqex1UyJqYzSc62t0sZyKpuqGeQbxTjDaEYFx+PWw5OZ2BU7\naWUH+eLkVmpb6vDQezBv0GxmRk67aLdns7WZ47X57b0FFw5sC/cKZWTQcBICRzDYP6bHuu5b7VYq\nz42ab/tXQfm5wG22tXQ63s/VF6OXAYNnMJ56j4t0+XbXFdz2faB7AAbPYKccpCcBrD49EsDV1dU8\n8MADPProo0yfPv2S55EAVg9TUys7Mor4OqMIU1MrLnot00eHMW9iNAZ/5+jarW6q5XBVDocrczhR\nfwq7YgfA6BnC6OAExoQkMMg36qItoyZrM2WN5ecG7ZRTeu77s5aOr3MNGrxdvGhoNQHgqnVhVPBI\nxhnGEB804qo/F4S2Pypyqo/xSf5XlDSWodfqmRU5jbmDZuPl4nlF56kwV3K0JvfcwLZ8Ws8NbHPV\nuTLcfzDert6cf8uwKwoK9n/dRkFRFJSLfLUrdqqba6hqqkGh49uOXqMjxDMYo6cB47nrxkO9DBg8\nQ/DQu1/1c6MmEsDqc80BbDKZWLZsGb/+9a+ZMWNGt+eRAFafllYb3x0uZUt6AVX1zWg0MGGEgfmT\nBxFtdJ43DVNrIzlVx8iqyuFo9XFaz31u7Ovqw+jgeOKDRtBkbWoP2VJTeZddo4HuAYR5GQn3CiXM\ny0iYt5FQTwOuOldKTGVkVGRxsDyrfaCYu86NxOAExhlHMzJw+BW1zk7Vn+Gf+V9you4UGjRMChvH\nzbFze6T72GJr5UTdyXOt41zKzRXXfE5vF6/2gDV6nQ9bA0HuAf328+f+QgJYfa45gJ966ikmTJjA\nrbfeelkPKAGsXja7nf0/VPDlvgKKKttaeqNiA7lxUjQjBgX0m0uYLofFZuFYTR5ZVTkcqTpKY6u5\n0zF+rj6EeYUS5v2vsA31Ml5pLwteAAAb60lEQVRWi01RFIpMJWSUZ3GwIovqc12/HnoPxoQkMN6Q\nxPCAIRcNpfLGCj49uYVDlUcASAweyS2DbyTcO/QafupLq285S6u9FQ0aQINWo0Gj0XS8zflttO/T\naLTnjtDgcg0t/YFOAlh9ug3g7Oxs1q1bR3FxMXq9HqPRSEpKCpGRkUyfPp0JEyaQnJzcfvzNN9/M\n3XfffdHzSQCrn6IoZJ+q4at9ZzhW0NZCjA3z4cZJgxg7PKTTNJf9nc1u42T9GXLr8vF19W4L3XOX\npPQERVE4fbaQgxVZHKw43D7Fp7eLF0khoxhnHMNQ/8FoNVrqW87y5alt7Cndj12xE+sbza1D5jMs\nYHCP1CL6Lwlg9ZGJOESvyi+p56t9BWTmVqIAAT5uzBwTznVjwgnwcXN0ef2OXbFzsv4MGeVZZFYe\npsHS1pPg6+rDMP/BHKk6isXeitEzhFuG3MiY4ASn6lkQV08CWH0kgEWfKK1uZNuBIvbmlNFisaHV\naEgaFsyspHDiYwP73cQe/YFdsZNXe5KMiiwOVRyh0WrGz9WH+bFzmBI2QT4zHWAkgNVHAlj0qaYW\nK2k/lLMrs5iC8rbWXYi/OzOTIpieGIavV/++jMlRbHYbxY2lGD0NPX75knAOEsDqIwEsHEJRFE6V\nNrDrUDHpR8uxWO3otBrGxYUwKymCuGh/6VoV4gISwOojASwcztzcyp7sMnYdKqGkqhGA0EBPZiVH\nMHVUKN4eMnJWCAlg9ZEAFv2GoijkFdWz61AxB45VYLUpuOi1TBhhYFZyBEPCfaVVLAYsCWD1kQAW\n/VKD2cL3R8rYdaiYitomACJDvJk3MapfLwIhRG+RAFYfCWDRr9kVhWNnatmVWUxmXhU2u0Kwnzvz\nJw9iWmIYLnoJYjEwSACrjwSwcBpV9U1sTivgm6xSrDY7AT5u3DAxmhlJ4bi5yCU5Qt0kgNVHAlg4\nnTpTC1vTC9mZWUxLqw0fTxfmTYxmdnIEHm7Ot8qNEJdDAlh9JICF02owW9h2oIjtGYU0tdjwcteT\nOj6K68dFyshpoToSwOojASycnrm5le0Hi9m2vxBTUyvurjpmj41g3oRomdhDqIYEsPpIAAvVaLZY\n2ZVZwpb0AuobLbjqtcxICueGidEE+sqassK5SQCrjwSwUJ1Wq41vD5fy1b4zVJ9tQa/TMC0xjBsn\nD8Lg7+Ho8oS4KhLA6iMBLFTLarOzN7uML/adoaK2Ca1GQ/KwYGYmhxMfIwtACOciAaw+EsBC9Wx2\nO/uPVfDVvgIKK9oWgAj2c2dmUjjTE8Pw85ZlEUX/JwGsPhLAYsDosADED+VYWtsWgEgaFszMJGkV\ni/5NAlh9JIDFgGRutrLvaBm7MksoqpRWsej/JIDVRwJYDGiKonCy9Cy7D5V0aBUnDwtmZlIEI2MC\npFUs+gUJYPWRABbinK5axSH+7swYE8700eH4yTXFwoEkgNVHAliIH2lvFWeeaxVb/9UqTh0fxbBI\nP1kWUfQ5CWD1kQAW4hLMza3szSln96FiiiobARgS7ssNk6JJHhaCVitBLPqGBLD6SAALcRkURSGv\nqJ7NaQUcOlEFgCHAg3kTo5k2KhRXWY1J9DIJYPXRrV69enV3B+Xm5nL33Xej1WoZPXp0h3179uzh\nkUce4eOPP6aiooKJEyde8lxms+WaChbCETQaDUF+7kyKNzJxpAGrzU5uYR2H8qrYnVVCq9VORIi3\nBLHoNV5eMjJfbbptAZvNZh588EFiYmKIi4tjyZIlHfbPnz+fN998E6PRyJIlS3jmmWcYOnToRc8n\nLWChFnWmFrZnFLHzYDHmFiuuLlquSwxn7sQoQmTKS9HDpAWsPtruDnB1dWXDhg0YDIZO+woLC/Hz\n8yMsLAytVsvMmTPZu3dvrxQqRH/j7+3G7TOH8MIvp3LP9cPw8XBh+8EiVr6+l//5JJvTZWcdXaIQ\noh/rdvVyvV6PXt/1YZWVlQQGBrbfDgwMpLCwsOeqE8IJeLjpmTshipSxEew/VsHmtALSf6gg/YcK\nRkT7c8OkQSQODpSR00KIDroNYCHE5dHrtExJCGVyvJGjp2vZnHaGnNO1HCuoIyLEixsmRjNxpBEX\nfbcdT0KIAeCaAthgMFBVVdV+u7y8vMuuaiEGEo1GQ0JsIAmxgRSUN7A5vYD0oxW8+cUPfLDjBNeN\nDmNmUjiGAE9HlyqEcKBr+lM8MjISk8lEUVERVquVnTt3Mm3atJ6qTQinF2304WcLEnj+55O5YWI0\nAF+lFbDy9X2sfz+TA8cqsNrsDq5SCOEI3Y6Czs7OZt26dRQXF6PX6zEajaSkpBAZGcmcOXPYv38/\n69evB2Du3LksX778kg8oo6DFQNZqtZFxvJJdmcXkFtUD4OflynVjwpgxJpxgPxk9Lbomo6DVRybi\nEMJBiqsa2X2omD1HyjC3WNEAowYHMSspnNFDg9Bp5bNi8S8SwOojASyEg7W02jhwrIJdh4rJL267\ndCnAx43rRre1igN93R1coegPJIDVRwJYiH6ksMLErkPF7M0uo9liQ6OBMUOCmZUczqjYIJl7egCT\nAFYfCWAh+qFmi5X0HyrYlVnM6bK235kgX3emJYYyNTEMg8y0NeBIAKuPBLAQ/dzpsrPsyiwh7Wg5\nLa02AIZF+jEtMYzxcQY83eVy/oFAAlh9JICFcBLNFisZxyvZk13GsTO1KICLXkvysGCmjgojITZA\nBm6pmASw+kgAC+GEquub2ZtTxvfZZZTXmIG2y5kmJxiZNiqMSIO3gysUPU0CWH0kgIVwYoqicLL0\nLHuyy0g/Wk5jsxWAaIM3UxPDmBxvxNfL1cFVip4gAaw+EsBCqESr1c7h/Cq+P1LGkZPV2OwKWo2G\nxMGBTEsMY8zQIFz0sl6xs5IAVh8JYCFU6KzZQtrRcvZkl3Hm3ChqTzc9UxNDSRkbSWigzEPtbCSA\n1UcCWAiVK640sSe7jD05ZdSbLAAkxAZy/dhIRg+Ra4udhQSw+kgACzFAWG12DuZWsuNgMbmFdQAE\n+7kzOzmC68aE4+3h4uAKxaVIAKuPBLAQA1BhhYkdB4vYm1OGpdWOi17LpJFGrh8XyaBQeaPvjySA\n1UcCWIgBzNzcyndHythxsIiK2iYAhkT4kjI2kvFxBlz0cl1xfyEBrD4SwEII7IpCzqkatmcUcSS/\nGgXw9XRhRlIEs5JkQYj+QAJYfSSAhRAdVNQ1setgMd8eLqGx2YpWoyF5eDDXj40kLtofjUYGbTmC\nBLD6SAALIbrU0moj7Wg5OzKKKKgwARAR7MXssRFMSQjFw03moO5LEsDqIwEshLgkRVE4UVzPjoPF\nHDhWgc2u4O6qY9qoMGaPjSA82MvRJQ4IEsDqIwEshLhs9aYWdmeVsPtQCbUNLQCMHBRAytgIkoYF\ny2IQvUgCWH0kgIUQV8xqs3Mor4odB4s4VtB2TXGAjxuzksKZkRSBn8w/3eMkgNVHAlgIcU2KqxrZ\nebCI77PLaLHY0Gk1jB9hIGVsBEMj/GTQVg+RAFYfCWAhRI9oarGyJ7vtmuLS6rYlEqMN3sweG8Hk\n+FDcXGUhiGshAaw+lxXAzz77LFlZWWg0Gp588klGjx7dvu/dd9/l008/RavVMmrUKH7/+99f8lwS\nwEKom6IoHCuoY8fBIjJzq7ArCp5ueqaPbhu0ZQyQhSCuhgSw+nR7HUF6ejpnzpzhgw8+ID8/nyef\nfJIPPvgAAJPJxJtvvsnWrVvR6/Xcd999HDp0iKSkpF4vXAjRP2k0GkYOCmDkoABqzjaz+1AJu7NK\n2Lq/kG37Cxk9JIjU8VHExwRI97QY0LoN4L1795KamgrAkCFDqK+vx2Qy4e3tjYuLCy4uLpjNZjw9\nPWlqasLPz6/XixZCOIdAX3d+MmMwC6bFcOBYBdszisjKryYrv5qwIE9Sx0cxNUG6p8XA1G0AV1VV\nkZCQ0H47MDCQyspKvL29cXNzY8WKFaSmpuLm5sZNN91EbGxsrxYshHA+ep2WyQmhTE4I5WTJWb7O\nKGT/DxW8s+U4H+/KZ8aYcFLGRhDs7+HoUoXoM1c8lc2FHxmbTCZef/11Nm/ejLe3Nz/96U85duwY\nI0aM6NEihRDqMTjcl5+FJ3DX7KHsyixmV2Yxm9ML2LK/gKShwcwZHyVTXooBodsANhgMVFVVtd+u\nqKggJCQEgPz8fKKioggMDARg/PjxZGdnSwALIbrl7+3GwusGc9OUGPYfK2fbgSIy86rIzKsiMsSL\n1PFRTI434uoi3dNCnbqdtmbatGls2bIFgJycHAwGA97e3gBERESQn59Pc3MzANnZ2cTExPRetUII\n1XHRa5k6KoynfzqeJ5eOY+JIAyVVZv761TEee+17PtqVT83ZZkeXKUSPu6zLkNavX8+BAwfQaDSs\nWrWKo0eP4uPjw5w5c3j//ffZtGkTOp2O5ORkHn/88UueSy5DEkJ0p+ZsM7sOFbMrswRTUytajYax\nw4O5flwkw6MGZve0XIakPjIRhxCi37K02kj7oZyvDxRReG5FprAgT2aOCWdqYhjeHi4OrrDvSACr\njwSwEKLfUxSFvKJ6dh0q5sCxSqw2O3qdlgkjQpiVPDCmvJQAVh8JYCGEUzE1tfL9kVJ2HSqhvKZt\nysuIYC9mJoUzdVQonu7qbBVLAKuPBLAQwimdn/Jy96FiMo5XYrMruOq1TBhpYFZSBIPDfVXVKpYA\nVh8JYCGE0zvbaDnXKi6msq5txHRkiDezk8OZnBCKh9sVT3nQ70gAq48EsBBCNeyKwg+na9l1qJhD\neVXY7ApuLjomxRuYmRRBbJivo0u8ahLA6iMBLIRQpTpTC98dLmX3oRKqz11HPCLan9tnDmFIhPPN\nWS8BrD4SwEIIVbPbFbJP1fB1RiHZJ2sASB4WzG0zBhMR4u3g6i6fBLD6SAALIQaM3MI6Ptqdz4mi\nejTAlFGhLJwe6xSLQEgAq48EsBBiQFEUhcP51Xy8+yRFlSZ0Wg2zkiO4eWoMfl6uji7voiSA1UcC\nWAgxINkVhfSj5fzftyeprGvGzUXHnAlR3DAxGk/3/jdqWgJYfSSAhRADmtVm59usEj79/jT1jRa8\n3PXcNCWGlLER/WolJglg9ZEAFkIIoMVi4+uMQr7cV0BTi5UAHzdunR7LtMRQdNpuF47rdRLA6iMB\nLIQQFzA1tfJV2hm+PlBEq9WOMdCT22YMZlxcCFoHzqwlAaw+EsBCCNGF2oYWPttzmm8OlWBXFAaF\n+nDzlBiShgU5pEUsAaw+EsBCCHEJ5TVm/u/bk6T/UAFAgI8bM8aEM2NMOAE+bn1WhwSw+kgACyHE\nZSiuamTnwSL2ZJfRbLGh1WhIHh7M7OQIRg4K6PWFHySA1UcCWAghrkCzxcq+o+XsPFhMYYUJgNBA\nT2YlRzAtMRSvXloOUQJYfSSAhRDiKiiKQn7JWXYeLGb/sXKstrblECeONDJ7bM8v/CABrD4SwEII\ncY0azBa+O1LKrsx/LYcYE+rD7OQIJsYbceuB64klgNVHAlgIIXqIXVE4eqqGHQeLycqvQlHA003P\ntMQwZiWHExbkddXnlgBWHwlgIYToBdX1zezOKuabrFLONloAWDxnONePi7yq80kAq89lBfCzzz5L\nVlYWGo2GJ598ktGjR7fvKy0t5dFHH6W1tZX4+HieeeaZS55LAlgIMZBYbXYO5laSdrScqaPCGBcX\nclXnkQBWn26vJk9PT+fMmTN88MEHrF27lrVr13bY//zzz3Pffffx0UcfodPpKCkp6bVihRDC2eh1\nbQOzfnX76KsOX6FO3Qbw3r17SU1NBWDIkCHU19djMrUNvbfb7WRkZJCSkgLAqlWrCA8P78VyhRBC\nCHXoNoCrqqoICAhovx0YGEhlZSUANTU1eHl58dxzz7Fo0SJefPHF3qtUCCGEUJErntD0wo+MFUWh\nvLycZcuWsXHjRo4ePcquXbt6sj4hhBBClboNYIPBQFVVVfvtiooKQkLaPscICAggPDyc6OhodDod\nU6ZMIS8vr/eqFUIIIVSi2wCeNm0aW7ZsASAnJweDwYC3tzcAer2eqKgoTp8+3b4/Nja296oVQggh\nVOKyLkNav349Bw4cQKPRsGrVKo4ePYqPjw9z5szhzJkzrFy5EkVRGD58OKtXr0Z7iaW65DIkIYS4\ncnIZkvrIRBxCCOEEJIDVp+9XlRZCCCFE37eAhRBCCCEtYCGEEMIhJICFEEIIB5AAFkIIIRxAAlgI\nIYRwAAlgIYQQwgEkgIUQQggHkAAWQgghHEDv6AIc5U9/+hMZGRlYrVYefPBB5s6d274vJSWF0NBQ\ndDod0DYVp9Fo7LPa0tLS+I//+A+GDRsGwPDhw/nDH/7Qvn/Pnj289NJL6HQ6ZsyYwYoVK/qsNoAP\nP/yQTz/9tP12dnY2mZmZ7bcTEhIYO3Zs++2//vWv7c9lb8vNzeWXv/wl9957L0uWLKG0tJTHH38c\nm81GSEgIL7zwAq6urh3u8+yzz5KVlYVGo+HJJ59k9OjRfVrfE088gdVqRa/X88ILL7QvdgLdvxZ6\nu76VK1eSk5ODv78/AMuXL2fWrFkd7uPI5+/hhx+mtrYWgLq6OpKSklizZk378Zs2beLll18mOjoa\ngKlTp/KLX/yi1+r78ftKYmJiv3r9iX5GGYD27t2r3H///YqiKEpNTY0yc+bMDvtnz56tmEwmB1TW\nZt++fcqvfvWri+6/8cYblZKSEsVmsymLFi1S8vLy+rC6jtLS0pTVq1d32DZx4kSH1NLY2KgsWbJE\neeqpp5R33nlHURRFWblypfLll18qiqIoL774ovLuu+92uE9aWprys5/9TFEURTlx4oRy11139Wl9\njz/+uPLFF18oiqIoGzduVNatW9fhPt29Fnq7vt/97nfKjh07LnofRz9/F1q5cqWSlZXVYdvHH3+s\nPP/8871W04W6el/pT68/0f8MyC7oCRMm8PLLLwPg6+tLU1MTNpvNwVVdnsLCQvz8/AgLC0Or1TJz\n5kz27t3rsHpee+01fvnLXzrs8S/k6urKhg0bMBgM7dvS0tK4/vrrAZg9e3an52rv3r2kpqYCMGTI\nEOrr6zGZTH1W36pVq5g3bx7QtrxnXV1drzz25eiqvu44+vk77+TJkzQ0NDi09djV+0p/ev2J/mdA\nBrBOp8PT0xOAjz76iBkzZnTqIl21ahWLFi1i/fr1KA6YrfPEiRP8/Oc/Z9GiRXz//fft2ysrKwkM\nDGy/HRgYSGVlZZ/XB3D48GHCwsI6dJkCWCwWHnvsMe655x7efvvtPqtHr9fj7u7eYVtTU1N7l19Q\nUFCn56qqqoqAgID22735fHZVn6enJzqdDpvNxnvvvceCBQs63e9ir4W+qA9g48aNLFu2jEceeYSa\nmpoO+xz9/J33t7/9jSVLlnS5Lz09neXLl/PTn/6Uo0eP9kpt0PX7Sn96/Yn+Z8B+Bgzw9ddf89FH\nH/HWW2912P7www9z3XXX4efnx4oVK9iyZQs33HBDn9UVExPDQw89xI033khhYSHLli1j69atnT47\ncrSPPvqIn/zkJ522P/7449xyyy1oNBqWLFnC+PHjSUxMdECFHV3OH1KO+GPLZrPx+OOPM3nyZKZM\nmdJhn6NfC7feeiv+/v6MHDmSN954g1dffZWnn376osc74vmzWCxkZGSwevXqTvvGjBlDYGAgs2bN\nIjMzk9/97nd89tlnvVrPhe8rF44t6a+vP+E4A7IFDPDtt9/yP//zP2zYsAEfn47LfC1cuJCgoCD0\nej0zZswgNze3T2szGo3Mnz8fjUZDdHQ0wcHBlJeXA2AwGKiqqmo/try8/Iq6DHtSWloaycnJnbYv\nWrQILy8vPD09mTx5cp8/fxfy9PSkubkZ6Pq5+vHzWVFR0alF39ueeOIJBg0axEMPPdRp36VeC31h\nypQpjBw5EmgbnPjj/8v+8Pzt37//ol3PQ4YMaR80lpycTE1NTa9+3PTj9xVneP0JxxmQAdzQ0MCf\n/vQnXn/99fbRnRfuW758ORaLBWj75T4/ArWvfPrpp7z55ptAW5dzdXV1+yjsyMhITCYTRUVFWK1W\ndu7cybRp0/q0Pmh7M/Hy8urUEjt58iSPPfYYiqJgtVo5ePBgnz9/F5o6dSpbtmwBYOvWrVx33XUd\n9k+bNq19f05ODgaDAW9v7z6r79NPP8XFxYWHH374ovsv9lroC7/61a8oLCwE2v7g+vH/paOfP4Aj\nR44wYsSILvdt2LCBzz//HGgbQR0YGNhrI/K7el/p768/4VgDsgv6yy+/pLa2ll//+tft2yZNmkRc\nXBxz5sxhxowZ3H333bi5uREfH9+n3c/Q1tL4zW9+w/bt22ltbWX16tV8/vnn+Pj4MGfOHFavXs1j\njz0GwPz584mNje3T+qDzZ9FvvPEGEyZMIDk5mdDQUO644w60Wi0pKSl9NjAmOzubdevWUVxcjF6v\nZ8uWLaxfv56VK1fywQcfEB4ezsKFCwF45JFHeO655xg7diwJCQncc889aDQaVq1a1af1VVdX4+bm\nxtKlS4G2Ftvq1avb6+vqtdBb3c9d1bdkyRJ+/etf4+HhgaenJ8899xzQf56/V155hcrKyvbLjM77\nxS9+wV/+8hcWLFjAb3/7W95//32sVitr167ttfq6el95/vnneeqpp/rF60/0P7IesBBCCOEAA7IL\nWgghhHA0CWAhhBDCASSAhRBCCAeQABZCCCEcQAJYCCGEcAAJYCGuwKZNm/jNb37j6DKEECogASyE\nEEI4wICciEOo3zvvvMNXX32FzWZj8ODB3H///Tz44IPMmDGDY8eOAfDnP/8Zo9HIrl27eO2113B3\nd8fDw4M1a9ZgNBrJysri2WefxcXFBT8/P9atWweAyWTiN7/5Dfn5+YSHh/Pqq6+i0Wgc+eMKIZyQ\ntICF6hw+fJht27bx7rvv8sEHH+Dj48OePXsoLCzktttu47333mPixIm89dZbNDU18dRTT/HKK6/w\nzjvvMGPGDP7zP/8TgN/+9resWbOGjRs3MmHCBHbv3g20rU60Zs0aNm3aRF5eHjk5OY78cYUQTkpa\nwEJ10tLSKCgoYNmyZQCYzWbKy8vx9/dn1KhRAIwdO5b//d//5fTp0wQFBREaGgrAxIkTef/996mp\nqeHs2bMMHz4cgHvvvRdo+ww4MTERDw8PoG2xhIaGhj7+CYUQaiABLFTH1dWVlJSUDsvmFRUVcdtt\nt7XfVhQFjUbTqev4wu0Xm6X1x5P5y2yuQoirIV3QQnXGjh3LN998Q2NjIwDvvvsulZWV1NfXty/I\nfvDgQeLi4oiJiaG6upqSkhIA9u7dy5gxYwgICMDf35/Dhw8D8NZbb/Huu+865gcSQqiStICF6iQm\nJrJ48WKWLl2Km5sbBoOBSZMmYTQa2bRpE88//zyKovDSSy/h7u7O2rVreeSRR3B1dcXT07N9xZwX\nXniBZ599Fr1ej4+PDy+88AJbt2518E8nhFALWQ1JDAhFRUX827/9G998842jSxFCCEC6oIUQQgiH\nkBawEEII4QDSAhZCCCEcQAJYCCGEcAAJYCGEEMIBJICFEEIIB5AAFkIIIRzg/wNH5m/JAuyUWwAA\nAABJRU5ErkJggg==\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xHuqlhrUMq5b",
        "outputId": "baa5080a-cc3e-4911-ce6f-b27aed0c398f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/MyNet_cifar10_result/accuracy.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n//Xr1/PCCy8QFxcHwMyZM/nxj3/cbfV983dl3Lhxfer7JwOEMQClpaUZP/zhDw3DMIzKykrjiiuu\naPf43Llzjbq6ul6orM2OHTuMn/70p+d9/JprrjGKi4sNu91u3HbbbcbRo0d7sLr2du7caTz66KPt\ntk2bNq1XaqmvrzeWLFli/PKXvzTWrFljGIZhLF++3Pjoo48MwzCM559/3li7dm27Y3bu3Gncfffd\nhmEYxrFjx4zvfe97PVrfww8/bHz44YeGYRjGG2+8YTz99NPtjunsu9Dd9f385z83Pvvss/Me09uf\n39mWL19u7Nu3r922d99913jqqae6raazdfS70pe+fzJwDMiu+KlTp/LCCy8AEBAQQGNjI3a7vZer\n6pqCggICAwOJjo7GbDZzxRVXkJaW1mv1/OEPf+AnP/lJr73+2Tw8PFi9ejURERHObTt37nSuODh3\n7txzPqu0tDTmz58PQEJCAjU1NdTV1fVYfStXruTqq68GIDg4mOrq6m557a7oqL7O9Pbn97Xjx49T\nW1vbq63djn5X+tL3TwaOARnsFosFHx8fAN555x1mz559TlfxypUrue2223juuecwemFyvmPHjnHP\nPfdw22238dVXXzm3l5eXExIS4rwfEhJCeXl5j9cHkJWVRXR0dLuuY4CWlhYefPBBFi9ezJ/+9Kce\nq8fNzQ0vL6922xobG51dn6Ghoed8VlarleDgYOf97vw8O6rPx8cHi8WC3W7nz3/+M9dff/05x53v\nu9AT9QG88cYb3Hnnndx///1UVla2e6y3P7+v/d///R9Llizp8LH09HSWLl3Kv/7rv3LgwIFuqQ06\n/l3pS98/GTgG7Dl2gE8//ZR33nmH1157rd32ZcuWMWvWLAIDA7n33nvZuHEjCxYs6LG64uPjue++\n+7jmmmsoKCjgzjvvZNOmTeecm+tt77zzDjfddNM52x9++GFuuOEGTCYTS5YsYcqUKYwbN64XKmyv\nK3+g9cYfcXa7nYcffpjp06czY8aMdo/19ndh0aJFBAUFMXr0aF555RVeeukl/vM///O8+/fG59fS\n0kJGRgaPPvroOY+NHz+ekJAQ5syZQ2ZmJj//+c/54IMPurWes39Xzh6701e/f+J6BmSLHeDLL7/k\nf/7nf1i9ejX+/u3XOb7xxhsJDQ3Fzc2N2bNnc+TIkR6tLTIykoULF2IymYiLiyMsLIzS0lIAIiIi\nsFqtzn1LS0svquv0Utq5cycTJ048Z/ttt92Gr68vPj4+TJ8+vcc/v7P5+PjQ1NQEdPxZffPzLCsr\nO6cHors98sgjDBkyhPvuu++cxy70XegJM2bMYPTo0UDboNJv/rvsC5/frl27ztsFn5CQ4BzsN3Hi\nRCorK7v1tNs3f1f6w/dPXM+ADPba2lqeeeYZXn75Zedo37MfW7p0KS0tLUDbj8bXI5J7yvvvv8+r\nr74KtHW9V1RUOEflx8bGUldXR2FhITabjS1btpCSktKj9UHbj5Svr+85Lcfjx4/z4IMPYhgGNpuN\nPXv29Pjnd7aZM2eyceNGADZt2sSsWbPaPZ6SkuJ8PCcnh4iICPz8/Hqsvvfffx93d3eWLVt23sfP\n913oCT/96U8pKCgA2v6Q++a/y97+/AD279/PqFGjOnxs9erVbNiwAWgbUR8SEtJtV2h09LvS179/\n4poGZFf8Rx99RFVVFf/xH//h3HbZZZcxcuRIUlNTmT17Nrfeeiuenp6MGTOmR7vhoa1l9NBDD7F5\n82ZaW1t59NFH2bBhA/7+/qSmpvLoo4/y4IMPArBw4UKGDh3ao/XBuef6X3nlFaZOncrEiROJiori\nu9/9LmazmXnz5vXYgKbs7GyefvppioqKcHNzY+PGjTz33HMsX76cdevWMWjQIG688UYA7r//fp58\n8kkmTZpEUlISixcvxmQysXLlyh6tr6KiAk9PT+644w6grYX56KOPOuvr6LvQXd3wHdW3ZMkS/uM/\n/gNvb298fHx48skngb7z+b344ouUl5c7L2f72o9//GP++7//m+uvv56f/exnvPnmm9hsNp544olu\nq6+j35WnnnqKX/7yl33i+ycDh5ZtFRERcSEDsiteRETEVSnYRUREXIiCXURExIUo2EVERFyIgl1E\nRMSFKNhFLsL69et56KGHersMEZHzUrCLiIi4kAE5QY24vjVr1vDxxx9jt9sZNmwYP/zhD/nRj37E\n7NmzOXToEAC//e1viYyMZOvWrfzhD3/Ay8sLb29vHn/8cSIjI9m3bx+rVq3C3d2dwMBAnn76aQDq\n6up46KGHyM3NZdCgQbz00kuYTKbefLsiIk5qsYvLycrK4pNPPmHt2rWsW7cOf39/tm/fTkFBAd/5\nznf485//zLRp03jttddobGzkl7/8JS+++CJr1qxh9uzZ/O53vwPgZz/7GY8//jhvvPEGU6dO5fPP\nPwfaVlt7/PHHWb9+PUePHiUnJ6c3366ISDtqsYvL2blzJydPnuTOO+8EoKGhgdLSUoKCghg7diwA\nkyZN4vXXXycvL4/Q0FCioqIAmDZtGm+++SaVlZWcPn2aESNGAPD9738faDvHPm7cOLy9vYG2RVpq\na2t7+B2KiJyfgl1cjoeHB/PmzWu3vGhhYSHf+c53nPcNw8BkMp3ThX729vPNtvzNRUQ0K7OI9CXq\niheXM2nSJL744gvq6+sBWLt2LeXl5dTU1HDgwAEA9uzZw8iRI4mPj6eiooLi4mIA0tLSGD9+PMHB\nwQQFBZGVlQXAa6+9xtq1a3vnDYmIXAS12MXljBs3jttvv5077rgDT09PIiIiuOyyy4iMjGT9+vU8\n9dRTGIbBb37zG7y8vHjiiSe4//778fDwwMfHx7kC2LPPPsuqVatwc3PD39+fZ599lk2bNvXyuxMR\nuTCt7iYDQmFhIf/yL//CF1980duliIh0K3XFi4iIuBC12EVERFyIWuwiIiIuRMEuIiLiQhTsIiIi\nLkTBLiIi4kIU7CIiIi5EwS4iIuJC/j8OytG7B5sqAQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Wpz2mcvpMq5g"
      },
      "cell_type": "markdown",
      "source": [
        "学習データでの精度（`main/accuracy`)は77%程度まで到達していますが，テストデータでのロス（`val/main/loss`）は途中から下げ止まり，精度（`val/main/accuracy`）も60%前後で頭打ちになってしまっています．表示されたログの最後の行を見ると，テストデータでの精度も同様に60%程度だったようです．学習データでは良い精度が出ているが， テストデータでは精度が良くないということなので，**モデルが学習データにオーバーフィッティングしている**と思われます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "sSB6NmM_Mq5h"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みネットワークを使った予測\n",
        "\n",
        "テスト精度は60%程度でしたが，試しにこの学習済みネットワークを使っていくつかのテスト画像を分類させてみましょう．あとで使いまわせるように`predict`関数を作っておきます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "cZVANymqMq5h",
        "outputId": "2ba75883-d82c-4e55-e2de-9444efe84cf3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1432
        }
      },
      "cell_type": "code",
      "source": [
        "cls_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',\n",
        "             'dog', 'frog', 'horse', 'ship', 'truck']\n",
        "\n",
        "def predict(net, image_id):\n",
        "    _, test = cifar.get_cifar10()\n",
        "    x, t = test[image_id]\n",
        "    net.to_cpu()\n",
        "    with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "        y = net.predictor(x[None, ...]).data.argmax(axis=1)[0]\n",
        "\n",
        "    plt.imshow(x.transpose(1, 2, 0))\n",
        "    plt.show()\n",
        "    print('predicted_label:', cls_names[y])\n",
        "    print('answer:', cls_names[t])\n",
        "\n",
        "for i in range(10, 15):\n",
        "    predict(net, i)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "predicted_label: airplane\n",
            "answer: airplane\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f987d06b390>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: automobile\n",
            "answer: truck\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAFV0RYkA/w9P2kwTH2qvqAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f987eb8d828>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: dog\n",
            "answer: dog\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRVeUGPD/AEp0BJLEAuA/AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f987f0ce6a0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: horse\n",
            "answer: horse\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nxID/D74/bcoGU5g9AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f987ee03940>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: automobile\n",
            "answer: truck\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nQBVdUSLA/wPjOFvUs4XLvQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f987f0b1e48>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "X1IJmNiHMq5l"
      },
      "cell_type": "markdown",
      "source": [
        "うまく分類できているものもあれば，そうでないものもありました．ネットワークの学習に使用したデータセット上ではほぼ百発百中で正解できるとしても，未知のデータ，すなわちテストデータセットにある画像に対して高精度な予測ができなければ，意味がありません．テストデータでの精度は，モデルの**汎化性能**に関係していると言われます．\n",
        "\n",
        "どうすれば高い汎化性能を持つネットワークを設計し，学習することができるでしょうか？これは非常に難しい問いですが，同時に機械学習を使った応用を考えるとき，最も重要な問いの一つです．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "l6-aXDxhMq5l"
      },
      "cell_type": "markdown",
      "source": [
        "### もっと深いネットワークを定義してみよう\n",
        "\n",
        "では，上のネットワークよりもよりたくさんの層を持つネットワークを定義してみましょう．ここでは，1層の畳み込みネットワークを`ConvBlock`，1層の全結合ネットワークを`LinearBlock`として定義し，これをたくさんシーケンシャルに積み重ねる方法で大きなネットワークを定義してみます．"
      ]
    },
    {
      "metadata": {
        "id": "R_HtP-XAVcrI",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 構成要素を定義する\n",
        "\n",
        "まず，今目指している大きなネットワークの構成要素となる`ConvBlock`と`LinearBlock`を定義してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kokxUuBUMq5m",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class ConvBlock(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, n_ch, pool_drop=False):\n",
        "        w = chainer.initializers.HeNormal()\n",
        "        super(ConvBlock, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.conv = L.Convolution2D(None, n_ch, 3, 1, 1, nobias=True, initialW=w)\n",
        "            self.bn = L.BatchNormalization(n_ch)\n",
        "        self.pool_drop = pool_drop\n",
        "        \n",
        "    def forward(self, x):\n",
        "        h = F.relu(self.bn(self.conv(x)))\n",
        "        if self.pool_drop:\n",
        "            h = F.max_pooling_2d(h, 2, 2)\n",
        "            h = F.dropout(h, ratio=0.25)\n",
        "        return h\n",
        "    \n",
        "class LinearBlock(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, drop=False):\n",
        "        w = chainer.initializers.HeNormal()\n",
        "        super(LinearBlock, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.fc = L.Linear(None, 1024, initialW=w)\n",
        "        self.drop = drop\n",
        "        \n",
        "    def forward(self, x):\n",
        "        h = F.relu(self.fc(x))\n",
        "        if self.drop:\n",
        "            h = F.dropout(h)\n",
        "        return h"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7PWQmRE4Mq5o"
      },
      "cell_type": "markdown",
      "source": [
        "`ConvBlock`は`Chain`を継承した小さなネットワークとして定義されています．これは一つの畳み込み層とBatch Normalization層をパラメータありで持っているので，コンストラクタ内でこれらの登録を行っています．`forward`メソッドでは，これらにデータを渡しつつ，活性化関数ReLUを適用して，さらに`pool_drop`がコンストラクタに`True`で渡されているときはMax PoolingとDropoutという関数を適用するようになっています．\n",
        "\n",
        "Chainerでは，Pythonを使って書いたforward計算のコード自体がネットワークの構造を表します．すなわち，実行時にデータがどのような層をくぐっていったか，ということがネットワークそのものを定義します．これによって，上記のような分岐などを含むネットワークも簡単に書け，柔軟かつシンプルで可読性の高いネットワーク定義が可能になります．これが**Define-by-Run**と呼ばれる特徴です．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7KpJgoXQMq5p"
      },
      "cell_type": "markdown",
      "source": [
        "#### 大きなネットワークの定義\n",
        "\n",
        "次に，これらの小さなネットワークを構成要素として積み重ねて，大きなネットワークを定義してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "2lMV0pumMq5q",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class DeepCNN(chainer.ChainList):\n",
        "\n",
        "    def __init__(self, n_output):\n",
        "        super(DeepCNN, self).__init__(\n",
        "            ConvBlock(64),\n",
        "            ConvBlock(64, True),\n",
        "            ConvBlock(128),\n",
        "            ConvBlock(128, True),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256, True),\n",
        "            LinearBlock(),\n",
        "            LinearBlock(),\n",
        "            L.Linear(None, n_output)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        for f in self:\n",
        "            x = f(x)\n",
        "        return x"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Wywy-_DVMq5s"
      },
      "cell_type": "markdown",
      "source": [
        "ここで利用しているのが，`ChainList`というクラスです．このクラスは`Chain`を継承したクラスで，いくつもの`Link`や`Chain`を順次呼び出していくようなネットワークを定義するときに便利です．`ChainList`を継承して定義されるモデルは，親クラスのコンストラクタを呼び出す際に**キーワード引数ではなく普通の引数として**`Link`もしくは`Chain`オブジェクトを渡すことができます．そしてこれらは，`self.children()`メソッドによって**登録した順番に**取り出すことができます．`ChainList`自体もPythonのイテレータとして機能するので，例えば`ChainList`を継承したクラスの中で`for f in self:...`といったことも可能です．\n",
        "\n",
        "この特徴を使うと，forward計算の記述が簡単になります．`self.children()`が返す構成要素のリストから，for文で構成要素を順番に取り出していき，そもそもの入力である`x`に取り出してきた部分ネットワークの計算を適用して，この出力で`x`を置き換えるということを順番に行っていけば，一連の`Link`または`Chain`を，コンストラクタで親クラスに登録した順番と同じ順番で適用していくことができます．そのため，シーケンシャルな部分ネットワークの適用によって表される大きなネットワークを定義するのに重宝します．\n",
        "\n",
        "それでは，学習を回してみます．今回はパラメータ数も多いので，学習を停止するエポック数を100に設定します．また，学習率を0.1から始めて，30エポックごとに10分の1にするように設定してみます．"
      ]
    },
    {
      "metadata": {
        "id": "g735gZpbVh3-",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 高速化のTIPS\n",
        "\n",
        "今回は多くの畳込み層を使う大きなネットワークを使うので，Chainerが用意してくれているcuDNNのautotune機能を有効にしてみます．やり方は簡単で，以下の二行を事前に実行しておくだけです．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "jI4IbE9WMq5t",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "chainer.cuda.set_max_workspace_size(1024 * 1024 * 1024)\n",
        "chainer.config.autotune = True"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "GLFm2waBMq5x"
      },
      "cell_type": "markdown",
      "source": [
        "それでは，今度こそ学習を開始してみましょう．本来は，以下の2行を実行することで乱数シードを固定し，100エポック分上で定義した `DeepCNN` というクラスが表すモデルの学習ができるのですが，これは40分以上の時間を要するので，今回は事前に90エポックまで学習を進めておいた重みを読み込んで，90エポック終了時点から学習を再開し，最後の10エポックだけ実際にここで学習を回すことにします．"
      ]
    },
    {
      "metadata": {
        "id": "g73am7hvVlQa",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "**ゼロから学習する場合:**\n",
        "\n",
        "```python\n",
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, base_lr=0.1, lr_decay=(30, 'epoch'))\n",
        "```"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kAiXcG8jMq5y",
        "outputId": "dbea0b26-26c5-4ca5-dca4-e747aea7cc86",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2043
        }
      },
      "cell_type": "code",
      "source": [
        "!wget https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_snapshot_epoch_90.npz\n",
        "\n",
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, base_lr=0.1, lr_decay=(30, 'epoch'), snapshot='DeepCNN_cifar10_snapshot_epoch_90.npz')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2018-11-22 16:37:49--  https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_snapshot_epoch_90.npz\n",
            "Resolving github.com (github.com)... 192.30.253.113, 192.30.253.112\n",
            "Connecting to github.com (github.com)|192.30.253.113|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/4fcc1200-eeb7-11e8-8ca0-9095e5bca078?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181122%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181122T163749Z&X-Amz-Expires=300&X-Amz-Signature=1c35412bfa4506f275f502b3d15f411ca76241157f08248fd96cdf41fed58738&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream [following]\n",
            "--2018-11-22 16:37:50--  https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/4fcc1200-eeb7-11e8-8ca0-9095e5bca078?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181122%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181122T163749Z&X-Amz-Expires=300&X-Amz-Signature=1c35412bfa4506f275f502b3d15f411ca76241157f08248fd96cdf41fed58738&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream\n",
            "Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.216.129.11\n",
            "Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.129.11|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 56889445 (54M) [application/octet-stream]\n",
            "Saving to: ‘DeepCNN_cifar10_snapshot_epoch_90.npz’\n",
            "\n",
            "DeepCNN_cifar10_sna 100%[===================>]  54.25M  14.6MB/s    in 4.6s    \n",
            "\n",
            "2018-11-22 16:37:55 (11.8 MB/s) - ‘DeepCNN_cifar10_snapshot_epoch_90.npz’ saved [56889445/56889445]\n",
            "\n",
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           2.62849     0.144931       2.22525        0.15625            27.9748       0.1         \n",
            "\u001b[J2           2.11316     0.210804       1.97533        0.266406           54.5483       0.1         \n",
            "\u001b[J3           1.87483     0.289396       1.8026         0.320508           81.0827       0.1         \n",
            "\u001b[J4           1.74066     0.340443       1.74728        0.358203           107.7         0.1         \n",
            "\u001b[J5           1.58789     0.409411       1.63916        0.40332            134.235       0.1         \n",
            "\u001b[J6           1.38757     0.492831       1.22399        0.561719           161.093       0.1         \n",
            "\u001b[J7           1.2036      0.566128       1.32939        0.553906           187.55        0.1         \n",
            "\u001b[J8           1.07527     0.617077       1.17079        0.589648           214.184       0.1         \n",
            "\u001b[J9           0.964984    0.660711       0.950063       0.67207            240.817       0.1         \n",
            "\u001b[J10          0.895905    0.688056       0.972697       0.657031           267.372       0.1         \n",
            "\u001b[J11          0.828796    0.715043       0.944733       0.686914           297.779       0.1         \n",
            "\u001b[J12          0.784123    0.731793       0.960205       0.687305           324.312       0.1         \n",
            "\u001b[J13          0.742033    0.748291       0.858308       0.719727           351.032       0.1         \n",
            "\u001b[J14          0.692516    0.76627        0.811853       0.725195           377.591       0.1         \n",
            "\u001b[J15          0.65644     0.776256       0.692374       0.767578           404.23        0.1         \n",
            "\u001b[J16          0.650682    0.780738       0.796731       0.733008           430.797       0.1         \n",
            "\u001b[J17          0.610249    0.793435       0.632162       0.791406           457.467       0.1         \n",
            "\u001b[J18          0.591896    0.803667       0.791757       0.739453           484.04        0.1         \n",
            "\u001b[J19          0.578718    0.804465       1.04659        0.671484           510.602       0.1         \n",
            "\u001b[J20          0.554954    0.814431       0.8127         0.733594           537.247       0.1         \n",
            "\u001b[J21          0.549188    0.814236       0.654926       0.787109           567.567       0.1         \n",
            "\u001b[J22          0.535866    0.820446       0.640323       0.788672           594.214       0.1         \n",
            "\u001b[J23          0.527765    0.823028       0.958373       0.70957            620.761       0.1         \n",
            "\u001b[J24          0.512286    0.830056       0.793664       0.748633           647.363       0.1         \n",
            "\u001b[J25          0.497195    0.833141       0.717548       0.759961           673.951       0.1         \n",
            "\u001b[J26          0.495153    0.835759       1.7557         0.511328           700.494       0.1         \n",
            "\u001b[J27          0.486062    0.837069       0.732518       0.775391           727.13        0.1         \n",
            "\u001b[J28          0.47963     0.839387       0.669157       0.786328           753.692       0.1         \n",
            "\u001b[J29          0.475502    0.838312       0.915904       0.718555           780.308       0.1         \n",
            "\u001b[J30          0.460236    0.844841       0.877713       0.72793            806.806       0.1         \n",
            "\u001b[J31          0.298483    0.897239       0.381921       0.879687           837.16        0.01        \n",
            "\u001b[J32          0.211182    0.92784        0.364046       0.882617           863.898       0.01        \n",
            "\u001b[J33          0.180429    0.937478       0.374651       0.883984           890.554       0.01        \n",
            "\u001b[J34          0.164156    0.943692       0.361041       0.888867           917.199       0.01        \n",
            "\u001b[J35          0.144584    0.950387       0.375391       0.889258           943.774       0.01        \n",
            "\u001b[J36          0.132288    0.954235       0.377427       0.890625           970.4         0.01        \n",
            "\u001b[J37          0.12103     0.957376       0.390434       0.892578           996.96        0.01        \n",
            "\u001b[J38          0.111974    0.961204       0.400307       0.886133           1023.62       0.01        \n",
            "\u001b[J39          0.102573    0.964476       0.399275       0.892773           1050.2        0.01        \n",
            "\u001b[J40          0.0972647   0.965931       0.432854       0.887109           1076.83       0.01        \n",
            "\u001b[J41          0.0928545   0.966597       0.418165       0.887305           1107.19       0.01        \n",
            "\u001b[J42          0.08498     0.96964        0.432462       0.884961           1133.75       0.01        \n",
            "\u001b[J43          0.0845448   0.970792       0.4365         0.880273           1160.37       0.01        \n",
            "\u001b[J44          0.0770674   0.973914       0.441935       0.883789           1187.02       0.01        \n",
            "\u001b[J45          0.0732439   0.974565       0.469901       0.881836           1213.62       0.01        \n",
            "\u001b[J46          0.070491    0.975962       0.453856       0.8875             1240.16       0.01        \n",
            "\u001b[J47          0.068846    0.97583        0.461264       0.881055           1266.75       0.01        \n",
            "\u001b[J48          0.0694101   0.976941       0.435111       0.885742           1293.25       0.01        \n",
            "\u001b[J49          0.0653772   0.977117       0.461284       0.882617           1319.87       0.01        \n",
            "\u001b[J50          0.0633419   0.97836        0.464232       0.889648           1346.47       0.01        \n",
            "\u001b[J51          0.0584663   0.979834       0.464193       0.885547           1376.6        0.01        \n",
            "\u001b[J52          0.0607617   0.979714       0.466352       0.881445           1403.21       0.01        \n",
            "\u001b[J53          0.0615791   0.978632       0.451807       0.889453           1429.69       0.01        \n",
            "\u001b[J54          0.0588031   0.979914       0.489054       0.881836           1456.28       0.01        \n",
            "\u001b[J55          0.0582368   0.979367       0.4719         0.882617           1482.83       0.01        \n",
            "\u001b[J56          0.0558719   0.981379       0.495846       0.878125           1509.45       0.01        \n",
            "\u001b[J57          0.0579962   0.979936       0.472415       0.875781           1536.06       0.01        \n",
            "\u001b[J58          0.0592009   0.9793         0.454762       0.88418            1562.6        0.01        \n",
            "\u001b[J59          0.0568546   0.980735       0.487556       0.876172           1589.17       0.01        \n",
            "\u001b[J60          0.0579785   0.980079       0.472908       0.883398           1615.93       0.01        \n",
            "\u001b[J61          0.0318918   0.98968        0.416953       0.895703           1646.15       0.001       \n",
            "\u001b[J62          0.0220127   0.993612       0.416859       0.899609           1672.69       0.001       \n",
            "\u001b[J63          0.0186169   0.99434        0.417849       0.898242           1699.29       0.001       \n",
            "\u001b[J64          0.0159041   0.995526       0.41804        0.900781           1725.78       0.001       \n",
            "\u001b[J65          0.0147089   0.995916       0.429896       0.899609           1752.39       0.001       \n",
            "\u001b[J66          0.0129457   0.996404       0.433748       0.898828           1779.01       0.001       \n",
            "\u001b[J67          0.0131643   0.996283       0.433923       0.898828           1805.54       0.001       \n",
            "\u001b[J68          0.0112659   0.996893       0.437222       0.901758           1832.17       0.001       \n",
            "\u001b[J69          0.0106502   0.997151       0.443475       0.901758           1858.73       0.001       \n",
            "\u001b[J70          0.0107926   0.997203       0.445066       0.900391           1885.34       0.001       \n",
            "\u001b[J71          0.0105973   0.997062       0.44159        0.898633           1915.8        0.001       \n",
            "\u001b[J72          0.00934292  0.99767        0.450084       0.897266           1942.45       0.001       \n",
            "\u001b[J73          0.0104884   0.997092       0.451691       0.899023           1969.06       0.001       \n",
            "\u001b[J74          0.00849317  0.997707       0.450391       0.9                1995.61       0.001       \n",
            "\u001b[J75          0.00846932  0.997891       0.451362       0.902148           2022.21       0.001       \n",
            "\u001b[J76          0.00826699  0.997841       0.448779       0.900781           2048.69       0.001       \n",
            "\u001b[J77          0.00875069  0.997492       0.45095        0.900391           2075.31       0.001       \n",
            "\u001b[J78          0.00823296  0.998019       0.449194       0.898438           2102.1        0.001       \n",
            "\u001b[J79          0.00701245  0.998113       0.454196       0.899609           2128.74       0.001       \n",
            "\u001b[J80          0.00846517  0.997596       0.455877       0.901172           2155.29       0.001       \n",
            "\u001b[J81          0.00677115  0.99818        0.459518       0.899805           2185.54       0.001       \n",
            "\u001b[J82          0.00717393  0.998047       0.465337       0.899805           2212.13       0.001       \n",
            "\u001b[J83          0.00709802  0.997908       0.464472       0.898828           2238.69       0.001       \n",
            "\u001b[J84          0.00699702  0.998091       0.470595       0.899219           2265.27       0.001       \n",
            "\u001b[J85          0.00746627  0.997975       0.470063       0.901172           2291.78       0.001       \n",
            "\u001b[J86          0.00666763  0.998069       0.466201       0.899414           2318.38       0.001       \n",
            "\u001b[J87          0.00616266  0.998531       0.462948       0.9                2344.86       0.001       \n",
            "\u001b[J88          0.00719447  0.997847       0.463587       0.899609           2371.48       0.001       \n",
            "\u001b[J89          0.00638493  0.998335       0.465655       0.901367           2398.08       0.001       \n",
            "\u001b[J90          0.0061445   0.998286       0.464918       0.900586           2424.59       0.001       \n",
            "\u001b[J91          0.00582547  0.99838        0.46484        0.900977           2453.64       0.0001      \n",
            "\u001b[J92          0.00602775  0.998331       0.461774       0.901367           2479.98       0.0001      \n",
            "\u001b[J93          0.00597369  0.998491       0.464172       0.900195           2506.39       0.0001      \n",
            "\u001b[J94          0.00619661  0.99813        0.46446        0.900391           2532.73       0.0001      \n",
            "\u001b[J95          0.00545571  0.998557       0.466654       0.900977           2559.35       0.0001      \n",
            "\u001b[J96          0.00613313  0.998308       0.465335       0.900781           2585.68       0.0001      \n",
            "\u001b[J97          0.00541793  0.998624       0.465641       0.900586           2612.09       0.0001      \n",
            "\u001b[J98          0.00512293  0.998801       0.467115       0.900781           2638.5        0.0001      \n",
            "\u001b[J99          0.0056222   0.998576       0.464965       0.901367           2664.88       0.0001      \n",
            "\u001b[J100         0.00551703  0.998624       0.462724       0.901367           2691.3        0.0001      \n",
            "Test accuracy: 0.8966574\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "OK1P287rMq51"
      },
      "cell_type": "markdown",
      "source": [
        "学習が終了しました．ロスカーブと精度のグラフを見てみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "W67QavgIMq52",
        "outputId": "f0e5f253-0088-400c-bdb9-f4eedadc7ca4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/DeepCNN_cifar10_result/loss.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nRU5ErkJggg==\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "FnEM3DmzMq56",
        "outputId": "83001c60-112f-46fa-8b04-e71b3375d234",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/DeepCNN_cifar10_result/accuracy.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nAYN93rx5rFixAoBNmzZRWFiY6H4HuP/++/nqV7/K/Pnzh67KLolgD7kZXZw55J8nIiIy3Ax4u9us\nWbOYMmUKixcvxjAM7rrrLpYvX47H4+GMM87gD3/4A1VVVbz44osAfOELX+Cyyy4bkmKbA61gGlgi\nLsoLdaubiIjIwY7oPvZbbrml1+tJkyYlvt64cePgVnQYzYEWzJCT0nwPdpsmzomIiBxs2Kw8F41F\naQu2Ewu6NXFORETkEIZNsLcE2zAxMUNuxmh8XUREpF/DJth7zogfrRnxIiIi/Ro2wd7StTiNEU6j\nrEArzomIiPRn2AS70VVqgbMYu23YlC0iInJMDZuELDLG0bnuHMbnVSS7FBERkePWsAn2PXUdEHEw\nRuPrIiIihzRsgn3sqExmjsvnpPEFA+8sIiIyQhlmf091GUINDR3H8uNERFJCQYF6K+XIDJsWu4iI\niAxMwS4iIpJCFOwiIiIpRMEuIiKSQhTsIiIiKUTBLiIikkIU7CIiIilEwS4iIpJCjvkCNSIiIjJ0\n1GIXERFJIQp2ERGRFKJgFxERSSEKdhERkRSiYBcREUkhCnYREZEUomAXERFJIbZkF3A4y5YtY/36\n9RiGwe2338706dOTXdKQefDBB/nggw+IRCJce+21TJs2je9+97tEo1EKCgp46KGHcDgcyS5z0AUC\nAb7whS9w/fXXc9ppp42Ia3755Zf5xS9+gc1m49vf/jYTJ05M6ev2+Xx873vfo62tjXA4zA033EBB\nQQE//OEPAZg4cSJ33313coscRFu3buX666/na1/7GkuWLGH//v39/nxffvllfvWrX2GxWLj00ku5\n5JJLkl26pArzOLVmzRrzm9/8pmmaprl9+3bz0ksvTXJFQ2fVqlXmNddcY5qmaTY3N5tnnXWWeeut\nt5qvvPKKaZqm+cgjj5jPPfdcMkscMo8++qh58cUXmy+99NKIuObm5mbzvPPOMzs6Osy6ujrzzjvv\nTPnrfvbZZ82HH37YNE3TrK2tNc8//3xzyZIl5vr1603TNM2bb77ZXLlyZTJLHDQ+n89csmSJeeed\nd5rPPvusaZpmvz9fn89nnnfeeWZ7e7vZ2dlpXnjhhWZLS0syS5cUctx2xa9atYqFCxcCUFlZSVtb\nG16vN8lVDY05c+bw2GOPAZCZmUlnZydr1qzh3HPPBeDss89m1apVySxxSOzYsYPt27ezYMECgBFx\n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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "FJ9K1MtIMq5-"
      },
      "cell_type": "markdown",
      "source": [
        "先程よりも大幅にValidationデータに対する精度が向上したことが分かります．学習率を10分の1に下げるタイミングでロスががくっと減り，精度がガクッと上がっているのが分かります．最終的に，先程60%前後だったValidationデータでの精度が，90%程度まで上がりました．また，テストデータを用いた精度も，およそ90%程度となっています．しかし最新の研究成果では97%以上まで達成されています．さらに精度を上げるには，今回行ったようなネットワークの構造自体の改良ももちろんのこと，学習データを擬似的に増やす操作（Data augmentation）や，複数のモデルの出力を一つの出力に統合する操作（Ensemble）などなど，いろいろな工夫が考えられます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "IyOFHCvrMq5_"
      },
      "cell_type": "markdown",
      "source": [
        "## データセットクラスを書いてみよう\n",
        "\n",
        "ここでは，Chainerにすでに用意されているCIFAR10のデータを取得する機能を使って，データセットクラスを自分で書いてみます．Chainerでは，データセットを表すクラスは以下の機能を持っていることが必要とされます．\n",
        "\n",
        "- データセット内のデータ数を返す`__len__`メソッド\n",
        "- 引数として渡される`i`に対応したデータもしくはデータとラベルの組を返す`get_example`メソッド\n",
        "\n",
        "その他のデータセットに必要な機能は，`chainer.dataset.DatasetMixin`クラスを継承することで用意できます．ここでは，`DatasetMixin`クラスを継承し，Data augmentation機能のついたデータセットクラスを作成してみましょう．"
      ]
    },
    {
      "metadata": {
        "id": "HZxDoqMkV08X",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### 自前データセットを使う\n",
        "\n",
        "自前で用意した，もしくはどこからから調達したラベル付き画像データセットを使う場合は，[LabeledImageDataset](https://docs.chainer.org/en/stable/reference/generated/chainer.datasets.LabeledImageDataset.html?highlight=LabeledImageDataset)というクラスが非常に便利です．詳細はドキュメントを参照してください：[LabeledImageDataset](https://docs.chainer.org/en/stable/reference/generated/chainer.datasets.LabeledImageDataset.html?highlight=LabeledImageDataset)．こちらでも使っています：[Chainerでアニメキャラクターの顔画像を分類する](https://qiita.com/mitmul/items/5502ecdd2f0b444c427f)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "b-11jjDiMq6B"
      },
      "cell_type": "markdown",
      "source": [
        "### CIFAR10データセットクラスを書く"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "csErjCCTMq6C",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class CIFAR10Augmented(chainer.dataset.DatasetMixin):\n",
        "\n",
        "    def __init__(self, split='train', train_ratio=0.9):\n",
        "        train_val, test_data = cifar.get_cifar10()\n",
        "        train_size = int(len(train_val) * train_ratio)\n",
        "        train_data, valid_data = split_dataset_random(train_val, train_size, seed=0)\n",
        "        if split == 'train':\n",
        "            self.data = train_data\n",
        "        elif split == 'valid':\n",
        "            self.data = valid_data\n",
        "        elif split == 'test':\n",
        "            self.data = test_data\n",
        "        else:\n",
        "            raise ValueError(\"'split' argument should be either 'train', 'valid', or 'test'. But {} was given.\".format(split))\n",
        "\n",
        "        self.split = split\n",
        "        self.random_crop = 4\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "\n",
        "    def get_example(self, i):\n",
        "        x, t = self.data[i]\n",
        "        if self.split == 'train':\n",
        "            x = x.transpose(1, 2, 0)\n",
        "            h, w, _ = x.shape\n",
        "            x_offset = np.random.randint(self.random_crop)\n",
        "            y_offset = np.random.randint(self.random_crop)\n",
        "            x = x[y_offset:y_offset + h - self.random_crop,\n",
        "                  x_offset:x_offset + w - self.random_crop]\n",
        "            if np.random.rand() > 0.5:\n",
        "                x = np.fliplr(x)\n",
        "            x = x.transpose(2, 0, 1)\n",
        "\n",
        "        return x, t"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "x3UPCe0RMq6F"
      },
      "cell_type": "markdown",
      "source": [
        "このクラスは，CIFAR10のデータのそれぞれに対し，\n",
        "\n",
        "- 32x32の大きさの中からランダムに28x28の領域をクロップ\n",
        "- 1/2の確率で左右を反転させる\n",
        "\n",
        "という加工を行っています．こういった操作を加えることで擬似的に学習データのバリエーションを増やすと，オーバーフィッティングを抑制することに役に立つということが知られています．これらの操作以外にも，画像の色味を変化させるような変換やランダムな回転，アフィン変換など，さまざまな加工によって学習データ数を擬似的に増やす方法が提案されています．\n",
        "\n",
        "自分でデータの取得部分も書く場合は，コンストラクタに画像フォルダのパスとファイル名に対応したラベルの書かれたテキストファイルへのパスなどを渡してプロパティとして保持しておき，`get_example`メソッド内でそれぞれの画像を読み込んで対応するラベルとともに返す，という風にすれば良いことが分かります．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "vmvsVsTMMq6G"
      },
      "cell_type": "markdown",
      "source": [
        "### 作成したデータセットクラスを使って学習を行う\n",
        "\n",
        "それではさっそくこの`CIFAR10`クラスを使って学習を行ってみましょう．先程使ったのと同じ大きなネットワークを使うことで，Data augmentationの効果がどの程度あるのかを調べてみましょう．`train`関数も含め，データセットクラス以外は先程とすべて同様です．\n",
        "\n",
        "ここでも，40分ほどの時間がかかりますので，上と同様に90エポックまで学習したあとのsnapshotをダウンロードし，ここから学習を再開して最後の10エポックだけここで実際に学習させてみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "upvteI1eMq6G",
        "outputId": "bcf85b50-e2b0-4997-b516-f34c4801c151",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2043
        }
      },
      "cell_type": "code",
      "source": [
        "!wget https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_augmented_snapshot_epoch_90.npz\n",
        "\n",
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, train_dataset=CIFAR10Augmented(), valid_dataset=CIFAR10Augmented('valid'), test_dataset=CIFAR10Augmented('test'), postfix='augmented_', base_lr=0.1, lr_decay=(30, 'epoch'), snapshot='DeepCNN_cifar10_augmented_snapshot_epoch_90.npz')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2018-11-22 16:42:33--  https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_augmented_snapshot_epoch_90.npz\n",
            "Resolving github.com (github.com)... 192.30.253.112, 192.30.253.113\n",
            "Connecting to github.com (github.com)|192.30.253.112|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/5064a880-eeb7-11e8-95bf-80b5d9533256?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181122%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181122T164234Z&X-Amz-Expires=300&X-Amz-Signature=92e84efb10052e88588eaab5c325eab68a5e17528afe9e317d6b216c59c7cd49&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_augmented_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream [following]\n",
            "--2018-11-22 16:42:34--  https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/5064a880-eeb7-11e8-95bf-80b5d9533256?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181122%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181122T164234Z&X-Amz-Expires=300&X-Amz-Signature=92e84efb10052e88588eaab5c325eab68a5e17528afe9e317d6b216c59c7cd49&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_augmented_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream\n",
            "Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.216.110.91\n",
            "Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.110.91|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 56730280 (54M) [application/octet-stream]\n",
            "Saving to: ‘DeepCNN_cifar10_augmented_snapshot_epoch_90.npz’\n",
            "\n",
            "DeepCNN_cifar10_aug 100%[===================>]  54.10M  14.6MB/s    in 4.7s    \n",
            "\n",
            "2018-11-22 16:42:39 (11.4 MB/s) - ‘DeepCNN_cifar10_augmented_snapshot_epoch_90.npz’ saved [56730280/56730280]\n",
            "\n",
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           2.5875      0.156405       2.11656        0.203125           24.1767       0.1         \n",
            "\u001b[J2           1.99359     0.233842       1.84577        0.304492           47.9466       0.1         \n",
            "\u001b[J3           1.76968     0.325365       1.98983        0.26543            71.6864       0.1         \n",
            "\u001b[J4           1.61662     0.389537       2.07369        0.26875            95.5072       0.1         \n",
            "\u001b[J5           1.41259     0.478989       1.52089        0.446484           119.236       0.1         \n",
            "\u001b[J6           1.23382     0.555487       1.48775        0.480664           143.06        0.1         \n",
            "\u001b[J7           1.09323     0.613404       1.11949        0.590234           166.813       0.1         \n",
            "\u001b[J8           0.99303     0.650857       1.33017        0.566992           190.624       0.1         \n",
            "\u001b[J9           0.926848    0.678755       1.0075         0.665234           214.446       0.1         \n",
            "\u001b[J10          0.863165    0.702769       0.858035       0.717383           238.218       0.1         \n",
            "\u001b[J11          0.807948    0.727162       0.9556         0.679297           265.757       0.1         \n",
            "\u001b[J12          0.769224    0.739116       0.857765       0.711328           289.507       0.1         \n",
            "\u001b[J13          0.739977    0.752952       0.91583        0.711133           313.339       0.1         \n",
            "\u001b[J14          0.72064     0.759393       1.20587        0.61875            337.097       0.1         \n",
            "\u001b[J15          0.690136    0.77093        0.837919       0.726562           360.905       0.1         \n",
            "\u001b[J16          0.673935    0.774706       1.03539        0.678711           384.67        0.1         \n",
            "\u001b[J17          0.662879    0.778742       0.730712       0.758789           408.47        0.1         \n",
            "\u001b[J18          0.639202    0.78742        0.758566       0.765625           432.298       0.1         \n",
            "\u001b[J19          0.625988    0.792713       1.24791        0.664062           456.061       0.1         \n",
            "\u001b[J20          0.616269    0.795277       0.963706       0.70625            479.882       0.1         \n",
            "\u001b[J21          0.611734    0.795962       0.887129       0.723437           507.312       0.1         \n",
            "\u001b[J22          0.600444    0.800582       0.889526       0.710352           531.173       0.1         \n",
            "\u001b[J23          0.605317    0.800414       0.715702       0.756445           554.926       0.1         \n",
            "\u001b[J24          0.584194    0.805731       0.984225       0.694336           578.687       0.1         \n",
            "\u001b[J25          0.584041    0.805464       0.956576       0.685156           602.49        0.1         \n",
            "\u001b[J26          0.57384     0.80954        0.977559       0.712695           627.031       0.1         \n",
            "\u001b[J27          0.560405    0.814298       0.894127       0.718945           650.845       0.1         \n",
            "\u001b[J28          0.559933    0.816195       0.729981       0.752734           674.584       0.1         \n",
            "\u001b[J29          0.555933    0.814387       0.841304       0.727344           698.4         0.1         \n",
            "\u001b[J30          0.558057    0.814971       0.753542       0.757227           722.119       0.1         \n",
            "\u001b[J31          0.397613    0.866455       0.337977       0.888867           749.619       0.01        \n",
            "\u001b[J32          0.320024    0.890202       0.322082       0.894336           773.368       0.01        \n",
            "\u001b[J33          0.293655    0.900479       0.323365       0.888867           797.169       0.01        \n",
            "\u001b[J34          0.279553    0.904874       0.308263       0.897656           820.951       0.01        \n",
            "\u001b[J35          0.26519     0.909945       0.301763       0.897852           844.682       0.01        \n",
            "\u001b[J36          0.259166    0.909846       0.286909       0.904688           868.482       0.01        \n",
            "\u001b[J37          0.246168    0.915064       0.289997       0.904688           892.324       0.01        \n",
            "\u001b[J38          0.24097     0.91697        0.280986       0.903906           916.139       0.01        \n",
            "\u001b[J39          0.233951    0.918892       0.291962       0.904102           939.884       0.01        \n",
            "\u001b[J40          0.220939    0.923628       0.299502       0.902539           963.666       0.01        \n",
            "\u001b[J41          0.216055    0.924272       0.2946         0.905664           991.125       0.01        \n",
            "\u001b[J42          0.215143    0.926972       0.308637       0.897266           1014.88       0.01        \n",
            "\u001b[J43          0.213903    0.926625       0.291742       0.907812           1038.64       0.01        \n",
            "\u001b[J44          0.203283    0.929198       0.296043       0.905469           1062.33       0.01        \n",
            "\u001b[J45          0.19772     0.931041       0.327708       0.89375            1086.11       0.01        \n",
            "\u001b[J46          0.194907    0.932893       0.312555       0.901563           1109.82       0.01        \n",
            "\u001b[J47          0.190354    0.934326       0.336271       0.895703           1133.58       0.01        \n",
            "\u001b[J48          0.190431    0.932915       0.326305       0.902539           1157.3        0.01        \n",
            "\u001b[J49          0.18926     0.934326       0.312767       0.901172           1181.05       0.01        \n",
            "\u001b[J50          0.184469    0.936035       0.296937       0.907812           1204.93       0.01        \n",
            "\u001b[J51          0.181691    0.936521       0.324149       0.901172           1232.22       0.01        \n",
            "\u001b[J52          0.17546     0.939675       0.347524       0.893945           1256          0.01        \n",
            "\u001b[J53          0.175786    0.937723       0.335627       0.893164           1279.74       0.01        \n",
            "\u001b[J54          0.173612    0.940274       0.317897       0.902344           1303.52       0.01        \n",
            "\u001b[J55          0.171849    0.939548       0.306998       0.90625            1327.23       0.01        \n",
            "\u001b[J56          0.168304    0.94165        0.31145        0.902148           1351.04       0.01        \n",
            "\u001b[J57          0.170139    0.941495       0.301311       0.910156           1374.82       0.01        \n",
            "\u001b[J58          0.165011    0.942708       0.359516       0.892773           1398.52       0.01        \n",
            "\u001b[J59          0.163968    0.94256        0.365818       0.886133           1422.3        0.01        \n",
            "\u001b[J60          0.16541     0.942575       0.357          0.890234           1446.01       0.01        \n",
            "\u001b[J61          0.129435    0.955988       0.277052       0.915234           1473.42       0.001       \n",
            "\u001b[J62          0.101981    0.965434       0.284798       0.916406           1497.13       0.001       \n",
            "\u001b[J63          0.0953637   0.967285       0.279956       0.919727           1520.93       0.001       \n",
            "\u001b[J64          0.0911066   0.968171       0.28204        0.918359           1544.63       0.001       \n",
            "\u001b[J65          0.0853851   0.97037        0.28504        0.918945           1568.41       0.001       \n",
            "\u001b[J66          0.0800331   0.972101       0.287688       0.917969           1592.21       0.001       \n",
            "\u001b[J67          0.0761374   0.973202       0.29148        0.920117           1616.19       0.001       \n",
            "\u001b[J68          0.0756613   0.973699       0.299635       0.918945           1639.98       0.001       \n",
            "\u001b[J69          0.075577    0.97407        0.293845       0.918359           1663.68       0.001       \n",
            "\u001b[J70          0.0730666   0.974676       0.29563        0.920508           1687.47       0.001       \n",
            "\u001b[J71          0.070825    0.975516       0.295581       0.920313           1714.73       0.001       \n",
            "\u001b[J72          0.0710753   0.975697       0.29838        0.919336           1738.52       0.001       \n",
            "\u001b[J73          0.0705982   0.975142       0.298369       0.920508           1762.3        0.001       \n",
            "\u001b[J74          0.0667571   0.976562       0.299809       0.920508           1786.01       0.001       \n",
            "\u001b[J75          0.0642319   0.978427       0.300881       0.920898           1809.77       0.001       \n",
            "\u001b[J76          0.0640179   0.977742       0.304647       0.918359           1833.51       0.001       \n",
            "\u001b[J77          0.0629752   0.977761       0.299763       0.919336           1857.31       0.001       \n",
            "\u001b[J78          0.0586612   0.979523       0.306034       0.922461           1881.03       0.001       \n",
            "\u001b[J79          0.059752    0.979869       0.311227       0.921289           1904.82       0.001       \n",
            "\u001b[J80          0.0571715   0.980213       0.304607       0.920703           1928.51       0.001       \n",
            "\u001b[J81          0.0573339   0.980136       0.315108       0.92168            1956.06       0.001       \n",
            "\u001b[J82          0.0560348   0.979847       0.321934       0.916992           1979.87       0.001       \n",
            "\u001b[J83          0.0553193   0.980613       0.315378       0.914648           2003.58       0.001       \n",
            "\u001b[J84          0.0531816   0.98129        0.318977       0.919531           2027.34       0.001       \n",
            "\u001b[J85          0.0560367   0.98097        0.310993       0.919141           2051.02       0.001       \n",
            "\u001b[J86          0.0535048   0.981534       0.317829       0.920117           2075.04       0.001       \n",
            "\u001b[J87          0.0522188   0.981571       0.31144        0.920313           2098.73       0.001       \n",
            "\u001b[J88          0.0526632   0.982156       0.318594       0.920703           2122.46       0.001       \n",
            "\u001b[J89          0.0528096   0.981445       0.309017       0.92207            2146.21       0.001       \n",
            "\u001b[J90          0.0499371   0.982928       0.313269       0.920508           2169.92       0.001       \n",
            "\u001b[J91          0.0452565   0.985174       0.314806       0.919922           2195.33       0.0001      \n",
            "\u001b[J92          0.0474853   0.983129       0.309583       0.92168            2218.85       0.0001      \n",
            "\u001b[J93          0.044619    0.98493        0.310218       0.920898           2242.4        0.0001      \n",
            "\u001b[J94          0.0445662   0.984909       0.310751       0.921484           2265.88       0.0001      \n",
            "\u001b[J95          0.0434087   0.984996       0.308656       0.921289           2289.42       0.0001      \n",
            "\u001b[J96          0.0440052   0.984998       0.311906       0.921875           2312.88       0.0001      \n",
            "\u001b[J97          0.0435443   0.984908       0.311796       0.920313           2336.4        0.0001      \n",
            "\u001b[J98          0.0433985   0.985063       0.309969       0.920508           2360.13       0.0001      \n",
            "\u001b[J99          0.0423926   0.985955       0.311413       0.921289           2383.66       0.0001      \n",
            "\u001b[J100         0.0418836   0.985507       0.315966       0.919922           2407.22       0.0001      \n",
            "Test accuracy: 0.91742486\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "YkL06bZDMq6I"
      },
      "cell_type": "markdown",
      "source": [
        "先程のData augmentationなしの場合は90%程度だったテスト精度が，学習データにaugmentationを施すことでおよそ1.8%程度向上させられることが分かりました．\n",
        "\n",
        "ロスと精度のグラフを見てみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-ckf3ncLMq6J",
        "outputId": "15602a22-aaac-4ef4-8e69-fff8e9119a9a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/DeepCNN_cifar10_augmented_result/loss.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "H8mCPbI5Mq6L",
        "outputId": "ed39f78c-dcb7-474e-ab5f-dfd33154c12d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/DeepCNN_cifar10_augmented_result/accuracy.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\neGOH3++rr77K448/jslkYuHChXzzm9/s6/IlQxzVwS4iIiLdc9R2xYuIiEj3KdhFREQyiIJdREQk\ngyjYRUREMoiCXUREJIMo2EW6Yfny5dxwww19XYaIyEEp2EVERDLIUbukrMiXsXTpUv7+97+TSCQY\nNWoUV1xxBT/+8Y859dRT2bJlCwAPPvggJSUlvPXWW/z+97/H6XSSlZXFHXfcQUlJCevXr2fJkiXY\nbDby8vK4++67AWhpaeGGG26gvLycsrIyfve732EymfrydEVE0tRil4yzYcMG/vGPf/DUU0+xbNky\n3G437733Hnv37uW8887jT3/6EyeccAJ//OMfCYVC3HrrrTzyyCMsXbqUU089ld/+9rcA/OxnP+OO\nO+7gySefZMaMGbz99tsAbN++nTvuuIPly5ezbds2Nm3a1JenKyLSjlrsknFWr17Nnj17uPTSSwEI\nBoNUV1eTn5/PcccdB8D06dN54okn2LVrF4WFhZSWlgJwwgkn8Mwzz1BfX09TUxPHHHMMAN///veB\n1Bj7pEmTyMrKAqCkpITm5uYjfIYiIgenYJeMY7fbmTt3Lr/61a/S9+3bt4/zzjsvfdswDEwmU4cu\n9APvP9hqyxaLpcMxIiJHC3XFS8aZPn0677zzDoFAAICnnnqK2tpaGhsb2bx5M5DaSnTcuHGMGDGC\nuro69u/fD8DKlSuZMmUKHo+H/Px8NmzYAMAf//hHnnrqqb45IRGRblCLXTLOpEmTuPjii7nkkktw\nOBx4vV5OPPFESkpKWL58OXfddReGYfDAAw/gdDpZvHgx1113XXpP+MWLFwNw7733smTJEqxWK263\nm3vvvZfXXnutj89OROSLaXc3GRD27dvHd7/7Xd55552+LkVEpFepK15ERCSDqMUuIiKSQdRiFxER\nySAKdhERkQyiYBcREckgCnYREZEMomAXERHJIP8fUZXvajVDQMIAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Xz4qiWP2Mq6N"
      },
      "cell_type": "markdown",
      "source": [
        "## もっと簡単にData Augmentationしよう\n",
        "\n",
        "前述のようにデータセット内の各画像についていろいろな変換を行って擬似的にデータを増やすような操作をData Augmentationといいます．上では，オリジナルのデータセットクラスを作る方法を示すために変換の操作も`get_example()`内に書くという実装を行いましたが，実はもっと簡単にいろいろな変換をデータに対して行う方法があります．\n",
        "\n",
        "それは，`TransformDataset`クラスを使う方法です．`TransformDataset`は，元になるデータセットオブジェクトと，そこからサンプルしてきた各データ点に対して行いたい変換を関数の形で与えると，変換済みのデータを返してくれるようなデータセットオブジェクトに加工してくれる便利なクラスです．かんたんな使い方は以下です．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "nBly8lfhMq6N",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import TransformDataset\n",
        "\n",
        "train_val, test_dataset = cifar.get_cifar10()\n",
        "train_size = int(len(train_val) * 0.9)\n",
        "train_dataset, valid_dataset = split_dataset_random(train_val, train_size, seed=0)\n",
        "\n",
        "\n",
        "# 行いたい変換を関数の形で書く\n",
        "def transform(inputs):\n",
        "    x, t = inputs\n",
        "    x = x.transpose(1, 2, 0)\n",
        "    h, w, _ = x.shape\n",
        "    x_offset = np.random.randint(4)\n",
        "    y_offset = np.random.randint(4)\n",
        "    x = x[y_offset:y_offset + h - 4,\n",
        "          x_offset:x_offset + w - 4]\n",
        "    if np.random.rand() > 0.5:\n",
        "        x = np.fliplr(x)\n",
        "    x = x.transpose(2, 0, 1)\n",
        "    \n",
        "    return x, t\n",
        "\n",
        "\n",
        "# 各データをtransformにくぐらせたものを返すデータセットオブジェクト\n",
        "train_dataset = TransformDataset(train_dataset, transform)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "6Q0dLAW6Mq6O"
      },
      "cell_type": "markdown",
      "source": [
        "このようにすると，この新しい`train_dataset`は，上で自分でデータセットクラスごと書いたときと同じような変換を行った上でデータを返してくれるデータセットオブジェクトになります．"
      ]
    },
    {
      "metadata": {
        "id": "iJjZn9Q-V8m5",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### ChainerCVでいろいろな変換を簡単に行おう\n",
        "\n",
        "さて，上では画像に対してランダムクロップと，ランダムに左右反転というのをやりました．もっと色々な変換を行いたい場合，上記の`transform`関数に色々な処理を追加していけばよいことになりますが，毎回使いまわすような変換処理をそのたびに書くのは面倒です．何かいいライブラリとか無いのかな，となります．そこで[ChainerCV](http://chainercv.readthedocs.io/en/stable)[[Niitani 2017]](https://arxiv.org/abs/1708.08169)です！今年のACM MultimediaのOpen Source Software CompetitionにWebDNN[[Hidaka 2017]](https://dl.acm.org/citation.cfm?id=3129394)とともに出場していたChainerにComputer Vision向けの便利な機能を色々追加する補助パッケージ的なオープンソース・ソフトウェアです．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "_dJ1-rCrMq6P",
        "outputId": "bea65738-b215-47e7-ae89-b6205f3b200b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 326
        }
      },
      "cell_type": "code",
      "source": [
        "!pip install chainercv"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting chainercv\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/bb/1c/cee12630628d0acd4d6c5d7a3ba196a3aa079a863baa3dc74eb70d8494c5/chainercv-0.11.0.tar.gz (223kB)\n",
            "\u001b[K    100% |████████████████████████████████| 225kB 7.6MB/s \n",
            "\u001b[?25hRequirement already satisfied: chainer>=5.0 in /usr/local/lib/python3.6/dist-packages (from chainercv) (5.0.0)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.6/dist-packages (from chainercv) (4.0.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.6/dist-packages (from chainer>=5.0->chainercv) (3.0.10)\n",
            "Requirement already satisfied: protobuf>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from chainer>=5.0->chainercv) (3.6.1)\n",
            "Requirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from chainer>=5.0->chainercv) (1.14.6)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from chainer>=5.0->chainercv) (1.11.0)\n",
            "Requirement already satisfied: olefile in /usr/local/lib/python3.6/dist-packages (from Pillow->chainercv) (0.46)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.0.0->chainer>=5.0->chainercv) (40.6.2)\n",
            "Building wheels for collected packages: chainercv\n",
            "  Running setup.py bdist_wheel for chainercv ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \bdone\n",
            "\u001b[?25h  Stored in directory: /root/.cache/pip/wheels/95/24/5a/1611db416857b5e092962bc22a70722315881e03970c7fa966\n",
            "Successfully built chainercv\n",
            "Installing collected packages: chainercv\n",
            "Successfully installed chainercv-0.11.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "jsdEfeirMq6R"
      },
      "cell_type": "markdown",
      "source": [
        "[ChainerCV](http://chainercv.readthedocs.io/en/stable)には，画像に対する様々な変換があらかじめ用意されています．\n",
        "\n",
        "- [ChainerCVで使える画像変換一覧](http://chainercv.readthedocs.io/en/stable/reference/transforms.html#image)\n",
        "\n",
        "そのため，上でNumPyを使ってごにょごにょ書いていたランダムクロップやランダム左右反転は，`chainercv.transforms`モジュールを使うと，それぞれ以下のように1行で書くことができます：\n",
        "\n",
        "```python\n",
        "x = transforms.random_crop(x, (28, 28))  # ランダムクロップ\n",
        "x = chainercv.transforms.random_flip(x)  # ランダム左右反転\n",
        "```\n",
        "\n",
        "`chainercv.transforms`モジュールを使って，`transform`関数をアップデートしてみましょう．ちなみに，`get_cifar10()`で得られるデータセットでは，デフォルトで画像の画素値の範囲が`[0, 1]`にスケールされています．しかし，`get_cifar10()`に`scale=255.`を渡しておくと，値の範囲をもともとの`[0, 255]`のままにできます．今回`transform`の中で行う処理は，以下の5つです：\n",
        "\n",
        "1. PCA lighting: これは大雑把に言えば，少しだけ色味を変えるような変換です\n",
        "2. Standardization: 訓練用データセット全体からチャンネルごとの画素値の平均・標準偏差を求めて標準化をします\n",
        "3. Random flip: ランダムに画像の左右を反転します\n",
        "4. Random expand: `[1, 1.5]`からランダムに決めた大きさの黒いキャンバスを作り，その中のランダムな位置へ画像を配置します\n",
        "5. Random crop: `(28, 28)`の大きさの領域をランダムにクロップします"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "TbDNke8ZMq6S",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from functools import partial\n",
        "from chainercv import transforms\n",
        "\n",
        "train_val, test_dataset = cifar.get_cifar10(scale=255.)\n",
        "train_size = int(len(train_val) * 0.9)\n",
        "train_dataset, valid_dataset = split_dataset_random(train_val, train_size, seed=0)\n",
        "\n",
        "mean = np.mean([x for x, _ in train_dataset], axis=(0, 2, 3))\n",
        "std = np.std([x for x, _ in train_dataset], axis=(0, 2, 3))\n",
        "\n",
        "\n",
        "def transform(inputs, train=True):\n",
        "    img, label = inputs\n",
        "    img = img.copy()\n",
        "    \n",
        "    # Color augmentation\n",
        "    if train:\n",
        "        img = transforms.pca_lighting(img, 76.5)\n",
        "        \n",
        "    # Standardization\n",
        "    img -= mean[:, None, None]\n",
        "    img /= std[:, None, None]\n",
        "    \n",
        "    # Random flip & crop\n",
        "    if train:\n",
        "        img = transforms.random_flip(img, x_random=True)\n",
        "        img = transforms.random_expand(img, max_ratio=1.5)\n",
        "        img = transforms.random_crop(img, (28, 28))\n",
        "        \n",
        "    return img, label\n",
        "\n",
        "train_dataset = TransformDataset(train_dataset, partial(transform, train=True))\n",
        "valid_dataset = TransformDataset(valid_dataset, partial(transform, train=False))\n",
        "test_dataset = TransformDataset(test_dataset, partial(transform, train=False))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "iNQZOwbAMq6S"
      },
      "cell_type": "markdown",
      "source": [
        "ちなみに，`pca_lighting`は，大雑把にいうと色味を微妙に変えた画像を作ってくれる関数です．\n",
        "\n",
        "では，standardizationとChainerCVによるPCA Lightingを追加した`TransformDataset`を使って学習をしてみましょう．\n",
        "\n",
        "ここでもこれまでと同様の理由で，90エポックまで学習させておいたsnapshotを用います．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "jh6J1f48Mq6T",
        "outputId": "ca4dd657-e783-49c2-f33b-a3d03f42b6a5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2043
        }
      },
      "cell_type": "code",
      "source": [
        "!wget https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_augmented2_snapshot_epoch_90.npz\n",
        "\n",
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, train_dataset=train_dataset, valid_dataset=valid_dataset, test_dataset=test_dataset, postfix='augmented2_', base_lr=0.1, lr_decay=(30, 'epoch'), snapshot='DeepCNN_cifar10_augmented2_snapshot_epoch_90.npz')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2018-11-22 16:47:06--  https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_augmented2_snapshot_epoch_90.npz\n",
            "Resolving github.com (github.com)... 192.30.253.113, 192.30.253.112\n",
            "Connecting to github.com (github.com)|192.30.253.113|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/5064a880-eeb7-11e8-8e8b-fddbe76ecd56?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181122%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181122T164707Z&X-Amz-Expires=300&X-Amz-Signature=7922e1c17dbdd98f2bd5ef8ca94213d368a9f7e26c2c0e384b9003029ca765f9&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_augmented2_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream [following]\n",
            "--2018-11-22 16:47:07--  https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/5064a880-eeb7-11e8-8e8b-fddbe76ecd56?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181122%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181122T164707Z&X-Amz-Expires=300&X-Amz-Signature=7922e1c17dbdd98f2bd5ef8ca94213d368a9f7e26c2c0e384b9003029ca765f9&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_augmented2_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream\n",
            "Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.216.162.19\n",
            "Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.162.19|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 56734002 (54M) [application/octet-stream]\n",
            "Saving to: ‘DeepCNN_cifar10_augmented2_snapshot_epoch_90.npz’\n",
            "\n",
            "DeepCNN_cifar10_aug 100%[===================>]  54.11M  14.4MB/s    in 4.9s    \n",
            "\n",
            "2018-11-22 16:47:13 (11.0 MB/s) - ‘DeepCNN_cifar10_augmented2_snapshot_epoch_90.npz’ saved [56734002/56734002]\n",
            "\n",
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           2.64248     0.137296       2.15132        0.175              23.5716       0.1         \n",
            "\u001b[J2           2.09025     0.202814       1.90949        0.248633           47.2547       0.1         \n",
            "\u001b[J3           1.92989     0.251647       1.80744        0.313867           70.8962       0.1         \n",
            "\u001b[J4           1.82033     0.296742       1.75358        0.319727           94.6262       0.1         \n",
            "\u001b[J5           1.70069     0.350717       1.59837        0.397266           118.252       0.1         \n",
            "\u001b[J6           1.56064     0.418435       1.6835         0.418359           141.967       0.1         \n",
            "\u001b[J7           1.45132     0.473691       1.30451        0.528711           165.613       0.1         \n",
            "\u001b[J8           1.33843     0.523815       2.81471        0.372656           189.382       0.1         \n",
            "\u001b[J9           1.27017     0.556019       1.61386        0.499023           213.846       0.1         \n",
            "\u001b[J10          1.20204     0.579972       1.46257        0.519141           237.532       0.1         \n",
            "\u001b[J11          1.14896     0.601252       1.1028         0.623633           265.125       0.1         \n",
            "\u001b[J12          1.10957     0.614428       1.17823        0.594141           288.775       0.1         \n",
            "\u001b[J13          1.07055     0.635387       1.00013        0.670898           312.476       0.1         \n",
            "\u001b[J14          1.04187     0.647058       1.07628        0.642383           336.226       0.1         \n",
            "\u001b[J15          1.00359     0.661066       1.00439        0.655859           360.038       0.1         \n",
            "\u001b[J16          0.971513    0.675503       0.8598         0.723828           383.802       0.1         \n",
            "\u001b[J17          0.941225    0.686301       1.09454        0.661328           407.665       0.1         \n",
            "\u001b[J18          0.917967    0.694869       0.998599       0.681055           431.468       0.1         \n",
            "\u001b[J19          0.905397    0.699586       0.811614       0.738281           455.224       0.1         \n",
            "\u001b[J20          0.874732    0.706188       0.714926       0.762695           479.061       0.1         \n",
            "\u001b[J21          0.86753     0.712607       0.850176       0.738477           506.629       0.1         \n",
            "\u001b[J22          0.858491    0.714844       0.95919        0.692187           530.459       0.1         \n",
            "\u001b[J23          0.845307    0.717637       1.12914        0.668164           554.185       0.1         \n",
            "\u001b[J24          0.827677    0.72785        0.827821       0.746484           577.974       0.1         \n",
            "\u001b[J25          0.821103    0.728715       0.7663         0.741602           601.76        0.1         \n",
            "\u001b[J26          0.816583    0.728321       0.763894       0.757812           625.472       0.1         \n",
            "\u001b[J27          0.805109    0.735596       0.74157        0.754492           649.375       0.1         \n",
            "\u001b[J28          0.809963    0.734152       0.742951       0.7625             673.099       0.1         \n",
            "\u001b[J29          0.792127    0.737149       0.692472       0.773633           696.895       0.1         \n",
            "\u001b[J30          0.783124    0.741965       1.02244        0.702734           720.621       0.1         \n",
            "\u001b[J31          0.604456    0.795898       0.394226       0.868359           748.179       0.01        \n",
            "\u001b[J32          0.523254    0.822227       0.379255       0.873242           771.92        0.01        \n",
            "\u001b[J33          0.502693    0.830078       0.360393       0.877734           795.747       0.01        \n",
            "\u001b[J34          0.484705    0.835627       0.351212       0.884766           819.578       0.01        \n",
            "\u001b[J35          0.465001    0.842192       0.348862       0.882031           843.291       0.01        \n",
            "\u001b[J36          0.45372     0.846613       0.339081       0.885742           867.053       0.01        \n",
            "\u001b[J37          0.450468    0.846043       0.335244       0.887695           890.763       0.01        \n",
            "\u001b[J38          0.439256    0.848411       0.331884       0.889453           914.524       0.01        \n",
            "\u001b[J39          0.430965    0.852475       0.324836       0.895312           938.351       0.01        \n",
            "\u001b[J40          0.424651    0.855447       0.370822       0.881641           962.135       0.01        \n",
            "\u001b[J41          0.418223    0.857          0.328078       0.89082            989.723       0.01        \n",
            "\u001b[J42          0.409156    0.860332       0.334291       0.888672           1013.41       0.01        \n",
            "\u001b[J43          0.410969    0.860574       0.338266       0.888281           1037.14       0.01        \n",
            "\u001b[J44          0.397083    0.862469       0.337938       0.889258           1060.81       0.01        \n",
            "\u001b[J45          0.390805    0.8661         0.31488        0.900586           1084.56       0.01        \n",
            "\u001b[J46          0.39124     0.866008       0.324671       0.893945           1108.24       0.01        \n",
            "\u001b[J47          0.390007    0.865101       0.320954       0.895117           1131.96       0.01        \n",
            "\u001b[J48          0.383439    0.868367       0.355809       0.890625           1155.62       0.01        \n",
            "\u001b[J49          0.380758    0.87065        0.314927       0.899805           1179.36       0.01        \n",
            "\u001b[J50          0.379198    0.870716       0.302073       0.903125           1203.09       0.01        \n",
            "\u001b[J51          0.371325    0.873019       0.317537       0.899805           1230.61       0.01        \n",
            "\u001b[J52          0.368561    0.874578       0.338393       0.891016           1254.34       0.01        \n",
            "\u001b[J53          0.366614    0.872975       0.318233       0.89707            1278.2        0.01        \n",
            "\u001b[J54          0.366082    0.874667       0.328654       0.892187           1301.94       0.01        \n",
            "\u001b[J55          0.365454    0.873331       0.311355       0.902148           1325.61       0.01        \n",
            "\u001b[J56          0.357191    0.876509       0.330824       0.895898           1349.36       0.01        \n",
            "\u001b[J57          0.361274    0.874667       0.320739       0.897461           1373.1        0.01        \n",
            "\u001b[J58          0.354885    0.878339       0.308104       0.901172           1396.78       0.01        \n",
            "\u001b[J59          0.359033    0.876931       0.316534       0.900586           1420.55       0.01        \n",
            "\u001b[J60          0.356422    0.876291       0.366406       0.888281           1444.25       0.01        \n",
            "\u001b[J61          0.314513    0.891513       0.261128       0.914062           1471.67       0.001       \n",
            "\u001b[J62          0.275813    0.905159       0.257487       0.916406           1495.37       0.001       \n",
            "\u001b[J63          0.268649    0.907804       0.253204       0.918164           1519.12       0.001       \n",
            "\u001b[J64          0.264412    0.908298       0.256485       0.918555           1542.84       0.001       \n",
            "\u001b[J65          0.261826    0.910511       0.253851       0.917773           1566.66       0.001       \n",
            "\u001b[J66          0.255704    0.911998       0.257955       0.916602           1590.48       0.001       \n",
            "\u001b[J67          0.25836     0.909566       0.256463       0.919141           1614.22       0.001       \n",
            "\u001b[J68          0.251792    0.912753       0.254393       0.920117           1638.04       0.001       \n",
            "\u001b[J69          0.251154    0.914508       0.25251        0.920508           1661.81       0.001       \n",
            "\u001b[J70          0.24735     0.91464        0.255754       0.91875            1685.83       0.001       \n",
            "\u001b[J71          0.241314    0.917268       0.253207       0.921094           1713.35       0.001       \n",
            "\u001b[J72          0.246059    0.914617       0.257668       0.920508           1737.18       0.001       \n",
            "\u001b[J73          0.238097    0.918213       0.257092       0.919727           1761.02       0.001       \n",
            "\u001b[J74          0.235832    0.918981       0.251519       0.919922           1784.77       0.001       \n",
            "\u001b[J75          0.236254    0.918857       0.253711       0.919531           1808.58       0.001       \n",
            "\u001b[J76          0.235273    0.917646       0.249922       0.920117           1832.36       0.001       \n",
            "\u001b[J77          0.233553    0.918635       0.251188       0.921094           1856.13       0.001       \n",
            "\u001b[J78          0.229216    0.920829       0.256883       0.921484           1879.92       0.001       \n",
            "\u001b[J79          0.231176    0.919877       0.254759       0.92207            1903.75       0.001       \n",
            "\u001b[J80          0.227571    0.921007       0.251693       0.920508           1927.51       0.001       \n",
            "\u001b[J81          0.229313    0.92041        0.257421       0.920508           1955.13       0.001       \n",
            "\u001b[J82          0.225018    0.922896       0.255896       0.919922           1978.98       0.001       \n",
            "\u001b[J83          0.223251    0.923478       0.25848        0.918555           2002.75       0.001       \n",
            "\u001b[J84          0.221238    0.924294       0.259179       0.920703           2026.56       0.001       \n",
            "\u001b[J85          0.222084    0.923411       0.251648       0.920313           2050.3        0.001       \n",
            "\u001b[J86          0.221973    0.924339       0.252463       0.920898           2074.11       0.001       \n",
            "\u001b[J87          0.217851    0.925147       0.252802       0.920898           2097.85       0.001       \n",
            "\u001b[J88          0.215969    0.925138       0.255438       0.921094           2121.65       0.001       \n",
            "\u001b[J89          0.217307    0.92294        0.253423       0.920313           2145.48       0.001       \n",
            "\u001b[J90          0.217241    0.925058       0.254931       0.919922           2169.54       0.001       \n",
            "\u001b[J91          0.210564    0.927912       0.24998        0.924023           2194.24       0.0001      \n",
            "\u001b[J92          0.206956    0.928308       0.248886       0.923633           2217.88       0.0001      \n",
            "\u001b[J93          0.206322    0.929177       0.247684       0.922852           2241.71       0.0001      \n",
            "\u001b[J94          0.19997     0.931134       0.249033       0.923242           2265.25       0.0001      \n",
            "\u001b[J95          0.199342    0.93113        0.250526       0.922656           2288.85       0.0001      \n",
            "\u001b[J96          0.200937    0.930066       0.249495       0.921484           2312.42       0.0001      \n",
            "\u001b[J97          0.20239     0.930775       0.248395       0.922266           2336.04       0.0001      \n",
            "\u001b[J98          0.201698    0.931086       0.252069       0.921484           2359.69       0.0001      \n",
            "\u001b[J99          0.199579    0.929287       0.249089       0.921875           2383.25       0.0001      \n",
            "\u001b[J100         0.201134    0.931064       0.253413       0.923047           2407.09       0.0001      \n",
            "Test accuracy: 0.9247429\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "HsuPDoGsMq6V"
      },
      "cell_type": "markdown",
      "source": [
        "わずかに精度が向上しました．他にもネットワークにResNetと呼ばれる有名なアーキテクチャを採用するなど，簡単に試せる改善方法がいくつかあります．ぜひご自分で色々と試してみてください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WD1oaVYTMq6Z"
      },
      "cell_type": "markdown",
      "source": [
        "## 参考文献\n",
        "\n",
        "[Tokui 2015] Tokui, S., Oono, K., Hido, S. and Clayton, J., Chainer: a Next-Generation Open Source Framework for Deep Learning, Proceedings of Workshop on Machine Learning Systems(LearningSys) in The Twenty-ninth Annual Conference on Neural Information Processing Systems (NIPS), (2015)\n",
        "\n",
        "[Niitani 2017] Yusuke Niitani, Toru Ogawa, Shunta Saito, Masaki Saito, \"ChainerCV: a Library for Deep Learning in Computer Vision\", ACM Multimedia (ACMMM), Open Source Software Competition, 2017\n",
        "\n",
        "[Hidaka 2017] Masatoshi Hidaka, Yuichiro Kikura, Yoshitaka Ushiku, Tatsuya Harada. WebDNN: Fastest DNN Execution Framework on Web Browser. ACM International Conference on Multimedia (ACMMM), Open Source Software Competition, pp.1213-1216, 2017."
      ]
    }
  ]
}