{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Introduction_to_Chainer",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [
        "71RNU5KmMq31",
        "3sFOwliOMq4Q",
        "VPRotZdNMq4V",
        "BywdNhUSMq4s",
        "D2tRnyVYMq4y",
        "WD1oaVYTMq6Z"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mitmul/medical-ai-course-materials/blob/master/notebooks/Introduction_to_Chainer.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "n0_KFOv4Mq3N"
      },
      "cell_type": "markdown",
      "source": [
        "# Deep Learningフレームワークの基礎\n",
        "\n",
        "Chainerは、現在の様々なDeep Learningフレームワーク（TensorFlow, PyTorch, etc.）で採用されている主要なニューラルネットワークの記法となっているDefine-by-Runというアイデアを基本としたAPIを初めに採用したDeep Learningフレームワークで、2015年からPreferred Networks社が開発を続けています。ここでは、柔軟性と直感的であることを特徴とするこのChainerというフレームワークの基本的な使い方をマスターしていきましょう。"
      ]
    },
    {
      "metadata": {
        "id": "bIrdN3L9reS0",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## 環境構築\n",
        "\n",
        "まずはColab上で以下のセルを実行し、最新版のChainerをインストールしましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-IPVDlAAMtK1",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!curl https://colab.chainer.org/install | sh -\n",
        "!apt-get install -y graphviz"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "fzldShWcMq3O"
      },
      "cell_type": "markdown",
      "source": [
        "もしColab上ではなく別な環境にChainerをインストールする場合にも、`pip`を使って簡単に行うことができます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "1reusuyGMq3P",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!pip install chainer"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "THvtsN5qMq3T"
      },
      "cell_type": "markdown",
      "source": [
        "で完了です。ただ、これだけではGPUは使えません。GPUを使うためには、**別途CuPyをインストールする必要があります。**ただCuPyのインストールもとても簡単です。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "eJeLnbIqMq3U",
        "scrolled": true,
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!pip install cupy-cuda80"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "YLbP1BkTMq3W"
      },
      "cell_type": "markdown",
      "source": [
        "以上です。Google Colabの環境がCUDA8.0の環境であったため`cupy-cuda80`をインストールしていますが、この末尾の2つの数字はCUDAのバージョンを表しています。お使いの環境のCUDAバージョンに合わせて、\n",
        "\n",
        "- `cupy-cuda80`（CUDA 8.0用）\n",
        "- `cupy-cuda90`（CUDA9.0用）\n",
        "- `cupy-cuda91`（CUDA9.1用）\n",
        "\n",
        "の3つから適切なものを選択して`pip install`してください。CuPy v4.0.0からwheelでのインストールが可能となりましたので、これにより自動的にcuDNNやNCCL2といったライブラリもインストールされ、CuPyから使用可能になります。（cuDNNを独立に取ってくる方法を注に書いておきます[^cudnnenv]）\n",
        "\n",
        "また、Chainer v4.0.0から`chainer.print_runtime_info()`という便利なメソッドが追加されました。以下のコマンドをターミナルで実行し、ChainerやCuPyが正しくインストールされたかを確認してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "pNPcxcV1Mq3X",
        "outputId": "c64cb336-7b04-403b-c911-e49c44d5f729",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "cell_type": "code",
      "source": [
        "!python -c 'import chainer; chainer.print_runtime_info()'"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Platform: Linux-4.4.0-116-generic-x86_64-with-debian-stretch-sid\r\n",
            "Chainer: 5.0.0rc1\r\n",
            "NumPy: 1.15.2\r\n",
            "CuPy:\r\n",
            "  CuPy Version          : 5.0.0rc1\r\n",
            "  CUDA Root             : /usr/local/cuda\r\n",
            "  CUDA Build Version    : 9020\r\n",
            "  CUDA Driver Version   : 9020\r\n",
            "  CUDA Runtime Version  : 9020\r\n",
            "  cuDNN Build Version   : 7201\r\n",
            "  cuDNN Version         : 7201\r\n",
            "  NCCL Build Version    : 2213\r\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "8GFokOwXMq3b"
      },
      "cell_type": "markdown",
      "source": [
        "うまくできていますね。以下のチュートリアルでは、matplotlibを可視化に使いますので、これも同時にインストールしておきましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "AGHezHvdMq3b",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!pip install matplotlib"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "BEXrvPLGMq3e"
      },
      "cell_type": "markdown",
      "source": [
        "また、計算グラフの可視化にGraphvizを使いますので、こちらもインストールしておいてください。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Cp1v4ygDMq3f"
      },
      "cell_type": "markdown",
      "source": [
        "## 学習ループを書いてみよう\n",
        "\n",
        "ここでは、有名な手書き数字のデータセットMNISTを使って、画像を10クラスに分類するネットワークを書いて訓練してみます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "pON7OjrkMq3f"
      },
      "cell_type": "markdown",
      "source": [
        "### データセットの準備\n",
        "\n",
        "教師あり学習の場合、**データセットは「入力データ」と「それと対になるラベルデータ」を返すオブジェクトである必要があります。**\n",
        "ChainerにはMNISTやCIFAR10/100のようなよく用いられるデータセットに対して、データをダウンロードしてくるところからそのような機能をもったオブジェクトを作るところまで自動的にやってくれる便利なメソッドがあるので、ここではひとまずこれを用いましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "co0qbD2dMq3f",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import mnist\n",
        "\n",
        "# データセットがダウンロード済みでなければ、ダウンロードも行う\n",
        "train_val, test = mnist.get_mnist(withlabel=True, ndim=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "k6phOMcvMq3j"
      },
      "cell_type": "markdown",
      "source": [
        "データセットオブジェクト自体は準備ができました。これは、例えば `train_val[i]` などとすると**i番目の `(data, label)` というタプルを返すリスト** と同様のものになっています（**実際ただのPythonリストもChainerのデータセットオブジェクトとして使えます**）。では0番目のデータとラベルを取り出して、表示してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "uylrRDSfMq3k",
        "outputId": "6f03f3a0-93bc-4cd6-8f77-5b98cd9e76ab",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "cell_type": "code",
      "source": [
        "# matplotlibを使ったグラフ描画結果がnotebook内に表示されるようにします。\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# データの例示\n",
        "x, t = train_val[0]  # 0番目の (data, label) を取り出す\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.axis('off')\n",
        "plt.show()\n",
        "print('label:', t)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "label: 5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "oTy7XDwMMq3o"
      },
      "cell_type": "markdown",
      "source": [
        "### Validation用データセットを作る\n",
        "\n",
        "次に、上で作成した`train_val`データセットを、Training用のデータセットとValidation用のデータセットに分割しましょう。これもChainerの便利な関数を使えば簡単にできます。元々60000個のデータが入っている`train`データセット50000個のデータをTraining用に、残りの10000個をValidation用にしてみます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xeCk_TCcMq3o",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import split_dataset_random\n",
        "\n",
        "train, valid = split_dataset_random(train_val, 50000, seed=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kJrPx08DMq3q"
      },
      "cell_type": "markdown",
      "source": [
        "これだけで元々の`train_val`を、ランダムに選んだ50000個の`train`データセットと`valid`データセットに分けることができました。何度も実行する際に異なる分け方になってしまわないよう、第3引数の`seed`を設定しておくことをオススメします。それでは、それぞれのデータセットの中に入っているデータの数を確認してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "TfT0WBQfMq3r",
        "outputId": "21598dfb-2398-4313-e877-90e31c8cd223",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        }
      },
      "cell_type": "code",
      "source": [
        "print('Training dataset size:', len(train))\n",
        "print('Validation dataset size:', len(valid))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training dataset size: 50000\n",
            "Validation dataset size: 10000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "IbZLLj6ZMq3v"
      },
      "cell_type": "markdown",
      "source": [
        "### Iteratorの作成\n",
        "\n",
        "データセットの準備は完了しましたが、このままネットワークの学習に使うのは少し面倒です。なぜなら、ネットワークのパラメータ最適化手法として広く用いられているStochastic Gradient Descent (SGD)という手法では、一般的にいくつかのデータを束ねた**ミニバッチ**と呼ばれる単位でネットワークにデータを渡し、それに対する予測を作って、ラベルと比較するということを行います。そのため、**バッチサイズ分だけデータとラベルを束ねる作業が必要です。**\n",
        "\n",
        "そこで、**データセットから決まった数のデータとラベルを取得し、それらを束ねてミニバッチを作ってくれる機能を持った`Iterator`を使いましょう。**`Iterator`は、先程作ったデータセットオブジェクトを渡して初期化してやったあとは、`next()`メソッドで新しいミニバッチを返してくれます。内部ではデータセットを何周なめたか（`epoch`）などの情報がどうように記録されているおり、学習ループを書いていく際に便利です。\n",
        "\n",
        "データセットオブジェクトからイテレータを作るには、以下のようにします。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "cZdvCRhxMq3w",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import iterators\n",
        "\n",
        "batchsize = 128\n",
        "\n",
        "train_iter = iterators.SerialIterator(train, batchsize)\n",
        "valid_iter = iterators.SerialIterator(\n",
        "    valid, batchsize, repeat=False, shuffle=False)\n",
        "test_iter = iterators.SerialIterator(\n",
        "    test, batchsize, repeat=False, shuffle=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "elxQ9EGEMq30"
      },
      "cell_type": "markdown",
      "source": [
        "ここでは、学習に用いるデータセット用のイテレータ（`train_iter`）と、検証用のデータセット用のイテレータ（`valid_iter`）、および学習したネットワークの評価に用いるテストデータセット用のイテレータ（`test_iter`）の計3つを作成しています。ここで、`batchsize = 128`としているので、作成した3つの`Iterator`は、例えば`train_iter.next()`などとすると128枚の数字画像データを一括りにして返してくれます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "71RNU5KmMq31"
      },
      "cell_type": "markdown",
      "source": [
        "#### NOTE: `SerialIterator`について\n",
        "\n",
        "Chainerがいくつか用意している`Iterator`の一種である`SerialIterator`は、データセットの中のデータを順番に取り出してくる最もシンプルな`Iterator`です。コンストラクタの引数にデータセットオブジェクトと、バッチサイズを取ります。このとき、渡したデータセットオブジェクトから、何周も何周もデータを繰り返し読み出す必要がある場合は`repeat`引数を`True`とし、1周が終わったらそれ以上データを取り出したくない場合はこれを`False`とします。これは、主にvalidation用のデータセットに対して使うフラグです。デフォルトでは、`True`になっています。また、`shuffle`引数に`True`を渡すと、データセットから取り出されてくるデータの順番をエポックごとにランダムに変更します。`SerialIterator`の他にも、マルチプロセスで高速にデータを処理できるようにした`MultiprocessIterator`や`MultithreadIterator`など、複数の`Iterator`が用意されています。詳しくは以下を見てください。\n",
        "\n",
        "- [Chainerで使えるIterator一覧](https://docs.chainer.org/en/stable/reference/iterators.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "PX0GJaWLMq32"
      },
      "cell_type": "markdown",
      "source": [
        "### ネットワークの定義\n",
        "\n",
        "では、学習させるネットワークを定義してみましょう。今回は、全結合層のみからなる多層パーセプトロンを作ってみます。中間層のユニット数は適当に100とし、今回は10クラス分類をしたいので、出力ユニット数は10とします。今回用いるMNISTデータセットは0〜9までの数字のいずれかを意味する10種のラベルを持つためです。では、ネットワークを定義するために必要な`Link`, `Function`, そして`Chain`について、簡単にここで説明を行います。\n",
        "\n",
        "#### LinkとFunction\n",
        "\n",
        "Chainerでは、ニューラルネットワークの各層を、`Link`と`Function`に区別します。\n",
        "\n",
        "- **`Link`は、パラメータを持つ関数です。**\n",
        "- **`Function`は、パラメータを持たない関数です。**\n",
        "\n",
        "これらを組み合わせてネットワークを記述します。パラメータを持つ層は、`chainer.links`モジュール以下にたくさん用意されています。パラメータを持たない層は、`chainer.functions`モジュール以下にたくさん用意されています。これらに簡単にアクセスするために、\n",
        "\n",
        "```\n",
        "import chainer.links as L\n",
        "import chainer.functions as F\n",
        "```\n",
        "\n",
        "と別名を与えて、`L.Convolution2D(...)`や`F.relu(...)`のように用いる慣習がありますが、特にこれが決まった書き方というわけではありません。\n",
        "\n",
        "#### Chain\n",
        "\n",
        "`Chain`は、**パラメータを持つ層（`Link`）をまとめておくためのクラス**です。パラメータを持つということは、基本的にネットワークの学習の際にそれらを更新していく必要があるということです（更新されないパラメータを持たせることもできます）。Chainerでは、モデルのパラメータの更新は、`Optimizer`という機能が担います。その際、更新すべき全てのパラメータを簡単に発見できるように、`Chain`で一箇所にまとめておきます。そうすると、`Chain.params()`メソッドを使って**更新されるパラメータ一覧が簡単に取得できます。**\n",
        "\n",
        "#### Chainを継承してネットワークを定義しよう\n",
        "\n",
        "Chainerでは、ネットワークは`Chain`クラスを継承したクラスとして定義されることが一般的です。その場合、そのクラスのコンストラクタで、`self.init_scope()`で作られる`with`コンテキストを作り、その中でネットワークに登場する`Link`をプロパティとして登録しておきます。こうすると、自動的に`Optimizer`が最適化対象のパラメータを持つ層だな、と捉えてくれます。\n",
        "\n",
        "もう一つ、一般的なのは、ネットワークの前進計算（データを渡して、出力を返す）を、`__call__`メソッドに書いておくという方法です。こうすると、ネットワーククラスをinstantiateして作ったオブジェクトを、関数のようにして使うことができます（例：`output = net(data)`）。\n",
        "\n",
        "#### GPUで実行するには\n",
        "\n",
        "`Chain`クラスは`to_gpu`メソッドを持ち、この引数にGPU IDを指定すると、指定したGPU IDのメモリ上にネットワークの全パラメータを転送します。こうしておくと、前進計算も学習の際のパラメータ更新なども全部GPU上で行われるようになります。GPU IDとして-1を使うと、すなわちこれはCPUを意味します。\n",
        "\n",
        "#### 同じ結果を保証したい\n",
        "\n",
        "ネットワークを書き始める前に、まずは乱数シードを固定して、本記事とほぼ同様の結果が再現できるようにしておきましょう。（cuDNNが有効になっている環境下でより厳密に計算結果の再現性を保証したい場合は、`chainer.config.cudnn_deterministic`というConfiguringオプションについて知る必要があります。こちらのドキュメントを参照してください：[chainer.config.cudnn_deterministic](https://docs.chainer.org/en/stable/reference/configuration.html?highlight=chainer.config.cudnn_deterministic)。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "5JecdGUXMq32",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import random\n",
        "import numpy\n",
        "import chainer\n",
        "\n",
        "def reset_seed(seed=0):\n",
        "    random.seed(seed)\n",
        "    numpy.random.seed(seed)\n",
        "    if chainer.cuda.available:\n",
        "        chainer.cuda.cupy.random.seed(seed)\n",
        "        \n",
        "reset_seed(0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "G_HvOMluMq37"
      },
      "cell_type": "markdown",
      "source": [
        "#### ネットワークを表すコード\n",
        "\n",
        "いよいよネットワークを書いてみます！"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "VQ-6GuZNMq3_",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import chainer\n",
        "import chainer.links as L\n",
        "import chainer.functions as F\n",
        "\n",
        "class MLP(chainer.Chain):\n",
        "\n",
        "    def __init__(self, n_mid_units=100, n_out=10):\n",
        "        super(MLP, self).__init__()\n",
        "        \n",
        "        # パラメータを持つ層の登録\n",
        "        with self.init_scope():\n",
        "            self.l1 = L.Linear(None, n_mid_units)\n",
        "            self.l2 = L.Linear(n_mid_units, n_mid_units)\n",
        "            self.l3 = L.Linear(n_mid_units, n_out)\n",
        "\n",
        "    def __call__(self, x):\n",
        "        # データを受け取った際のforward計算を書く\n",
        "        h1 = F.relu(self.l1(x))\n",
        "        h2 = F.relu(self.l2(h1))\n",
        "        return self.l3(h2)\n",
        "\n",
        "gpu_id = 0  # CPUを用いる場合は、この値を-1にしてください\n",
        "\n",
        "net = MLP()\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    net.to_gpu(gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "BnYIri8AMq4C"
      },
      "cell_type": "markdown",
      "source": [
        "できました！疑問点はありませんか？ちなみに、Chainerにはたくさんの学習可能なレイヤやパラメータを持たないレイヤが用意されています。ぜひ一度以下の一覧のページを見てみましょう。\n",
        "\n",
        "- [Chainerで使える関数(`Function`)一覧](https://docs.chainer.org/en/stable/reference/functions.html)\n",
        "- [Chainerで学習できるレイヤ(`Link`)一覧](https://docs.chainer.org/en/stable/reference/links.html)\n",
        "\n",
        "`Link`一覧には、ニューラルネットワークによく用いられる全結合層や畳み込み層、LSTMなどや、ReLUなどの活性化関数などなどだけでなく、有名なネットワーク全体も`Link`として載っています。ResNetや、VGGなどです。また、`Function`一覧には、画像の大きさをresizeしたり、サイン・コサインのような関数を始め、いろいろなネットワークの要素として使える関数が載っています。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qIN7jkqPMq4C"
      },
      "cell_type": "markdown",
      "source": [
        "##### NOTE\n",
        "\n",
        "上のネットワーク定義で、`L.Linear`は全結合層を意味しますが、最初のLinear層は第一引数に`None`が渡されています。これは、実行時に、つまり**データがその層に入力された瞬間、必要な数の入力側ユニット数を自動的に計算する**ということを意味します。ネットワークが最初に計算を行う際に、初めて `(n_input)` $\\times$ `n_mid_units` の大きさの行列を作成し、それを学習対象とするパラメータとして保持します。これは後々、畳み込み層を全結合層の前に配置する際などに便利な機能です。\n",
        "\n",
        "様々な`Link`は、それぞれ学習対象となるパラメータを保持しています。それらの値は、NumPyの配列として簡単に取り出して見ることができます。例えば、上のモデル`MLP`は`l1`という名前の全結合層が登録されています。この全結合層は重み行列`W`とバイアス`b`という2つのパラメータを持ちます。これらには外から以下のようにしてアクセスすることができます："
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "bn8mqvauMq4D",
        "outputId": "c4e8a0a4-1345-41b7-d31a-11537f3ff176",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 145
        }
      },
      "cell_type": "code",
      "source": [
        "print('1つ目の全結合相のバイアスパラメータの形は、', net.l1.b.shape)\n",
        "print('初期化直後のその値は、', net.l1.b.array)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1つ目の全結合相のバイアスパラメータの形は、 (100,)\n",
            "初期化直後のその値は、 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0.]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "-ExaLiUFMq4H"
      },
      "cell_type": "markdown",
      "source": [
        "しかしここで、`net.l1.W.array`の中身を同様に表示してみようとすると、`None`が返されます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "U8fNWFseMq4I",
        "outputId": "14c4f434-2b1a-4b88-b8b2-ba96a3e59d60",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 55
        }
      },
      "cell_type": "code",
      "source": [
        "print(net.l1.W.array)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qdDHoa8kMq4L"
      },
      "cell_type": "markdown",
      "source": [
        "なぜでしょうか？我々は`l1`をネットワークに登録するときに、`L.Linear`の第一引数に`None`を渡しましたね。そして、**まだネットワークに一度もデータを入力していません**。そのため、**まだ重み行列`W`は作成されていません。**そのため、まだ`net.l1.W`は具体的な配列を保持していないのです。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "yF92dGMjMq4M"
      },
      "cell_type": "markdown",
      "source": [
        "### 最適化手法の選択\n",
        "\n",
        "では、上で定義したネットワークをMNISTデータセットを使って訓練してみましょう。学習時に用いる最適化の手法としてはいろいろな種類のものが提案されていますが、Chainerは多くの手法を同一のインターフェースで利用できるよう、`Optimizer`という機能でそれらを提供しています。`chainer.optimizers`モジュール以下に色々なものを見つけることができます。一覧はこちらにあります：\n",
        "\n",
        "- [Chainerで使える最適化手法一覧](https://docs.chainer.org/en/stable/reference/optimizers.html)\n",
        "\n",
        "ここでは最もシンプルな勾配降下法の手法である`optimizers.SGD`を用います。`Optimizer`のオブジェクトには、`setup`メソッドを使ってモデル（`Chain`オブジェクト）を渡します。こうすることで`Optimizer`に、何を最適化すればいいか把握させることができます。\n",
        "\n",
        "他にもいろいろな最適化手法が手軽に試せるので、色々と試してみて結果の変化を見てみてください。例えば、下の`chainer.optimizers.SGD`のうち`SGD`の部分を`MomentumSGD`, `RMSprop`,  `Adam`などに変えるだけで、最適化手法の違いがどのような学習曲線（ロスカーブ）の違いを生むかなどを簡単に調べることができます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "Bfr21c6dMq4N",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import optimizers\n",
        "\n",
        "optimizer = optimizers.SGD(lr=0.01).setup(net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "3sFOwliOMq4Q"
      },
      "cell_type": "markdown",
      "source": [
        "#### NOTE\n",
        "\n",
        "今回はSGDのコンストラクタの`lr`という引数に $0.01$ を与えました。この値は学習率として知られ、モデルをうまく訓練して良いパフォーマンスを発揮させるために調整する必要がある重要な**ハイパーパラメータ**として知られています。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "lqFm-as1Mq4R"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習する\n",
        "\n",
        "いよいよ学習をスタートします！今回は分類問題なので、`softmax_cross_entropy`というロス関数を使って最小化すべきロスの値を計算します。\n",
        "\n",
        "まず、ネットワークにデータを渡して、出てきた出力と、入力データに対応する正解ラベルを、`Function`の一種でありスカラ値を返す**ロス関数**に渡し、ロス（最小化したい値）の計算を行います。ロスは、`chainer.Variable`のオブジェクトになっています。そして、この`Variable`は、**今まで自分にどんな計算が施されたかを辿れるようになっています。**この仕組みが、Define-by-Run [[Tokui 2015]](http://learningsys.org/papers/LearningSys_2015_paper_33.pdf)とよばれる発明の中心的な役割を果たしています。\n",
        "\n",
        "ここでは誤差逆伝播法自体の説明は割愛しますが、**計算したロスに対する勾配をネットワークに逆向きに流していく**処理は、Chainerではネットワークが吐き出した`Variable`が持つ`backward()`メソッドを呼ぶだけでできます。これを呼ぶと、前述のようにこれまでの計算過程を逆向きに遡って**誤差逆伝播用の計算グラフを構築し**、途中のパラメータの勾配を連鎖率を使って計算してくれます。（詳しくは筆者が[日本ソフトウェア科学会で行ったチュートリアルの資料](https://www.slideshare.net/mitmul/chainer-79942361)をご覧ください。）\n",
        "\n",
        "こうして計算された各パラメータに対する勾配を使って、先程`Optimizer`を作成する際に指定したアルゴリズムを使ってネットワークパラメータの更新（＝学習）が行われるわけです。\n",
        "\n",
        "まとめると、今回1回の更新処理の中で行うのは、以下の4項目です。\n",
        "\n",
        "1. ネットワークにデータを渡して出力`y`を得る\n",
        "2. 出力`y`と正解ラベル`t`を使って、最小化すべきロスの値を`softmax_cross_entropy`関数で計算する\n",
        "3. `softmax_cross_entropy`関数の出力（`Variable`）の`backward()`メソッドを呼んで、ネットワークの全てのパラメータの勾配を誤差逆伝播法で計算する\n",
        "4. Optimizerの`update`メソッドを呼び、3.で計算した勾配を使って全パラメータを更新する\n",
        "\n",
        "パラメータの更新は、何度も何度も繰り返し行います。一度の更新に用いられるデータは、ネットワークに入力されたバッチサイズ分だけ束ねられたデータのみです。そのため、データセット全体のデータを使うために、次のミニバッチを入力して再度更新、その次のミニバッチを使ってまた更新、ということを繰り返すわけです。そのため、この過程を学習ループと呼んでいます。\n",
        "\n",
        "#### NOTE: ロス関数\n",
        "\n",
        "ちなみに、ロス関数は、例えば分類問題ではなく簡単な回帰問題を解きたいような場合、`F.softmax_cross_entropy`の代わりに`F.mean_squared_error`などを用いることもできます。他にも、いろいろな問題設定に対応するために様々なロス関数がChainerには用意されています。こちらからその一覧を見ることができます：\n",
        "\n",
        "- [Chainerで使えるロス関数一覧](http://docs.chainer.org/en/stable/reference/functions.html#loss-functions)\n",
        "\n",
        "#### 学習ループのコード"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "zBYXpUQpMq4S",
        "outputId": "0ace85d5-5baf-414a-d6b6-5d3abbdaaf1b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        }
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from chainer.dataset import concat_examples\n",
        "from chainer.cuda import to_cpu\n",
        "\n",
        "max_epoch = 10\n",
        "\n",
        "while train_iter.epoch < max_epoch:\n",
        "    \n",
        "    # ---------- 学習の1イテレーション ----------\n",
        "    train_batch = train_iter.next()\n",
        "    x, t = concat_examples(train_batch, gpu_id)\n",
        "    \n",
        "    # 予測値の計算\n",
        "    y = net(x)\n",
        "\n",
        "    # ロスの計算\n",
        "    loss = F.softmax_cross_entropy(y, t)\n",
        "\n",
        "    # 勾配の計算\n",
        "    net.cleargrads()\n",
        "    loss.backward()\n",
        "\n",
        "    # パラメータの更新\n",
        "    optimizer.update()\n",
        "    # --------------- ここまで ----------------\n",
        "\n",
        "    # 1エポック終了ごとにValidationデータに対する予測精度を測って、\n",
        "    # モデルの汎化性能が向上していることをチェックしよう\n",
        "    if train_iter.is_new_epoch:  # 1 epochが終わったら\n",
        "\n",
        "        # ロスの表示\n",
        "        print('epoch:{:02d} train_loss:{:.04f} '.format(\n",
        "            train_iter.epoch, float(to_cpu(loss.data))), end='')\n",
        "\n",
        "        valid_losses = []\n",
        "        valid_accuracies = []\n",
        "        while True:\n",
        "            valid_batch = valid_iter.next()\n",
        "            x_valid, t_valid = concat_examples(valid_batch, gpu_id)\n",
        "\n",
        "            # Validationデータをforward\n",
        "            with chainer.using_config('train', False), \\\n",
        "                    chainer.using_config('enable_backprop', False):\n",
        "                y_valid = net(x_valid)\n",
        "\n",
        "            # ロスを計算\n",
        "            loss_valid = F.softmax_cross_entropy(y_valid, t_valid)\n",
        "            valid_losses.append(to_cpu(loss_valid.array))\n",
        "\n",
        "            # 精度を計算\n",
        "            accuracy = F.accuracy(y_valid, t_valid)\n",
        "            accuracy.to_cpu()\n",
        "            valid_accuracies.append(accuracy.array)\n",
        "                        \n",
        "            if valid_iter.is_new_epoch:\n",
        "                valid_iter.reset()\n",
        "                break\n",
        "\n",
        "        print('val_loss:{:.04f} val_accuracy:{:.04f}'.format(\n",
        "            np.mean(valid_losses), np.mean(valid_accuracies)))\n",
        "        \n",
        "# テストデータでの評価\n",
        "test_accuracies = []\n",
        "while True:\n",
        "    test_batch = test_iter.next()\n",
        "    x_test, t_test = concat_examples(test_batch, gpu_id)\n",
        "\n",
        "    # テストデータをforward\n",
        "    with chainer.using_config('train', False), \\\n",
        "            chainer.using_config('enable_backprop', False):\n",
        "        y_test = net(x_test)\n",
        "\n",
        "    # 精度を計算\n",
        "    accuracy = F.accuracy(y_valid, t_valid)\n",
        "    accuracy.to_cpu()\n",
        "    test_accuracies.append(accuracy.array)\n",
        "\n",
        "    if test_iter.is_new_epoch:\n",
        "        test_iter.reset()\n",
        "        break\n",
        "\n",
        "print('test_accuracy:{:.04f}'.format(np.mean(test_accuracies)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch:01 train_loss:0.9593 val_loss:0.9745 val_accuracy:0.8007\n",
            "epoch:02 train_loss:0.5397 val_loss:0.5335 val_accuracy:0.8648\n",
            "epoch:03 train_loss:0.4015 val_loss:0.4231 val_accuracy:0.8846\n",
            "epoch:04 train_loss:0.3329 val_loss:0.3741 val_accuracy:0.8943\n",
            "epoch:05 train_loss:0.4592 val_loss:0.3454 val_accuracy:0.9003\n",
            "epoch:06 train_loss:0.2486 val_loss:0.3273 val_accuracy:0.9074\n",
            "epoch:07 train_loss:0.3305 val_loss:0.3108 val_accuracy:0.9116\n",
            "epoch:08 train_loss:0.3801 val_loss:0.2990 val_accuracy:0.9144\n",
            "epoch:09 train_loss:0.2979 val_loss:0.2885 val_accuracy:0.9181\n",
            "epoch:10 train_loss:0.3217 val_loss:0.2802 val_accuracy:0.9204\n",
            "test_accuracy:0.9375\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VPRotZdNMq4V"
      },
      "cell_type": "markdown",
      "source": [
        "`val_accuracy`に着目してみると、最終的におおよそ92%程度の精度で手書きの数字が分類できるようになりました。**学習終了後**に、ループの中でValidationデータセットを使ってモデルの汎化性能をおおまかにチェックしているのと同様にして、**テスト用のデータセットを用いて学習が終了したネットワークの評価を行っています。**テストデータでの評価結果は、およそ93.75%の正解率となりました。\n",
        "\n",
        "#### ValidationやTestを行う際の注意点\n",
        "\n",
        "ここで、ValidationにせよTestにせよ、「評価」を行う際には注意すべき点があります。学習は行わない、評価のためだけのデータをネットワークに渡して出力を計算している部分（例えば、`y_test = net(x_test)`）では、それらの行を2つのコンテキストでくくっています。\n",
        "\n",
        "##### `chainer.using_config('train', False)`\n",
        "\n",
        "まず、今回は学習時と推論時で動作が異なる関数は含まれていないため、実際の効力は持ちませんが、Validationやテストのために推論を行うときは`chainer.config.train = False`とします。以下のように、`chainer.using_config('train', False)`をwith構文と共に使えば、その中では`chainer.config.train = False`となります。\n",
        "\n",
        "```python\n",
        "with chainer.using_config('train', False):\n",
        "    --- 何か推論処理 ---\n",
        "```\n",
        "\n",
        "これは、以下のようにするのと同じことです。\n",
        "\n",
        "```python\n",
        "chainer.config.train = False\n",
        "\n",
        "--- 何か推論処理 ---\n",
        "```\n",
        "\n",
        "ただし、Pythonのコンテキストを利用しない場合は、一度このようにどこかで書くと、それ以降この設定はグローバルにずっと有効になることに注意してください。（推論したあと再び学習を行うという場合は、再度`chainer.config.train = True`などのようにすることが必要になります。`chainer.config`以下の規定の値に何かを代入することはグローバルに作用しますので、次に説明する`enable_backprop`についても同様です。）\n",
        "\n",
        "##### `chainer.using_config('enable_backprop', False)`\n",
        "\n",
        "次に、今回は評価に用いる出力の計算後にロス関数の各パラメータについての勾配は必要ないので、内部に計算グラフを保持しておく必要もないため、`chainer.using_config('enable_backprop', False)`として**無駄な計算グラフの構築を行わないようにし、メモリ消費量を節約しています。**\n",
        "\n",
        "##### NOTE: ChainerのConfig\n",
        "\n",
        "Chainerにはこの他にも、いくつかのグローバルなConfigがプリセットとして用意されています。また、`chainer.config`以下にユーザが自由な設定値を置くこともできます。詳しくはこちらを一読してください：[Configuring Chainer](https://docs.chainer.org/en/stable/reference/configuration.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kBF9Qld0Mq4V"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みモデルを保存する\n",
        "\n",
        "学習が終わったら、その結果を保存します。Chainerには、2種類のフォーマットで学習済みネットワークをシリアライズする機能が用意されています。一つはHDF5形式で、もう一つはNumPyのNPZ形式でネットワークを保存するものです。今回は、追加ライブラリのインストールが必要なHDF5ではなく、NumPy標準機能で提供されているシリアライズ機能（`numpy.savez()`）を利用したNPZ形式でのモデルの保存を行います。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "sE7aEqoaMq4W",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import serializers\n",
        "\n",
        "serializers.save_npz('my_mnist.model', net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "o6lpheDtMq4X",
        "outputId": "360615ed-15d1-4990-dff5-27a86bd632bb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "cell_type": "code",
      "source": [
        "# ちゃんと保存されていることを確認\n",
        "%ls -la my_mnist.model"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "-rw-r--r-- 1 shunta shunta 333924 Oct 18 04:31 my_mnist.model\r\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "2g89uLBEMq4a"
      },
      "cell_type": "markdown",
      "source": [
        "### 保存したモデルを読み込んで推論する\n",
        "\n",
        "学習したネットワークを、それを使って数字の分類がしたい誰かに渡して、使ってもらうにはどうしたら良いでしょうか。もっともシンプルな方法は、ネットワークの定義がかかれたPythonファイルと、今しがた保存したNPZファイルを渡して、以下のように使うことです。以下のコードの前に、渡したネットワーク定義のファイルからネットワークのクラス（ここでは`MLP`）が読み込まれていることを前提とします。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "XoRl-oIEMq4a",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# まず同じネットワークのオブジェクトを作る\n",
        "infer_net = MLP()\n",
        "\n",
        "# そのオブジェクトに保存済みパラメータをロードする\n",
        "serializers.load_npz('my_mnist.model', infer_net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "4klyoIO7Mq4d"
      },
      "cell_type": "markdown",
      "source": [
        "以上で準備が整いました。それでは、試しにテストデータの中から一つ目の画像を取ってきて、それに対する分類を行ってみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "le0Fo53xMq4f",
        "outputId": "d493f198-3316-4ffb-9a65-9e6847a49a29",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        }
      },
      "cell_type": "code",
      "source": [
        "gpu_id = 0  # CPUで計算をしたい場合は、-1を指定してください\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    infer_net.to_gpu(gpu_id)\n",
        "\n",
        "# 1つ目のテストデータを取り出します\n",
        "x, t = test[0]  #  tは使わない\n",
        "\n",
        "# どんな画像か表示してみます\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "# ミニバッチの形にする（複数の画像をまとめて推論に使いたい場合は、サイズnのミニバッチにしてまとめればよい）\n",
        "print('元の形：', x.shape, end=' -> ')\n",
        "\n",
        "x = x[None, ...]\n",
        "\n",
        "print('ミニバッチの形にしたあと：', x.shape)\n",
        "\n",
        "# ネットワークと同じデバイス上にデータを送る\n",
        "x = infer_net.xp.asarray(x)\n",
        "\n",
        "# モデルのforward関数に渡す\n",
        "with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "    y = infer_net(x)\n",
        "\n",
        "# Variable形式で出てくるので中身を取り出す\n",
        "y = y.array\n",
        "\n",
        "# 結果をCPUに送る\n",
        "y = to_cpu(y)\n",
        "\n",
        "# 予測確率の最大値のインデックスを見る\n",
        "pred_label = y.argmax(axis=1)\n",
        "\n",
        "print('ネットワークの予測:', pred_label[0])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "元の形： (784,) -> ミニバッチの形にしたあと： (1, 784)\n",
            "ネットワークの予測: 7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "tkKEfMPbMq4i"
      },
      "cell_type": "markdown",
      "source": [
        "ネットワークの予測は7でした。画像を見る限り、当たっていそうですね！"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "55aQjRHeMq4i"
      },
      "cell_type": "markdown",
      "source": [
        "## Trainerを使ってみよう\n",
        "\n",
        "Chainerは、これまで書いてきたような学習ループを隠蔽する`Trainer`という機能を提供しています。これを使うと、学習ループを陽に書く必要がなくなり、またいろいろな便利なExtentionを使うことで、学習過程でのロスカーブの可視化や、ログの保存などが楽になります。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "zqGffNzPMq4j"
      },
      "cell_type": "markdown",
      "source": [
        "### データセット・Iterator・ネットワークの準備\n",
        "\n",
        "これらはループを自分で書く場合と同じなので、まとめてしまいます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "LWIQJgmeMq4k",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "train_val, test = mnist.get_mnist()\n",
        "train, valid = split_dataset_random(train_val, 50000, seed=0)\n",
        "\n",
        "batchsize = 128\n",
        "\n",
        "train_iter = iterators.SerialIterator(train, batchsize)\n",
        "valid_iter = iterators.SerialIterator(valid, batchsize, False, False)\n",
        "test_iter = iterators.SerialIterator(test, batchsize, False, False)\n",
        "\n",
        "gpu_id = 0  # CPUを用いたい場合は、-1を指定してください\n",
        "\n",
        "net = MLP()\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    net.to_gpu(gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qpv-bUQfMq4n"
      },
      "cell_type": "markdown",
      "source": [
        "### Updaterの準備\n",
        "\n",
        "ここからが学習ループを自分で書く場合と異なる部分です。ループを自分で書く場合には、データセットからバッチサイズ分のデータをとってきてミニバッチに束ねて、それをネットワークに入力して予測を作り、それを正解と比較し、ロスを計算してバックワード（誤差逆伝播）をして、`Optimizer`によってパラメータを更新する、というところまでを、以下のように書いていました。\n",
        "\n",
        "```python\n",
        "# ---------- 学習の1イテレーション ----------\n",
        "train_batch = train_iter.next()\n",
        "x, t = concat_examples(train_batch, gpu_id)\n",
        "\n",
        "# 予測値の計算\n",
        "y = net(x)\n",
        "\n",
        "# ロスの計算\n",
        "loss = F.softmax_cross_entropy(y, t)\n",
        "\n",
        "# 勾配の計算\n",
        "net.cleargrads()\n",
        "loss.backward()\n",
        "\n",
        "# パラメータの更新\n",
        "optimizer.update()\n",
        "```\n",
        "\n",
        "これらの処理を、まるっと`Updater`はまとめてくれます。これを行うために、**`Updater`には`Iterator`と`Optimizer`を渡してやります。** `Iterator`はデータセットオブジェクトを持っていて、そこからミニバッチを作り、`Optimizer`は最適化対象のネットワークを持っていて、それを使って前進計算とロスの計算・パラメータのアップデートをすることができます。そのため、この2つを渡しておけば、上記の処理を`Updater`内で全部行ってもらえるというわけです。では、`Updater`オブジェクトを作成してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "NIz8Fj2IMq4o",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import training\n",
        "\n",
        "gpu_id = 0  # CPUを使いたい場合は-1を指定してください\n",
        "\n",
        "# ネットワークをClassifierで包んで、ロスの計算などをモデルに含める\n",
        "net = L.Classifier(net)\n",
        "\n",
        "# 最適化手法の選択\n",
        "optimizer = optimizers.SGD(lr=0.01).setup(net)\n",
        "\n",
        "# UpdaterにIteratorとOptimizerを渡す\n",
        "updater = training.StandardUpdater(train_iter, optimizer, device=gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "BywdNhUSMq4s"
      },
      "cell_type": "markdown",
      "source": [
        "##### NOTE\n",
        "\n",
        "ここでは、ネットワークを`L.Classifier`で包んでいます。`L.Classifier`は一種の`Chain`になっていて、渡されたネットワーク自体を`predictor`というattributeに持ち、**ロス計算を行う機能を追加してくれます。**こうすると、`net()`はデータ`x`だけでなくラベル`t`も取るようになり、まず渡されたデータを`predictor`に通して予測を作り、それを`t`と比較して**ロスの`Variable`を返すようになります。**ロス関数として何を用いるかはデフォルトでは`F.softmax_cross_entropy`となっていますが、`L.Classifier`の引数`lossfunc`にロス計算を行う関数を渡してやれば変更することができるため、Classifierという名前ながら回帰問題などのロス計算機能の追加にも使うことができます。（`L.Classifier(net, lossfun=L.mean_squared_error, compute_accuracy=False)`のようにする）\n",
        "\n",
        "`StandardUpdater`は前述のような`Updater`の担当する処理を遂行するための最もシンプルなクラスです。この他にも複数のGPUを用いるための`ParallelUpdater`などが用意されています。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VxnV33vIMq4s"
      },
      "cell_type": "markdown",
      "source": [
        "### Trainerの準備\n",
        "\n",
        "実際に学習ループ部分を隠蔽しているのは`Updater`なので、これがあればもう学習を始められそうですが、`Trainer`はさらに`Updater`を受け取って学習全体の管理を行う機能を提供しています。例えば、**データセットを何周したら学習を終了するか(stop_trigger)** や、**途中のロスの値をどのファイルに保存したいか**、**ロスカーブを可視化した画像ファイルを保存するかどうか**など、学習全体の設定として必須・もしくはあると便利な色々な機能を提供しています。\n",
        "\n",
        "必須なものとしては学習終了のタイミングを指定する`stop_trigger`がありますが、これは`Trainer`オブジェクトを作成するときのコンストラクタで指定します。指定の方法は単純で、`(長さ, 単位)`という形のタプルを与えればよいだけです。「長さ」には数字を、「単位」には`'iteration'`もしくは`'epoch'`のいずれかの文字列を指定します。こうすると、たとえば100 epoch（データセット100周）で学習を終了してください、とか、1000 iteration（1000回更新）で学習を終了してください、といったことが指定できます。`Trainer`を作るときに、`stop_trigger`を指定しないと、学習は自動的には止まりません。\n",
        "\n",
        "では、実際に`Trainer`オブジェクトを作ってみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-K_GXDUVMq4t",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "max_epoch = 10\n",
        "\n",
        "# TrainerにUpdaterを渡す\n",
        "trainer = training.Trainer(\n",
        "    updater, (max_epoch, 'epoch'), out='mnist_result')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "LtZDUXIUMq4v"
      },
      "cell_type": "markdown",
      "source": [
        "`out`引数では、この次に説明する`Extension`を使って、ログファイルやロスの変化の過程を描画したグラフの画像ファイルなどを保存するディレクトリを指定しています。\n",
        "\n",
        "Trainerと、その内側にあるいろいろなオブジェクトの関係は、図にまとめると以下のようになっています。このイメージを持っておくと自分で部分的に改造したりする際に便利だと思います。\n",
        "\n",
        "![image](https://qiita-image-store.s3.amazonaws.com/0/17934/a751df31-b999-f692-d839-488c26b1c48a.png)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WgLOnmhuMq4v"
      },
      "cell_type": "markdown",
      "source": [
        "### TrainerにExtensionを追加する\n",
        "\n",
        "`Trainer`を使う利点として、\n",
        "\n",
        "- ログを自動的にファイルに保存（`LogReport`)\n",
        "- ターミナルに定期的にロスなどの情報を表示（`PrintReport`）\n",
        "- ロスを定期的にグラフで可視化して画像として保存（`PlotReport`)\n",
        "- 定期的にモデルやOptimizerの状態を自動シリアライズ（`snapshot`）\n",
        "- 学習の進捗を示すプログレスバーを表示（`ProgressBar`）\n",
        "- ネットワークの構造をGraphvizのdot形式で保存（`dump_graph`）\n",
        "- ネットワークのパラメータの平均や分散などの統計情報を出力（`ParameterStatistics`）\n",
        "\n",
        "などなどの様々な便利な機能を簡単に利用することができる点があります。これらの機能を利用するには、`Trainer`オブジェクトに対して`extend`メソッドを使って追加したい`Extension`のオブジェクトを渡してやるだけです。では実際に幾つかの`Extension`を追加してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "oAtZtGfWMq4w",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.training import extensions\n",
        "\n",
        "trainer.extend(extensions.LogReport())\n",
        "trainer.extend(extensions.snapshot(filename='snapshot_epoch-{.updater.epoch}'))\n",
        "trainer.extend(extensions.Evaluator(valid_iter, net, device=gpu_id), name='val')\n",
        "trainer.extend(extensions.PrintReport(['epoch', 'main/loss', 'main/accuracy', 'val/main/loss', 'val/main/accuracy', 'l1/W/data/std', 'elapsed_time']))\n",
        "trainer.extend(extensions.ParameterStatistics(net.predictor.l1, {'std': np.std}))\n",
        "trainer.extend(extensions.PlotReport(['l1/W/data/std'], x_key='epoch', file_name='std.png'))\n",
        "trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], x_key='epoch', file_name='loss.png'))\n",
        "trainer.extend(extensions.PlotReport(['main/accuracy', 'val/main/accuracy'], x_key='epoch', file_name='accuracy.png'))\n",
        "trainer.extend(extensions.dump_graph('main/loss'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "D2tRnyVYMq4y"
      },
      "cell_type": "markdown",
      "source": [
        "#### `LogReport`\n",
        "\n",
        "`epoch`や`iteration`ごとの`loss`, `accuracy`などを自動的に集計し、`Trainer`の`out`引数で指定した出力ディレクトリに`log`というファイル名で保存します。\n",
        "\n",
        "#### `snapshot`\n",
        "\n",
        "`Trainer`の`out`引数で指定した出力ディレクトリに`Trainer`オブジェクトを指定されたタイミング（デフォルトでは1エポックごと）に保存します。`Trainer`オブジェクトは上述のように`Updater`を持っており、この中に`Optimizer`とモデルが保持されているため、この`Extension`でスナップショットをとっておけば、学習の復帰や学習済みモデルを使った推論などが学習終了後にも可能になります。\n",
        "\n",
        "#### `dump_graph`\n",
        "\n",
        "指定された`Variable`オブジェクトから辿れる計算グラフをGraphvizのdot形式で保存します。保存先は`Trainer`の`out`引数で指定した出力ディレクトリです。\n",
        "\n",
        "#### `Evaluator`\n",
        "\n",
        "評価用のデータセットの`Iterator`と、学習に使うモデルのオブジェクトを渡しておくことで、学習中のモデルを指定されたタイミングで評価用データセットを用いて評価します。内部では、`chainer.config.using_config('train', False)`が自動的に行われます。`backprop_enable`を`False`にすることは行われないため、メモリ使用効率はデフォルトでは最適ではありませんが、基本的には`Evaluator`を使えば評価を行うという点において問題はありません。\n",
        "\n",
        "#### `PrintReport`\n",
        "\n",
        "`Reporter`によって集計された値を標準出力に出力します。このときどの値を出力するかを、リストの形で与えます。\n",
        "\n",
        "#### `PlotReport`\n",
        "\n",
        "引数のリストで指定された値の変遷を`matplotlib`ライブラリを使ってグラフに描画し、出力ディレクトリに`file_name`引数で指定されたファイル名で画像として保存します。\n",
        "\n",
        "#### `ParameterStatistics`\n",
        "\n",
        "指定したレイヤ（Link）が持つパラメータの平均・分散・最小値・最大値などなどの統計情報を計算して、ログに保存します。パラメータが発散していないかなどをチェックするのに便利です。\n",
        "\n",
        "---\n",
        "\n",
        "これらの`Extension`は、ここで紹介した以外にも、例えば`trigger`によって個別に作動するタイミングを指定できるなどのいくつかのオプションを持っており、より柔軟に組み合わせることができます。詳しくは公式のドキュメントを見てください\n",
        "\n",
        "- [ChainerのTrainer extension一覧](http://docs.chainer.org/en/stable/reference/extensions.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "UENQI-q5Mq4z"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習を開始する\n",
        "\n",
        "学習を開始するには、`Trainer`オブジェクトのメソッド`run`を呼ぶだけです！"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "h92kAz7-Mq4z",
        "outputId": "a673293f-49a3-4b77-f70e-253add7182bd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        }
      },
      "cell_type": "code",
      "source": [
        "trainer.run()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  l1/W/data/std  elapsed_time\n",
            "\u001b[J1           1.66917     0.599904       0.938911       0.806764           0.0359232      3.78752       \n",
            "\u001b[J2           0.673338    0.84325        0.519281       0.86699            0.0366054      7.30147       \n",
            "\u001b[J3           0.459915    0.878686       0.414856       0.887658           0.0370351      10.7729       \n",
            "\u001b[J4           0.38953     0.893262       0.370485       0.896954           0.0373011      14.2718       \n",
            "\u001b[J5           0.353163    0.901235       0.342325       0.904569           0.0374901      17.8515       \n",
            "\u001b[J6           0.330141    0.90609        0.322115       0.90981            0.037639       21.42         \n",
            "\u001b[J7           0.312326    0.910886       0.306793       0.91337            0.0377671      24.939        \n",
            "\u001b[J8           0.298123    0.914704       0.295099       0.915843           0.0378811      28.4376       \n",
            "\u001b[J9           0.285823    0.917659       0.284146       0.918513           0.0379865      31.979        \n",
            "\u001b[J10          0.275218    0.921116       0.274749       0.921776           0.0380852      35.5796       \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "4N-T8yJIMq42"
      },
      "cell_type": "markdown",
      "source": [
        "初めに取り組んだ学習ループを自分で書いた場合よりもより短いコードで、リッチなログ情報とともに、下記で表示してみるようなグラフなども作りつつ、同様の結果を得ることができました。1層目の全結合層の重み行列の値の標準偏差が、学習の進行とともに徐々に大きくなっていっているのも見て取れて、面白いですね。\n",
        "\n",
        "では、保存されているロスのグラフを確認してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "vGulNmkgMq43",
        "outputId": "bc907801-8c2f-4417-985e-a136a2d197e6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "from IPython.display import Image\n",
        "Image(filename='mnist_result/loss.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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3Lkz+/btA2DVqlX07t3bxVW5zjXXXMP3339PQUEBdrudVatWteqT6y4aP3487777LgDvvvsut912m4srEnemoK6H1NRUFixYwNdff01sbCyxsbF88cUXri5L3MRrr73GlClTiImJYevWrTz99NOuLsllBg4cyMSJE+nfvz99+vShvLycxMREV5fVpCZPnszgwYPZt28fFouFt99+m6eeeooVK1bQvXt3VqxYwVNPPeXqMsWNaWYyERERN6Y9ahERETemoBYREXFjCmoRERE3pqAWERFxYwpqERERN6agFqmHlJQU3SlMRJqEglpERMSNKailRXv//fdJSEggNjaW+++/H5vNhr+/P7/61a/o378/Y8aM4fTp0wBs3bqVQYMGERMTwx133FFxj+AffviBG264gb59+9K/f38OHjwIOOZ6v3jf6SlTpqApCUSkMSiopcXas2cPH374IampqWzduhVPT08WLlxIfn4+/fv3Jy0tjREjRjB79mwApk6dyp///Ge2b99Onz59Kt6fMmUKDz30ENu2bWPt2rUVdz3asmULL7/8Mrt37+bQoUOkpqa6bFtFpOUyuroAkcayatUqNm/eTHx8PACFhYWEhYXh4eHBz372MwDuvfdeJkyYQE5ODtnZ2YwYMQJw3CP4rrvuIjc3l8zMTO644w4AvL29K9pPSEjAYrEAEBsbS0ZGBsOGDWvKTRSRVkBBLS2W3W5n2rRpvPDCC5Xe//3vf1/ptcFguGob1fHy8qr42dPTk7KysnpWKiJSPQ19S4s1ZswYli5dyqlTpwA4e/Yshw8fpry8nKVLlwLwwQcfMGzYMIKCgggODubbb78FYMGCBYwYMYLAwEAsFgv/+c9/ACguLqagoMA1GyQirZL2qKXF6t27N3/4wx+46aabKC8vx2QyMXfuXPz8/Ni1axcDBgwgKCiIDz/8EHDcbnDWrFkUFBTQpUsX3nnnHcAR2vfffz/PPvssJpOJJUuWuHKzRKSV0d2zpNXx9/cnLy/P1WWIiNSKhr5FRETcmPaoRURE3Jj2qEVERNyYglpERMSNKahFRETcmIJaRETEjSmoRURE3JiCWkRExI39f21pK2WwSdZRAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WDR3LRzkMq46"
      },
      "cell_type": "markdown",
      "source": [
        "精度のグラフも見てみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "eJmS70CGMq46",
        "outputId": "c0688827-3098-41e5-e7b2-2593c3628c15",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='mnist_result/accuracy.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "sAG2GYmwMq48"
      },
      "cell_type": "markdown",
      "source": [
        "もう少し学習を続ければ、まだ多少精度の向上が図れそうな雰囲気がありますね。\n",
        "\n",
        "ついでに、`dump_graph`という`Extension`が出力した計算グラフを、`Graphviz`を使って画像化して見てみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "6cznAWVbMq49",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!dot -Tpng mnist_result/cg.dot -o mnist_result/cg.png"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "Eo0dsPW-Mq4_",
        "outputId": "f458ac0e-dfe0-4ae2-a026-b85ecb4fb1f5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1256
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='mnist_result/cg.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "afca_9ZgMq5B"
      },
      "cell_type": "markdown",
      "source": [
        "上から下へ向かって、データやパラメータがどのような`Function`に渡されて計算が行われ、ロスを表す`Variable`が出力されたかが分かります。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VKGpB55MMq5B"
      },
      "cell_type": "markdown",
      "source": [
        "### テストデータで評価する\n",
        "\n",
        "上でもValidationデータに対しての評価を学習中に行うために使用されているTrainer Extensionの一つであるEvaluatorは、Trainerと関係なく独立して使うこともできます。以下のようにして`Iterator`とネットワークのオブジェクト（`net`）、使用するデバイスIDを渡してEvaluatorオブジェクトを作成し、これを関数として実行するだけです。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "0VPMBv5uMq5C",
        "outputId": "1e0cee0f-fd46-4390-835d-d3dd10303326",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "cell_type": "code",
      "source": [
        "test_evaluator = extensions.Evaluator(test_iter, net, device=gpu_id)\n",
        "results = test_evaluator()\n",
        "print('Test accuracy:', results['main/accuracy'])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test accuracy: 0.9250395\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "S3wF6tp-Mq5F"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みモデルで推論する\n",
        "\n",
        "それでは、Trainer Extensionのsnapshotが自動的に保存したネットワークのスナップショットから学習済みパラメータを読み込んで、学習ループを書いて学習したときと同様に1番目のテストデータで推論を行ってみましょう。\n",
        "\n",
        "ここで注意すべきは、snapshotが保存するnpzファイルはTrainer全体のスナップショットであるため、extensionの内部のパラメータなども一緒に保存されています。これは、学習自体を再開するために必要だからです。しかし、今回はネットワークのパラメータだけを読み込めば良いので、`serializers.load_npz()`のpath引数にネットワーク部分までのパス（`updater/model:main/predictor/`）を指定しています。こうすることで、ネットワークのオブジェクトにパラメータだけを読み込むことができます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "c75UL_8XMq5H",
        "outputId": "41b38687-82be-4003-9e57-68b0cd99334d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "infer_net = MLP()\n",
        "serializers.load_npz(\n",
        "    'mnist_result/snapshot_epoch-10',\n",
        "    infer_net, path='updater/model:main/predictor/')\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    infer_net.to_gpu(gpu_id)\n",
        "\n",
        "x, t = test[0]\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "x = infer_net.xp.asarray(x[None, ...])\n",
        "with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "    y = infer_net(x)\n",
        "y = to_cpu(y.array)\n",
        "\n",
        "print('予測ラベル:', y.argmax(axis=1)[0])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "予測ラベル: 7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "z0KB6IURMq5J"
      },
      "cell_type": "markdown",
      "source": [
        "無事正解できていますね。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "aNGmM0_eMq5K"
      },
      "cell_type": "markdown",
      "source": [
        "## 新しいネットワークを書いてみよう\n",
        "\n",
        "ここでは、MNISTデータセットではなくCIFAR10という32x32サイズの小さなカラー画像に10クラスのいずれかのラベルがついたデータセットを用いて、いろいろなモデルを自分で書いて試行錯誤する流れを体験してみます。\n",
        "\n",
        "| airplane | automobile | bird | cat | deer | dog | frog | horse | ship | truck |\n",
        "|:--------:|:----------:|:----:|:---:|:----:|:---:|:----:|:-----:|:----:|:-----:|\n",
        "| ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck4.png) |\n",
        "\n",
        "### ネットワークの定義\n",
        "\n",
        "ここでは、さきほど試した全結合層だけからなるネットワークではなく、畳込み層を持つネットワークを定義してみます。3つの畳み込み層を持ち、2つの全結合層がそのあとに続いています。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "iabj0L8sMq5L",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class MyNet(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, n_out):\n",
        "        super(MyNet, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.conv1 = L.Convolution2D(None, 32, 3, 3, 1)\n",
        "            self.conv2 = L.Convolution2D(32, 64, 3, 3, 1)\n",
        "            self.conv3 = L.Convolution2D(64, 128, 3, 3, 1)\n",
        "            self.fc4 = L.Linear(None, 1000)\n",
        "            self.fc5 = L.Linear(1000, n_out)\n",
        "        \n",
        "    def __call__(self, x):\n",
        "        h = F.relu(self.conv1(x))\n",
        "        h = F.relu(self.conv2(h))\n",
        "        h = F.relu(self.conv3(h))\n",
        "        h = F.relu(self.fc4(h))\n",
        "        h = self.fc5(h)\n",
        "        return h"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kExP3QgLMq5O"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習\n",
        "\n",
        "ここで、あとから別のネットワークも簡単に同じ設定で訓練できるよう、`train`関数を作っておきます。これは、\n",
        "\n",
        "- ネットワークのオブジェクト\n",
        "- バッチサイズ\n",
        "- 使用するGPU ID\n",
        "- 学習を終了するエポック数\n",
        "- データセットオブジェクト\n",
        "- 学習率の初期値\n",
        "- 学習率減衰のタイミング\n",
        "\n",
        "などを渡すと、内部で`Trainer`を用いて渡されたデータセットを使ってネットワークを訓練し、学習が終了した状態のネットワークを返してくれる関数です。`Trainer.run()`が終了した後に、テストデータセットを使って評価まで行ってくれます。先程のMNISTでの例と違い、最適化手法にはMomentumSGDを用い、ExponentialShiftというExtentionを使って、指定したタイミングごとに学習率を減衰させるようにしてみます。\n",
        "\n",
        "また、ここでは`cifar.get_cifar10()`が返す学習用データセットのうち9割のデータを`train`、残りの1割を`valid`として使うようにしています。\n",
        "\n",
        "この`train`関数を用いて、上で定義した`MyModel`モデルを訓練してみます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "NEvyuq1TMq5O",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import cifar\n",
        "\n",
        "\n",
        "def train(network_object, batchsize=128, gpu_id=0, max_epoch=20, train_dataset=None, valid_dataset=None, test_dataset=None, postfix='', base_lr=0.01, lr_decay=None):\n",
        "\n",
        "    # 1. Dataset\n",
        "    if train_dataset is None and valid_dataset is None and test_dataset is None:\n",
        "        train_val, test = cifar.get_cifar10()\n",
        "        train_size = int(len(train_val) * 0.9)\n",
        "        train, valid = split_dataset_random(train_val, train_size, seed=0)\n",
        "    else:\n",
        "        train, valid, test = train_dataset, valid_dataset, test_dataset\n",
        "\n",
        "    # 2. Iterator\n",
        "    train_iter = iterators.MultiprocessIterator(train, batchsize)\n",
        "    valid_iter = iterators.MultiprocessIterator(valid, batchsize, False, False)\n",
        "\n",
        "    # 3. Model\n",
        "    net = L.Classifier(network_object)\n",
        "\n",
        "    # 4. Optimizer\n",
        "    optimizer = optimizers.MomentumSGD(lr=base_lr).setup(net)\n",
        "    optimizer.add_hook(chainer.optimizer.WeightDecay(0.0005))\n",
        "\n",
        "    # 5. Updater\n",
        "    updater = training.StandardUpdater(train_iter, optimizer, device=gpu_id)\n",
        "\n",
        "    # 6. Trainer\n",
        "    trainer = training.Trainer(updater, (max_epoch, 'epoch'), out='{}_cifar10_{}result'.format(network_object.__class__.__name__, postfix))\n",
        "    \n",
        "    # 7. Trainer extensions\n",
        "    trainer.extend(extensions.LogReport())\n",
        "    trainer.extend(extensions.observe_lr())\n",
        "    trainer.extend(extensions.Evaluator(valid_iter, net, device=gpu_id), name='val')\n",
        "    trainer.extend(extensions.PrintReport(['epoch', 'main/loss', 'main/accuracy', 'val/main/loss', 'val/main/accuracy', 'elapsed_time', 'lr']))\n",
        "    trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], x_key='epoch', file_name='loss.png'))\n",
        "    trainer.extend(extensions.PlotReport(['main/accuracy', 'val/main/accuracy'], x_key='epoch', file_name='accuracy.png'))\n",
        "    if lr_decay is not None:\n",
        "        trainer.extend(extensions.ExponentialShift('lr', 0.1), trigger=lr_decay)\n",
        "    trainer.run()\n",
        "    del trainer\n",
        "    \n",
        "    # 8. Evaluation\n",
        "    test_iter = iterators.MultiprocessIterator(test, batchsize, False, False)\n",
        "    test_evaluator = extensions.Evaluator(test_iter, net, device=gpu_id)\n",
        "    results = test_evaluator()\n",
        "    print('Test accuracy:', results['main/accuracy'])\n",
        "    \n",
        "    return net"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kURPNSFjMq5S",
        "outputId": "0766f417-e18c-483f-a070-5117e1396b3a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 413
        }
      },
      "cell_type": "code",
      "source": [
        "net = train(MyNet(10), gpu_id=0)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz...\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           1.92567     0.305686       1.72223        0.399023           39.4914       0.01        \n",
            "\u001b[J2           1.60894     0.423184       1.53107        0.460352           75.8198       0.01        \n",
            "\u001b[J3           1.47217     0.47062        1.47683        0.478516           111.621       0.01        \n",
            "\u001b[J4           1.39231     0.500355       1.39153        0.503125           147.62        0.01        \n",
            "\u001b[J5           1.32798     0.526331       1.37645        0.505859           183.689       0.01        \n",
            "\u001b[J6           1.26819     0.547408       1.35275        0.51582            220.018       0.01        \n",
            "\u001b[J7           1.21405     0.567575       1.26391        0.558594           256.583       0.01        \n",
            "\u001b[J8           1.1645      0.583674       1.23662        0.566797           294.419       0.01        \n",
            "\u001b[J9           1.12107     0.601518       1.24487        0.5625             332.126       0.01        \n",
            "\u001b[J10          1.07095     0.619302       1.22669        0.568164           367.703       0.01        \n",
            "\u001b[J11          1.02756     0.637229       1.18091        0.578906           404.599       0.01        \n",
            "\u001b[J12          0.980548    0.653067       1.20165        0.573438           440.013       0.01        \n",
            "\u001b[J13          0.936255    0.669101       1.16079        0.595117           476.212       0.01        \n",
            "\u001b[J14          0.898612    0.683226       1.22003        0.576172           511.102       0.01        \n",
            "\u001b[J15          0.856216    0.697066       1.21136        0.581641           546.215       0.01        \n",
            "\u001b[J16          0.807557    0.715656       1.18806        0.592188           583.203       0.01        \n",
            "\u001b[J17          0.7651      0.730646       1.20113        0.596875           619.903       0.01        \n",
            "\u001b[J18          0.721125    0.744518       1.20688        0.580469           656.518       0.01        \n",
            "\u001b[J19          0.668745    0.764801       1.24068        0.595117           693.217       0.01        \n",
            "\u001b[J20          0.618683    0.782693       1.23873        0.596484           728.607       0.01        \n",
            "Test accuracy: 0.6044304\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "cXSoxEcvMq5W"
      },
      "cell_type": "markdown",
      "source": [
        "学習が20エポックまで終わりました。ロスと精度のプロットを見てみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "LsjyDJSPMq5Y",
        "outputId": "5853e7eb-c6f6-4c52-974f-ceea0eb10ba7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='MyNet_cifar10_result/loss.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xHuqlhrUMq5b",
        "outputId": "10921ff6-07af-419a-88b9-bc51212a9320",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='MyNet_cifar10_result/accuracy.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Wpz2mcvpMq5g"
      },
      "cell_type": "markdown",
      "source": [
        "学習データでの精度（`main/accuracy`)は77%程度まで到達していますが、テストデータでのロス（`val/main/loss`）は途中から下げ止まり、精度（`val/main/accuracy`）も60%前後で頭打ちになってしまっています。表示されたログの最後の行を見ると、テストデータでの精度も同様に60%程度だったようです。学習データでは良い精度が出ているが、 テストデータでは精度が良くないということなので、**モデルが学習データにオーバーフィッティングしている**と思われます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "sSB6NmM_Mq5h"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みネットワークを使った予測\n",
        "\n",
        "テスト精度は60%程度でしたが、試しにこの学習済みネットワークを使っていくつかのテスト画像を分類させてみましょう。あとで使いまわせるように`predict`関数を作っておきます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "cZVANymqMq5h",
        "outputId": "2d0fd203-db7a-4c70-d19b-ecaebe20dbb4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1442
        }
      },
      "cell_type": "code",
      "source": [
        "cls_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',\n",
        "             'dog', 'frog', 'horse', 'ship', 'truck']\n",
        "\n",
        "def predict(net, image_id):\n",
        "    _, test = cifar.get_cifar10()\n",
        "    x, t = test[image_id]\n",
        "    net.to_cpu()\n",
        "    with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "        y = net.predictor(x[None, ...]).data.argmax(axis=1)[0]\n",
        "    print('predicted_label:', cls_names[y])\n",
        "    print('answer:', cls_names[t])\n",
        "\n",
        "    plt.imshow(x.transpose(1, 2, 0))\n",
        "    plt.show()\n",
        "\n",
        "for i in range(10, 15):\n",
        "    predict(net, i)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "predicted_label: airplane\n",
            "answer: airplane\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: truck\n",
            "answer: truck\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: dog\n",
            "answer: dog\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: horse\n",
            "answer: horse\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: truck\n",
            "answer: truck\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "X1IJmNiHMq5l"
      },
      "cell_type": "markdown",
      "source": [
        "うまく分類できているものもあれば、そうでないものもありました。ネットワークの学習に使用したデータセット上ではほぼ百発百中で正解できるとしても、未知のデータ、すなわちテストデータセットにある画像に対して高精度な予測ができなければ、意味がありません[^NN]。テストデータでの精度は、モデルの**汎化性能**に関係していると言われます。\n",
        "\n",
        "どうすれば高い汎化性能を持つネットワークを設計し、学習することができるでしょうか？（そんなことが簡単に分かったら苦労しない。）"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "l6-aXDxhMq5l"
      },
      "cell_type": "markdown",
      "source": [
        "### もっと深いネットワークを定義してみよう\n",
        "\n",
        "では、上のネットワークよりもよりたくさんの層を持つネットワークを定義してみましょう。ここでは、1層の畳み込みネットワークを`ConvBlock`、1層の全結合ネットワークを`LinearBlock`として定義し、これをたくさんシーケンシャルに積み重ねる方法で大きなネットワークを定義してみます。\n",
        "\n",
        "#### 構成要素を定義する\n",
        "\n",
        "まず、今目指している大きなネットワークの構成要素となる`ConvBlock`と`LinearBlock`を定義してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kokxUuBUMq5m",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class ConvBlock(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, n_ch, pool_drop=False):\n",
        "        w = chainer.initializers.HeNormal()\n",
        "        super(ConvBlock, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.conv = L.Convolution2D(None, n_ch, 3, 1, 1, nobias=True, initialW=w)\n",
        "            self.bn = L.BatchNormalization(n_ch)\n",
        "        self.pool_drop = pool_drop\n",
        "        \n",
        "    def __call__(self, x):\n",
        "        h = F.relu(self.bn(self.conv(x)))\n",
        "        if self.pool_drop:\n",
        "            h = F.max_pooling_2d(h, 2, 2)\n",
        "            h = F.dropout(h, ratio=0.25)\n",
        "        return h\n",
        "    \n",
        "class LinearBlock(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, drop=False):\n",
        "        w = chainer.initializers.HeNormal()\n",
        "        super(LinearBlock, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.fc = L.Linear(None, 1024, initialW=w)\n",
        "        self.drop = drop\n",
        "        \n",
        "    def __call__(self, x):\n",
        "        h = F.relu(self.fc(x))\n",
        "        if self.drop:\n",
        "            h = F.dropout(h)\n",
        "        return h"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7PWQmRE4Mq5o"
      },
      "cell_type": "markdown",
      "source": [
        "`ConvBlock`は`Chain`を継承した小さなネットワークとして定義されています。これは一つの畳み込み層とBatch Normalization層をパラメータありで持っているので、コンストラクタ内でこれらの登録を行っています。`__call__`メソッドでは、これらにデータを渡しつつ、活性化関数ReLUを適用して、さらに`pool_drop`がコンストラクタに`True`で渡されているときはMax PoolingとDropoutという関数を適用するようになっています。\n",
        "\n",
        "Chainerでは、Pythonを使って書いたforward計算のコード自体がネットワークの構造を表します。すなわち、実行時にデータがどのような層をくぐっていったか、ということがネットワークそのものを定義します。これによって、上記のような分岐などを含むネットワークも簡単に書け、柔軟かつシンプルで可読性の高いネットワーク定義が可能になります。これが**Define-by-Run**と呼ばれる特徴です。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7KpJgoXQMq5p"
      },
      "cell_type": "markdown",
      "source": [
        "#### 大きなネットワークの定義\n",
        "\n",
        "次に、これらの小さなネットワークを構成要素として積み重ねて、大きなネットワークを定義してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "2lMV0pumMq5q",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class DeepCNN(chainer.ChainList):\n",
        "\n",
        "    def __init__(self, n_output):\n",
        "        super(DeepCNN, self).__init__(\n",
        "            ConvBlock(64),\n",
        "            ConvBlock(64, True),\n",
        "            ConvBlock(128),\n",
        "            ConvBlock(128, True),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256, True),\n",
        "            LinearBlock(),\n",
        "            LinearBlock(),\n",
        "            L.Linear(None, n_output)\n",
        "        )\n",
        "\n",
        "    def __call__(self, x):\n",
        "        for f in self:\n",
        "            x = f(x)\n",
        "        return x"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Wywy-_DVMq5s"
      },
      "cell_type": "markdown",
      "source": [
        "ここで利用しているのが、`ChainList`というクラスです。このクラスは`Chain`を継承したクラスで、いくつもの`Link`や`Chain`を順次呼び出していくようなネットワークを定義するときに便利です。`ChainList`を継承して定義されるモデルは、親クラスのコンストラクタを呼び出す際に**キーワード引数ではなく普通の引数として**`Link`もしくは`Chain`オブジェクトを渡すことができます。そしてこれらは、`self.children()`メソッドによって**登録した順番に**取り出すことができます。`ChainList`自体もPythonのイテレータとして機能するので、例えば`ChainList`を継承したクラスの中で`for f in self:...`といったことも可能です。\n",
        "\n",
        "この特徴を使うと、forward計算の記述が簡単になります。`self.children()`が返す構成要素のリストから、for文で構成要素を順番に取り出していき、そもそもの入力である`x`に取り出してきた部分ネットワークの計算を適用して、この出力で`x`を置き換えるということを順番に行っていけば、一連の`Link`または`Chain`を、コンストラクタで親クラスに登録した順番と同じ順番で適用していくことができます。そのため、シーケンシャルな部分ネットワークの適用によって表される大きなネットワークを定義するのに重宝します。\n",
        "\n",
        "それでは、学習を回してみます。今回はパラメータ数も多いので、学習を停止するエポック数を100に設定します。また、学習率を0.1から始めて、30エポックごとに10分の1にするように設定してみます。\n",
        "\n",
        "#### TIPS\n",
        "\n",
        "今回は多くの畳込み層を使う大きなネットワークを使うので、Chainerが用意してくれているcuDNNのautotune機能を有効にしてみます。やり方は簡単で、以下の二行を事前に実行しておくだけです。\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "jI4IbE9WMq5t",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "chainer.cuda.set_max_workspace_size(512 * 1024 * 1024)\n",
        "chainer.config.autotune = True"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "GLFm2waBMq5x"
      },
      "cell_type": "markdown",
      "source": [
        "それでは、今度こそ学習を開始してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kAiXcG8jMq5y",
        "outputId": "cb85481d-fc9d-4ed3-a117-cdc4cc15b48d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1853
        }
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, base_lr=0.1, lr_decay=(30, 'epoch'))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           2.69075     0.145885       2.16011        0.181641           45.4394       0.1         \n",
            "\u001b[J2           2.08875     0.223344       2.02707        0.247266           87.2495       0.1         \n",
            "\u001b[J3           1.94555     0.270143       1.84885        0.284375           128.132       0.1         \n",
            "\u001b[J4           1.76561     0.335116       1.86799        0.294531           169.605       0.1         \n",
            "\u001b[J5           1.62346     0.386663       1.62925        0.39375            211.524       0.1         \n",
            "\u001b[J6           1.48454     0.446977       1.52166        0.455273           253.865       0.1         \n",
            "\u001b[J7           1.32487     0.515202       1.36196        0.513086           295.544       0.1         \n",
            "\u001b[J8           1.17858     0.576505       1.12012        0.60625            339.003       0.1         \n",
            "\u001b[J9           1.04587     0.626598       1.20681        0.592188           381.066       0.1         \n",
            "\u001b[J10          0.96552     0.660613       1.02479        0.649023           423.455       0.1         \n",
            "\u001b[J11          0.893847    0.688721       1.10222        0.648633           466.331       0.1         \n",
            "\u001b[J12          0.83974     0.709335       2.07405        0.473828           509.755       0.1         \n",
            "\u001b[J13          0.792434    0.72896        0.882458       0.704492           553.252       0.1         \n",
            "\u001b[J14          0.745816    0.745014       0.748491       0.749414           594.454       0.1         \n",
            "\u001b[J15          0.71392     0.757568       0.858948       0.723242           636.543       0.1         \n",
            "\u001b[J16          0.694596    0.765069       0.692791       0.767187           677.03        0.1         \n",
            "\u001b[J17          0.669562    0.774303       0.722681       0.755078           719.133       0.1         \n",
            "\u001b[J18          0.640171    0.784735       0.836611       0.739648           762.839       0.1         \n",
            "\u001b[J19          0.628915    0.788929       0.734173       0.763281           805.425       0.1         \n",
            "\u001b[J20          0.601472    0.797208       0.758069       0.744531           848.614       0.1         \n",
            "\u001b[J21          0.602099    0.799924       0.765355       0.751562           890.752       0.1         \n",
            "\u001b[J22          0.579663    0.806419       1.57662        0.545703           934.142       0.1         \n",
            "\u001b[J23          0.567311    0.810475       0.82505        0.738086           976.421       0.1         \n",
            "\u001b[J24          0.559781    0.813721       1.10873        0.692773           1018.3        0.1         \n",
            "\u001b[J25          0.555209    0.815252       0.808658       0.723047           1060.15       0.1         \n",
            "\u001b[J26          0.543827    0.820891       0.786815       0.753516           1102.44       0.1         \n",
            "\u001b[J27          0.533189    0.820268       0.829289       0.730273           1145.75       0.1         \n",
            "\u001b[J28          0.524134    0.825476       0.842509       0.723242           1187.85       0.1         \n",
            "\u001b[J29          0.520204    0.828192       0.749433       0.760156           1229.6        0.1         \n",
            "\u001b[J30          0.517244    0.827079       0.76885        0.748828           1273.35       0.1         \n",
            "\u001b[J31          0.334417    0.886341       0.415759       0.867578           1318.35       0.01        \n",
            "\u001b[J32          0.257546    0.912816       0.387436       0.873828           1360.71       0.01        \n",
            "\u001b[J33          0.225142    0.923029       0.383671       0.880078           1403.88       0.01        \n",
            "\u001b[J34          0.20486     0.928778       0.376071       0.878516           1448.46       0.01        \n",
            "\u001b[J35          0.190756    0.93494        0.382898       0.879883           1489.45       0.01        \n",
            "\u001b[J36          0.176676    0.939564       0.380916       0.882812           1531.85       0.01        \n",
            "\u001b[J37          0.16272     0.944177       0.398345       0.880078           1576.13       0.01        \n",
            "\u001b[J38          0.156015    0.946178       0.385811       0.882031           1619.11       0.01        \n",
            "\u001b[J39          0.138921    0.951567       0.439974       0.873633           1662.26       0.01        \n",
            "\u001b[J40          0.134308    0.953724       0.425401       0.875391           1704.65       0.01        \n",
            "\u001b[J41          0.129251    0.954501       0.416069       0.877539           1747.3        0.01        \n",
            "\u001b[J42          0.118839    0.958578       0.447102       0.875977           1789.45       0.01        \n",
            "\u001b[J43          0.120422    0.958807       0.448294       0.876758           1832.35       0.01        \n",
            "\u001b[J44          0.111957    0.961516       0.438856       0.876953           1874.35       0.01        \n",
            "\u001b[J45          0.108337    0.962891       0.465127       0.874805           1914.9        0.01        \n",
            "\u001b[J46          0.098446    0.966346       0.474969       0.878711           1956.95       0.01        \n",
            "\u001b[J47          0.100178    0.965465       0.441794       0.879297           1998.34       0.01        \n",
            "\u001b[J48          0.100531    0.965255       0.457057       0.875977           2039.57       0.01        \n",
            "\u001b[J49          0.0934878   0.967551       0.447957       0.880664           2082.66       0.01        \n",
            "\u001b[J50          0.0960991   0.966575       0.479751       0.873828           2124.92       0.01        \n",
            "\u001b[J51          0.0894922   0.968705       0.524324       0.866797           2167.46       0.01        \n",
            "\u001b[J52          0.0878972   0.968639       0.488459       0.866797           2208.16       0.01        \n",
            "\u001b[J53          0.090638    0.969017       0.46807        0.874609           2251.11       0.01        \n",
            "\u001b[J54          0.0831575   0.970015       0.517418       0.865039           2293.24       0.01        \n",
            "\u001b[J55          0.0866094   0.970108       0.474843       0.872266           2335.52       0.01        \n",
            "\u001b[J56          0.0847921   0.970614       0.471673       0.873828           2377.16       0.01        \n",
            "\u001b[J57          0.0864216   0.970126       0.493091       0.862695           2419.44       0.01        \n",
            "\u001b[J58          0.0823165   0.970954       0.477924       0.869336           2462.66       0.01        \n",
            "\u001b[J59          0.0803996   0.971458       0.495718       0.874805           2506.55       0.01        \n",
            "\u001b[J60          0.0841173   0.971376       0.505699       0.867773           2547.25       0.01        \n",
            "\u001b[J61          0.0510202   0.982977       0.424852       0.886133           2589.71       0.001       \n",
            "\u001b[J62          0.030806    0.990385       0.4309         0.891797           2632.02       0.001       \n",
            "\u001b[J63          0.0268141   0.991588       0.437153       0.897461           2673.85       0.001       \n",
            "\u001b[J64          0.0228507   0.993389       0.442131       0.896484           2715.95       0.001       \n",
            "\u001b[J65          0.0225229   0.993297       0.452999       0.895117           2757.94       0.001       \n",
            "\u001b[J66          0.0201019   0.993919       0.457932       0.895898           2800.22       0.001       \n",
            "\u001b[J67          0.0179149   0.994324       0.458712       0.898633           2843.66       0.001       \n",
            "\u001b[J68          0.0185734   0.994118       0.463673       0.89375            2885.75       0.001       \n",
            "\u001b[J69          0.0165639   0.994703       0.466602       0.895898           2927.74       0.001       \n",
            "\u001b[J70          0.0149708   0.995295       0.471654       0.896289           2970.24       0.001       \n",
            "\u001b[J71          0.0142698   0.995905       0.477271       0.894141           3012.15       0.001       \n",
            "\u001b[J72          0.0138073   0.995783       0.474863       0.89375            3054.14       0.001       \n",
            "\u001b[J73          0.0136323   0.995938       0.481535       0.897461           3096.15       0.001       \n",
            "\u001b[J74          0.0134087   0.996127       0.483981       0.895703           3136.92       0.001       \n",
            "\u001b[J75          0.0121816   0.996382       0.488152       0.898242           3180.16       0.001       \n",
            "\u001b[J76          0.0116549   0.996439       0.486749       0.897852           3222.96       0.001       \n",
            "\u001b[J77          0.0113956   0.996782       0.493009       0.895312           3265.06       0.001       \n",
            "\u001b[J78          0.01203     0.996216       0.4911         0.89668            3306.15       0.001       \n",
            "\u001b[J79          0.0106445   0.996959       0.486074       0.897266           3347.74       0.001       \n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[J80          0.0102328   0.997151       0.488394       0.895508           3388.16       0.001       \n",
            "\u001b[J81          0.0115322   0.996471       0.491539       0.897852           3430.42       0.001       \n",
            "\u001b[J82          0.0108919   0.996715       0.486737       0.892969           3472.61       0.001       \n",
            "\u001b[J83          0.00932587  0.997196       0.495631       0.895312           3514.94       0.001       \n",
            "\u001b[J84          0.0107141   0.996826       0.503579       0.896094           3556.74       0.001       \n",
            "\u001b[J85          0.0107143   0.996483       0.489733       0.898633           3599.24       0.001       \n",
            "\u001b[J86          0.00983085  0.997203       0.490977       0.897266           3641.66       0.001       \n",
            "\u001b[J87          0.0102429   0.996795       0.498352       0.897656           3682.26       0.001       \n",
            "\u001b[J88          0.00974548  0.996959       0.501914       0.89375            3725.06       0.001       \n",
            "\u001b[J89          0.0100514   0.997092       0.504673       0.897266           3765.84       0.001       \n",
            "\u001b[J90          0.00988682  0.997218       0.498729       0.89668            3808.65       0.001       \n",
            "\u001b[J91          0.00888075  0.997292       0.500012       0.897266           3854.15       0.0001      \n",
            "\u001b[J92          0.00893546  0.997329       0.49641        0.896875           3896.16       0.0001      \n",
            "\u001b[J93          0.00762798  0.997914       0.497742       0.89707            3938.13       0.0001      \n",
            "\u001b[J94          0.00806293  0.997685       0.501388       0.898047           3980.25       0.0001      \n",
            "\u001b[J95          0.00895867  0.997581       0.495014       0.897852           4021.75       0.0001      \n",
            "\u001b[J96          0.00835858  0.997663       0.499719       0.896289           4063.8        0.0001      \n",
            "\u001b[J97          0.00784852  0.997869       0.49747        0.897852           4104.44       0.0001      \n",
            "\u001b[J98          0.00949169  0.99727        0.490878       0.899219           4145.47       0.0001      \n",
            "\u001b[J99          0.00804482  0.997529       0.498584       0.897656           4189.35       0.0001      \n",
            "\u001b[J100         0.0078875   0.997736       0.500448       0.896875           4231.22       0.0001      \n",
            "Test accuracy: 0.8894383\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "OK1P287rMq51"
      },
      "cell_type": "markdown",
      "source": [
        "学習が終了しました。ロスカーブと精度のグラフを見てみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "W67QavgIMq52",
        "outputId": "4f93a878-a1f6-48e4-cdbc-8971105b2b44",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "Image(filename='DeepCNN_cifar10_result/loss.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "FnEM3DmzMq56",
        "outputId": "84a3d30e-bd42-4224-9280-4f59b91c3340",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "Image(filename='DeepCNN_cifar10_result/accuracy.png')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "FJ9K1MtIMq5-"
      },
      "cell_type": "markdown",
      "source": [
        "先程よりも大幅にValidationデータに対する精度が向上したことが分かります。学習率を10分の1に下げるタイミングでロスががくっと減り、精度がガクッと上がっているのが分かります。最終的に、先程60%前後だったValidationデータでの精度が、90%程度まで上がりました。また、テストデータを用いた精度も、およそ90%程度となっています。しかし最新の研究成果では97%以上まで達成されています。さらに精度を上げるには、今回行ったようなネットワークの構造自体の改良ももちろんのこと、学習データを擬似的に増やす操作（Data augmentation）や、複数のモデルの出力を一つの出力に統合する操作（Ensemble）などなど、いろいろな工夫が考えられます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "IyOFHCvrMq5_"
      },
      "cell_type": "markdown",
      "source": [
        "## データセットクラスを書いてみよう\n",
        "\n",
        "ここでは、Chainerにすでに用意されているCIFAR10のデータを取得する機能を使って、データセットクラスを自分で書いてみます。Chainerでは、データセットを表すクラスは以下の機能を持っていることが必要とされます。\n",
        "\n",
        "- データセット内のデータ数を返す`__len__`メソッド\n",
        "- 引数として渡される`i`に対応したデータもしくはデータとラベルの組を返す`get_example`メソッド\n",
        "\n",
        "その他のデータセットに必要な機能は、`chainer.dataset.DatasetMixin`クラスを継承することで用意できます。ここでは、`DatasetMixin`クラスを継承し、Data augmentation機能のついたデータセットクラスを作成してみましょう。\n",
        "\n",
        "### NOTE\n",
        "\n",
        "自前で用意した、もしくはどこからから調達したラベル付き画像データセットを使う場合は、[`LabeledImageDataset`](https://docs.chainer.org/en/stable/reference/generated/chainer.datasets.LabeledImageDataset.html?highlight=LabeledImageDataset)というクラスが非常に便利です。雹災はドキュメントを参照してください：[`LabeledImageDataset`](https://docs.chainer.org/en/stable/reference/generated/chainer.datasets.LabeledImageDataset.html?highlight=LabeledImageDataset)。こちらでも使っています：[Chainerでアニメキャラクターの顔画像を分類する](https://qiita.com/mitmul/items/5502ecdd2f0b444c427f)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "b-11jjDiMq6B"
      },
      "cell_type": "markdown",
      "source": [
        "### CIFAR10データセットクラスを書く"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "csErjCCTMq6C",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class CIFAR10Augmented(chainer.dataset.DatasetMixin):\n",
        "\n",
        "    def __init__(self, split='train', train_ratio=0.9):\n",
        "        train_val, test_data = cifar.get_cifar10()\n",
        "        train_size = int(len(train_val) * train_ratio)\n",
        "        train_data, valid_data = split_dataset_random(train_val, train_size, seed=0)\n",
        "        if split == 'train':\n",
        "            self.data = train_data\n",
        "        elif split == 'valid':\n",
        "            self.data = valid_data\n",
        "        elif split == 'test':\n",
        "            self.data = test_data\n",
        "        else:\n",
        "            raise ValueError(\"'split' argument should be either 'train', 'valid', or 'test'. But {} was given.\".format(split))\n",
        "\n",
        "        self.split = split\n",
        "        self.random_crop = 4\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "\n",
        "    def get_example(self, i):\n",
        "        x, t = self.data[i]\n",
        "        if self.split == 'train':\n",
        "            x = x.transpose(1, 2, 0)\n",
        "            h, w, _ = x.shape\n",
        "            x_offset = np.random.randint(self.random_crop)\n",
        "            y_offset = np.random.randint(self.random_crop)\n",
        "            x = x[y_offset:y_offset + h - self.random_crop,\n",
        "                  x_offset:x_offset + w - self.random_crop]\n",
        "            if np.random.rand() > 0.5:\n",
        "                x = np.fliplr(x)\n",
        "            x = x.transpose(2, 0, 1)\n",
        "\n",
        "        return x, t"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "x3UPCe0RMq6F"
      },
      "cell_type": "markdown",
      "source": [
        "このクラスは、CIFAR10のデータのそれぞれに対し、\n",
        "\n",
        "- 32x32の大きさの中からランダムに28x28の領域をクロップ\n",
        "- 1/2の確率で左右を反転させる\n",
        "\n",
        "という加工を行っています。こういった操作を加えることで擬似的に学習データのバリエーションを増やすと、オーバーフィッティングを抑制することに役に立つということが知られています。これらの操作以外にも、画像の色味を変化させるような変換やランダムな回転、アフィン変換など、さまざまな加工によって学習データ数を擬似的に増やす方法が提案されています。\n",
        "\n",
        "自分でデータの取得部分も書く場合は、コンストラクタに画像フォルダのパスとファイル名に対応したラベルの書かれたテキストファイルへのパスなどを渡してプロパティとして保持しておき、`get_example`メソッド内でそれぞれの画像を読み込んで対応するラベルとともに返す、という風にすれば良いことが分かります。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "vmvsVsTMMq6G"
      },
      "cell_type": "markdown",
      "source": [
        "### 作成したデータセットクラスを使って学習を行う\n",
        "\n",
        "それではさっそくこの`CIFAR10`クラスを使って学習を行ってみましょう。先程使ったのと同じ大きなネットワークを使うことで、Data augmentationの効果がどの程度あるのかを調べてみましょう。`train`関数も含め、データセットクラス以外は先程とすべて同様です。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "upvteI1eMq6G",
        "outputId": "1744284c-7769-463a-b1bf-9c10eb61dda0",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, train_dataset=CIFAR10Augmented(), valid_dataset=CIFAR10Augmented('valid'), test_dataset=CIFAR10Augmented('test'), postfix='augmented_', base_lr=0.1, lr_decay=(30, 'epoch'))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           2.62485     0.144664       2.19882        0.198242           50.7943       0.1         \n",
            "\u001b[J2           2.05178     0.225897       1.98741        0.251172           95.813        0.1         \n",
            "\u001b[J3           1.7894      0.32029        1.71339        0.341797           141.004       0.1         \n",
            "\u001b[J4           1.55487     0.423828       1.93635        0.322656           185.099       0.1         \n",
            "\u001b[J5           1.31709     0.522124       1.4914         0.465234           230.44        0.1         \n",
            "\u001b[J6           1.16775     0.582608       1.1749         0.590039           277.623       0.1         \n",
            "\u001b[J7           1.07404     0.621417       1.04825        0.635156           325.04        0.1         \n",
            "\u001b[J8           0.984536    0.654807       1.33542        0.567773           372.44        0.1         \n",
            "\u001b[J9           0.917208    0.683904       1.13582        0.618359           418.488       0.1         \n",
            "\u001b[J10          0.851566    0.70909        0.960512       0.667969           465.096       0.1         \n",
            "\u001b[J11          0.802617    0.726696       0.889763       0.69707            511.111       0.1         \n",
            "\u001b[J12          0.768301    0.740207       0.958559       0.693164           556.313       0.1         \n",
            "\u001b[J13          0.736923    0.750644       0.873256       0.709961           601.838       0.1         \n",
            "\u001b[J14          0.719796    0.761374       1.16962        0.664453           648.318       0.1         \n",
            "\u001b[J15          0.688629    0.76962        1.45052        0.558594           694.805       0.1         \n",
            "\u001b[J16          0.676922    0.774105       0.985393       0.69668            741.256       0.1         \n",
            "\u001b[J17          0.650282    0.782737       0.829446       0.719336           787.339       0.1         \n",
            "\u001b[J18          0.635765    0.786665       1.51468        0.592578           834.048       0.1         \n",
            "\u001b[J19          0.629976    0.791021       1.03344        0.7                881.016       0.1         \n",
            "\u001b[J20          0.621745    0.793013       1.27066        0.654688           927.89        0.1         \n",
            "\u001b[J21          0.612678    0.795339       0.921308       0.701758           972.041       0.1         \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "YkL06bZDMq6I"
      },
      "cell_type": "markdown",
      "source": [
        "先程のData augmentationなしの場合は90%程度だったテスト精度が、学習データにaugmentationを施すことで92%程度まで向上させられることが分かりました。およそ2%の改善です。\n",
        "\n",
        "ロスと精度のグラフを見てみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-ckf3ncLMq6J",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "Image(filename='DeepCNN_cifar10_augmented_result/loss.png')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "H8mCPbI5Mq6L",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "Image(filename='DeepCNN_cifar10_augmented_result/accuracy.png')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Xz4qiWP2Mq6N"
      },
      "cell_type": "markdown",
      "source": [
        "## もっと簡単にData Augmentationしよう\n",
        "\n",
        "前述のようにデータセット内の各画像についていろいろな変換を行って擬似的にデータを増やすような操作をData Augmentationといいます。上では、オリジナルのデータセットクラスを作る方法を示すために変換の操作も`get_example()`内に書くという実装を行いましたが、実はもっと簡単にいろいろな変換をデータに対して行う方法があります。\n",
        "\n",
        "それは、`TransformDataset`クラスを使う方法です。`TransformDataset`は、元になるデータセットオブジェクトと、そこからサンプルしてきた各データ点に対して行いたい変換を関数の形で与えると、変換済みのデータを返してくれるようなデータセットオブジェクトに加工してくれる便利なクラスです。かんたんな使い方は以下です。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "nBly8lfhMq6N",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import TransformDataset\n",
        "\n",
        "train_val, test_dataset = cifar.get_cifar10()\n",
        "train_size = int(len(train_val) * 0.9)\n",
        "train_dataset, valid_dataset = split_dataset_random(train_val, train_size, seed=0)\n",
        "\n",
        "\n",
        "# 行いたい変換を関数の形で書く\n",
        "def transform(inputs):\n",
        "    x, t = inputs\n",
        "    x = x.transpose(1, 2, 0)\n",
        "    h, w, _ = x.shape\n",
        "    x_offset = np.random.randint(4)\n",
        "    y_offset = np.random.randint(4)\n",
        "    x = x[y_offset:y_offset + h - 4,\n",
        "          x_offset:x_offset + w - 4]\n",
        "    if np.random.rand() > 0.5:\n",
        "        x = np.fliplr(x)\n",
        "    x = x.transpose(2, 0, 1)\n",
        "    \n",
        "    return x, t\n",
        "\n",
        "\n",
        "# 各データをtransformにくぐらせたものを返すデータセットオブジェクト\n",
        "train_dataset = TransformDataset(train_dataset, transform)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "6Q0dLAW6Mq6O"
      },
      "cell_type": "markdown",
      "source": [
        "このようにすると、この新しい`train_dataset`は、上で自分でデータセットクラスごと書いたときと同じような変換を行った上でデータを返してくれるデータセットオブジェクトになります。\n",
        "\n",
        "### ChainerCVでいろいろな変換を簡単に行おう\n",
        "\n",
        "さて、上では画像に対してランダムクロップと、ランダムに左右反転というのをやりました。もっと色々な変換を行いたい場合、上記の`transform`関数に色々な処理を追加していけばよいことになりますが、毎回使いまわすような変換処理をそのたびに書くのは面倒です。何かいいライブラリとか無いのかな、となります。そこで[ChainerCV](http://chainercv.readthedocs.io/en/stable)[[Niitani 2017]](https://arxiv.org/abs/1708.08169)です！今年のACM MultimediaのOpen Source Software CompetitionにWebDNN[[Hidaka 2017]](https://dl.acm.org/citation.cfm?id=3129394)とともに出場していたChainerにComputer Vision向けの便利な機能を色々追加する補助パッケージ的なオープンソース・ソフトウェアです。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "_dJ1-rCrMq6P",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!pip install chainercv"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "jsdEfeirMq6R"
      },
      "cell_type": "markdown",
      "source": [
        "[ChainerCV](http://chainercv.readthedocs.io/en/stable)には、画像に対する様々な変換があらかじめ用意されています。\n",
        "\n",
        "- [ChainerCVで使える画像変換一覧](http://chainercv.readthedocs.io/en/stable/reference/transforms.html#image)\n",
        "\n",
        "そのため、上でNumPyを使ってごにょごにょ書いていたランダムクロップやランダム左右反転は、`chainercv.transforms`モジュールを使うと、それぞれ以下のように1行で書くことができます：\n",
        "\n",
        "```python\n",
        "x = transforms.random_crop(x, (28, 28))  # ランダムクロップ\n",
        "x = chainercv.transforms.random_flip(x)  # ランダム左右反転\n",
        "```\n",
        "\n",
        "`chainercv.transforms`モジュールを使って、`transform`関数をアップデートしてみましょう。ちなみに、`get_cifar10()`で得られるデータセットでは、デフォルトで画像の画素値の範囲が`[0, 1]`にスケールされています。しかし、`get_cifar10()`に`scale=255.`を渡しておくと、値の範囲をもともとの`[0, 255]`のままにできます。今回`transform`の中で行う処理は、以下の5つです：\n",
        "\n",
        "1. PCA lighting: これは大雑把に言えば、少しだけ色味を変えるような変換です\n",
        "2. Standardization: 訓練用データセット全体からチャンネルごとの画素値の平均・標準偏差を求めて標準化をします\n",
        "3. Random flip: ランダムに画像の左右を反転します\n",
        "4. Random expand: `[1, 1.5]`からランダムに決めた大きさの黒いキャンバスを作り、その中のランダムな位置へ画像を配置します\n",
        "5. Random crop: `(28, 28)`の大きさの領域をランダムにクロップします"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "TbDNke8ZMq6S",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from functools import partial\n",
        "from chainercv import transforms\n",
        "\n",
        "train_val, test_dataset = cifar.get_cifar10(scale=255.)\n",
        "train_size = int(len(train_val) * 0.9)\n",
        "train_dataset, valid_dataset = split_dataset_random(train_val, train_size, seed=0)\n",
        "\n",
        "mean = np.mean([x for x, _ in train_dataset], axis=(0, 2, 3))\n",
        "std = np.std([x for x, _ in train_dataset], axis=(0, 2, 3))\n",
        "\n",
        "\n",
        "def transform(inputs, train=True):\n",
        "    img, label = inputs\n",
        "    img = img.copy()\n",
        "    \n",
        "    # Color augmentation\n",
        "    if train:\n",
        "        img = transforms.pca_lighting(img, 76.5)\n",
        "        \n",
        "    # Standardization\n",
        "    img -= mean[:, None, None]\n",
        "    img /= std[:, None, None]\n",
        "    \n",
        "    # Random flip & crop\n",
        "    if train:\n",
        "        img = transforms.random_flip(img, x_random=True)\n",
        "        img = transforms.random_expand(img, max_ratio=1.5)\n",
        "        img = transforms.random_crop(img, (28, 28))\n",
        "        \n",
        "    return img, label\n",
        "\n",
        "train_dataset = TransformDataset(train_dataset, partial(transform, train=True))\n",
        "valid_dataset = TransformDataset(valid_dataset, partial(transform, train=False))\n",
        "test_dataset = TransformDataset(test_dataset, partial(transform, train=False))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "iNQZOwbAMq6S"
      },
      "cell_type": "markdown",
      "source": [
        "ちなみに、`pca_lighting`は、大雑把にいうと色味を微妙に変えた画像を作ってくれる関数です。\n",
        "\n",
        "では、standardizationとChainerCVによるPCA Lightingを追加した`TransformDataset`を使って学習をしてみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "jh6J1f48Mq6T",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, train_dataset=train_dataset, valid_dataset=valid_dataset, test_dataset=test_dataset, postfix='augmented2_', base_lr=0.1, lr_decay=(30, 'epoch'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "HsuPDoGsMq6V"
      },
      "cell_type": "markdown",
      "source": [
        "わずかに精度が向上しました。他にもネットワークにResNetと呼ばれる有名なアーキテクチャを採用するなど、簡単に試せる改善方法がいくつかあります。ぜひご自分で色々と試してみてください。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WD1oaVYTMq6Z"
      },
      "cell_type": "markdown",
      "source": [
        "#### 参考文献\n",
        "\n",
        "[Tokui 2015] Tokui, S., Oono, K., Hido, S. and Clayton, J., Chainer: a Next-Generation Open Source Framework for Deep Learning, Proceedings of Workshop on Machine Learning Systems(LearningSys) in The Twenty-ninth Annual Conference on Neural Information Processing Systems (NIPS), (2015)\n",
        "\n",
        "[Niitani 2017] Yusuke Niitani, Toru Ogawa, Shunta Saito, Masaki Saito, \"ChainerCV: a Library for Deep Learning in Computer Vision\", ACM Multimedia (ACMMM), Open Source Software Competition, 2017\n",
        "\n",
        "[Hidaka 2017] Masatoshi Hidaka, Yuichiro Kikura, Yoshitaka Ushiku, Tatsuya Harada. WebDNN: Fastest DNN Execution Framework on Web Browser. ACM International Conference on Multimedia (ACMMM), Open Source Software Competition, pp.1213-1216, 2017.\n",
        "\n",
        "#### 脚注\n",
        "\n",
        "[^cudnnenv]: `cudnnenv`は好きなバージョンのcuDNNを簡単に持ってこれるツールです。`pip install cudnnenv`でインストールし、[こちら](https://github.com/unnonouno/cudnnenv#install)にあるインストラクションに従えば、簡単にいろいろなCUDAバージョン向けの様々なバージョンのcuDNNをインストールすることができます。使い方も[こちら](https://github.com/unnonouno/cudnnenv)のREADMEに書いてあるとおり、単純明快です。\n",
        "[^NN]: 学習データに対する予測精度は、もし学習データから抜き出されたあるデータをクエリとし、それが含まれている学習データセットから検索して発見することが必ずできるならば、そのデータについているラベルを答えることで、100%になってしまいます。"
      ]
    }
  ]
}