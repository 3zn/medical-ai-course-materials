{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Introduction to Chainer",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [
        "71RNU5KmMq31",
        "3sFOwliOMq4Q",
        "BywdNhUSMq4s"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "metadata": {
        "colab_type": "text",
        "id": "n0_KFOv4Mq3N"
      },
      "cell_type": "markdown",
      "source": [
        "[![colab-logo](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/mitmul/medical-ai-course-materials/blob/master/notebooks/Introduction_to_Chainer.ipynb)\n",
        "\n",
        "# Deep Learningフレームワークの基礎\n",
        "\n",
        "Chainerは，現在様々なDeep Learningフレームワーク（TensorFlow, PyTorch, etc.）でも採用され主要なニューラルネットワークの記法となっている**Define-by-Run**というアイデアを初めに提案したDeep Learningフレームワークで，2015年からPreferred Networks社が開発を続けています．ここでは，その**柔軟性**と**直感的である**ことを特徴とするこのChainerというフレームワークの基本的な使い方を解説します．"
      ]
    },
    {
      "metadata": {
        "id": "bIrdN3L9reS0",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## 環境構築\n",
        "\n",
        "まずはColab上で以下のセルを実行し，最新版のChainerをインストールしましょう．ここでは同時に`graphviz`というソフトウェアもインストールしています．これは，後にニューラルネットワークのアーキテクチャをグラフ構造として可視化するために使用します．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-IPVDlAAMtK1",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!curl https://colab.chainer.org/install | sh -\n",
        "!apt-get install -y graphviz"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "YLbP1BkTMq3W"
      },
      "cell_type": "markdown",
      "source": [
        "それでは，以下のコマンドをターミナルで実行し，Chainerや，ChainerでGPUを活用するために必要となるCuPyというパッケージが正しくインストールされているかどうかを確認してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "pNPcxcV1Mq3X",
        "outputId": "c9570a47-fb7a-45aa-986d-059588d25931",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 251
        }
      },
      "cell_type": "code",
      "source": [
        "!python -c 'import chainer; chainer.print_runtime_info()'"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Platform: Linux-4.14.65+-x86_64-with-Ubuntu-18.04-bionic\n",
            "Chainer: 5.1.0\n",
            "NumPy: 1.14.6\n",
            "CuPy:\n",
            "  CuPy Version          : 5.1.0\n",
            "  CUDA Root             : /usr/local/cuda\n",
            "  CUDA Build Version    : 9020\n",
            "  CUDA Driver Version   : 9020\n",
            "  CUDA Runtime Version  : 9020\n",
            "  cuDNN Build Version   : 7301\n",
            "  cuDNN Version         : 7301\n",
            "  NCCL Build Version    : 2307\n",
            "iDeep: 2.0.0.post3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "8GFokOwXMq3b"
      },
      "cell_type": "markdown",
      "source": [
        "Chainer, NumPy, そしてCuPy, さらにCuPyの下にCUDAやcuDNN, NCCLといった項目があり，それぞれバージョン番号が表示されていれば成功です．以下のチュートリアルでは，matplotlibをグラフの可視化に使いますので，これも同時にインストールしておきましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "AGHezHvdMq3b",
        "outputId": "b4ce82ea-70ae-4c1c-f22c-8415a124e6da",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "cell_type": "code",
      "source": [
        "!pip install matplotlib"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (2.1.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (0.10.0)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2018.7)\n",
            "Requirement already satisfied: numpy>=1.7.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.14.6)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.11.0)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.5.3)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.3.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Cp1v4ygDMq3f"
      },
      "cell_type": "markdown",
      "source": [
        "## Chainerの基本的な使い方\n",
        "\n",
        "はじめに，シンプルなタスクに実際に取り組むことによって，Chainerの基本的な使い方を説明していきます．さっそく，有名な手書き数字のデータセットMNISTを使って，画像を10クラス（数字の0 - 9）のいずれかに分類するネットワークを書き，学習させてみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "pON7OjrkMq3f"
      },
      "cell_type": "markdown",
      "source": [
        "### データセットの準備\n",
        "\n",
        "まずは学習対象となる**データセット**の準備をします．教師あり学習の場合，データセットは**「入力データ」と「それと対になるラベルデータ」のペアを返すオブジェクト**である必要があります．\n",
        "\n",
        "Chainerには，MNISTやCIFAR10/100のような良く用いられるデータセットに対して，データのダウンロードからオブジェクト作成までを自動的に行ってくれる便利なメソッドがあります．ここではひとまずこれを用いましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "co0qbD2dMq3f",
        "outputId": "f0f3aa09-33d3-41c7-fde2-8527fc5878ee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        }
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import mnist\n",
        "\n",
        "# データセットがダウンロード済みでなければ，ダウンロードも行う\n",
        "train_val, test = mnist.get_mnist(withlabel=True, ndim=1)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading from http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz...\n",
            "Downloading from http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz...\n",
            "Downloading from http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz...\n",
            "Downloading from http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz...\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "k6phOMcvMq3j"
      },
      "cell_type": "markdown",
      "source": [
        "データセットオブジェクトの準備ができました．このオブジェクトは， `train_val[i]` のように指定すると，**i番目の (data, label) というタプルを返すリスト** と同様のものと考えてください．（実際ただのPythonリストもChainerのデータセットオブジェクトとして利用可能です）．それでは，0番目のデータとラベルを取り出して，表示してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "uylrRDSfMq3k",
        "outputId": "f221143e-04ac-40c6-b761-3add77952496",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "cell_type": "code",
      "source": [
        "# matplotlibを使ったグラフ描画結果がnotebook内に表示されるようにします．\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# データの例示\n",
        "x, t = train_val[0]  # 0番目の (data, label) を取り出す\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.axis('off')\n",
        "plt.show()\n",
        "print('label:', t)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAD4CAYAAADFJPs2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAABqlJREFUeJzt3btLV/Efx/G+v6KhqMSlIIiwoagI\nlwoiiAiJoAarRWgqmhKaXNoaiqDLIDU4BS3R2GWpwS5DIESXRWgv3MoudsP8/v6B3/ftL/Wb5uvx\nWF+czhl6cqBPRxvNZnMJsLj9Z74fAGg/oUMAoUMAoUMAoUOAZX/jJo1Gwz/tQ5s1m81Gq80bHQII\nHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQII\nHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIsm+8H\noD2WLl1a7mvWrGnr/fv7+1tuK1asKK/dvHlzuZ85c6bcr1y50nLr6+srr/3x40e5X7p0qdzPnz9f\n7vPFGx0CCB0CCB0CCB0CCB0CCB0CCB0COEdvow0bNpT78uXLy33Pnj3lvnfv3pZbR0dHee2xY8fK\nfT69e/eu3AcHB8u9t7e35fbly5fy2jdv3pT706dPy32h8kaHAEKHAEKHAEKHAEKHAEKHAI1ms9n+\nmzQa7b/JPOju7i734eHhcm/3p6IL1dTUVLmfPHmy3L9+/Trje4+NjZX7x48fy/3t27czvne7NZvN\nRqvNGx0CCB0CCB0CCB0CCB0CCB0CCB0COEefhc7OznIfGRkp966urrl8nDk13bOPj4+X+/79+1tu\nv379Kq9N/f8Fs+UcHcIJHQIIHQIIHQIIHQIIHQIIHQL4cc+z8OHDh3IfGBgo98OHD5f7q1evyn26\nH3tcef36dbn39PSU+8TERLlv27at5Xb27NnyWuaeNzoEEDoEEDoEEDoEEDoEEDoEEDoE8D36PFq9\nenW5T/crfoeGhlpup06dKq89ceJEud++fbvcWXh8jw7hhA4BhA4BhA4BhA4BhA4BhA4BfI8+jz5/\n/jyr6z99+jTja0+fPl3ud+7cKffpfsc5C4s3OgQQOgQQOgQQOgQQOgQQOgTwmeo/bOXKlS23+/fv\nl9fu27ev3A8dOlTujx49Knf+Pp+pQjihQwChQwChQwChQwChQwChQwDn6IvUpk2byv3ly5flPj4+\nXu6PHz8u9xcvXrTcbty4UV77N/5OLkbO0SGc0CGA0CGA0CGA0CGA0CGA0CGAc/RQvb295X7z5s1y\nX7Vq1Yzvfe7cuXK/detWuY+Njc343ouZc3QIJ3QIIHQIIHQIIHQIIHQIIHQI4Byd/2n79u3lfu3a\ntXI/cODAjO89NDRU7hcuXCj39+/fz/je/zLn6BBO6BBA6BBA6BBA6BBA6BBA6BDAOToz0tHRUe5H\njhxpuU33rXuj0fI4eMmSJUuWDA8Pl3tPT0+5L1bO0SGc0CGA0CGA0CGA0CGA0CGA4zX+up8/f5b7\nsmXLyn1ycrLcDx482HJ78uRJee2/zPEahBM6BBA6BBA6BBA6BBA6BBA6BKgPLIm1Y8eOcj9+/Hi5\n79y5s+U23Tn5dEZHR8v92bNns/rzFyNvdAggdAggdAggdAggdAggdAggdAjgHH2R2rx5c7n39/eX\n+9GjR8t93bp1f/xM/6/fv3+X+9jYWLlPTU3N5eMsCt7oEEDoEEDoEEDoEEDoEEDoEEDoEMA5+gI2\n3Vl1X19fy226c/KNGzfO5JHmxIsXL8r9woUL5X7v3r25fJwI3ugQQOgQQOgQQOgQQOgQQOgQwPFa\nG61du7bct27dWu7Xr18v9y1btvzxM82VkZGRcr98+XLL7e7du+W1PjOde97oEEDoEEDoEEDoEEDo\nEEDoEEDoEMA5+jQ6OztbbkNDQ+W13d3d5d7V1TWjZ5oLz58/L/erV6+W+8OHD8v9+/fvf/xMtI83\nOgQQOgQQOgQQOgQQOgQQOgQQOgRY9Ofou3fvLveBgYFy37VrV8tt/fr1M3qmufLt27eW2+DgYHnt\nxYsXy31iYmJGz8TC5I0OAYQOAYQOAYQOAYQOAYQOAYQOARb9OXpvb++s9tkYHR0t9wcPHpT75ORk\nuVffjI+Pj5fXksUbHQIIHQIIHQIIHQIIHQIIHQIIHQI0ms1m+2/SaLT/JhCu2Ww2Wm3e6BBA6BBA\n6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA\n6BDgr/y4Z2B+eaNDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFD\nAKFDAKFDAKFDAKFDAKFDAKFDAKFDgP8Ca9g1McGyJGQAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f40f408fef0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "label: 5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "oTy7XDwMMq3o"
      },
      "cell_type": "markdown",
      "source": [
        "### Validation用データセットを作る\n",
        "\n",
        "次に，さきほど作成した`train_val`データセットを，Training用のデータセットとValidation用のデータセットに分割します．分割処理も，Chainerが提供しているデータセット分割用の関数を用いて行うことができます．元々60000個のデータが入っている`train`データセットを，ランダムに選択された50000個のデータと残りの10000個のデータの2つに分割しましょう．これには，`split_dataset_random`という関数を使用します．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xeCk_TCcMq3o",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import split_dataset_random\n",
        "\n",
        "train, valid = split_dataset_random(train_val, 50000, seed=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kJrPx08DMq3q"
      },
      "cell_type": "markdown",
      "source": [
        "関数の第1引数が分割したい対象のデータセットオブジェクト，第2引数が1つ目のデータセットの要素数，第3引数がランダムな抽出を行う際に用いられる乱数シード（これは省略可）となります．第3引数の`seed`として同じ値を指定すると，再実行した際にデータセットを同じように分割するようになります．それでは，それぞれのデータセットの中に入っているデータの数を確認してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "TfT0WBQfMq3r",
        "outputId": "220e81f3-a683-455b-d511-72f42eb7899c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        }
      },
      "cell_type": "code",
      "source": [
        "print('Training dataset size:', len(train))\n",
        "print('Validation dataset size:', len(valid))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training dataset size: 50000\n",
            "Validation dataset size: 10000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "IbZLLj6ZMq3v"
      },
      "cell_type": "markdown",
      "source": [
        "### Iteratorの作成\n",
        "\n",
        "次に，さきほど準備したデータセットオブジェクトから，幾つかのデータ（入力とラベルのペア）を束ねて学習モデルに次々に渡す，**Iterator**という機能を紹介します．なぜIteratorの機能が必要かというと，ニューラルネットワークのパラメータを更新する際に利用される，確率的勾配降下法（Stochastic Gradient Descent, SGD）をはじめとする最適化手法では，一つのデータだけを元に更新する処理を繰り返すのではなく，幾つかのデータを束ねた **ミニバッチ** を元に計算していくのが一般的となっているためです（ミニバッチ計算が一般的である理由としては，勾配のミニバッチ平均を計算することでパラメータ更新が安定することや，GPUなどを用いた並列化がしやすいこと等が挙げられます）．\n",
        "\n",
        "`Iterator`は，さきほど作成したデータセットオブジェクトを引数として指定し，`next()`メソッドを呼ぶことで新しいミニバッチを返してくれます．データセット内のデータすべてを1度ずつ学習に利用し終えた時点のことを **1エポック（epoch）** と呼びます．Iteratorの内部では，学習中に何エポックまで学習を行ったか，などの情報が逐次記録されており，データセット内のデータを何度も使って学習のループを回すようなコードを簡単に書くことができるようになります．\n",
        "\n",
        "データセットオブジェクトからイテレータを作るには，以下のようにします．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "cZdvCRhxMq3w",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import iterators\n",
        "\n",
        "batchsize = 128\n",
        "\n",
        "train_iter = iterators.SerialIterator(train, batchsize)\n",
        "valid_iter = iterators.SerialIterator(\n",
        "    valid, batchsize, repeat=False, shuffle=False)\n",
        "test_iter = iterators.SerialIterator(\n",
        "    test, batchsize, repeat=False, shuffle=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "elxQ9EGEMq30"
      },
      "cell_type": "markdown",
      "source": [
        "今，学習データセット用のイテレータ（`train_iter`）と，検証データセット用のイテレータ（`valid_iter`），および学習したネットワークの評価に用いるテストデータセット用のイテレータ（`test_iter`）の計3つを作成しました．ここでは`batchsize = 128`としているため，作成した3つのイテレータは`next()`メソッドが（`train_iter.next()`のように）呼ばれると，**128枚の数字画像データ**を一括りにして返します．実際に`next()`の返り値を調べてみましょう．"
      ]
    },
    {
      "metadata": {
        "id": "q8NpWnEyPVDJ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "batch = train_iter.next()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "MH5CRLQdRhBb",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "この`batch`という変数は，`(img, label)`というタプルが128個（ミニバッチサイズだけ）並んだリストになっています．実際に，このリストの長さが128であることを確認してみましょう．"
      ]
    },
    {
      "metadata": {
        "id": "BdkvW4y2RlJt",
        "colab_type": "code",
        "outputId": "e564b1be-7d9d-4a64-b182-3053950204d8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "cell_type": "code",
      "source": [
        "print('batchsize:', len(batch))"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "batchsize: 128\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "b2Tkc_aCWTTk",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "次に，この`batch`というリストの一つ目の要素（画像とラベルを持つタプルになっているはずです）を`batch[0]`として取り出してみます．"
      ]
    },
    {
      "metadata": {
        "id": "TGrVsbkmWqkm",
        "colab_type": "code",
        "outputId": "b91dcff1-9417-471b-92fe-4a73ec9addfd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        }
      },
      "cell_type": "code",
      "source": [
        "x, t = batch[0]\n",
        "\n",
        "print('x:', x.shape)\n",
        "print('t:', t.shape)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "x: (784,)\n",
            "t: ()\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "8xflt5_YRXBp",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "そのときの返り値である2つの配列 `x` と `t` のshapeを調べてみると，データはそれぞれ長さ784のベクトルとして格納されており，正解ラベルはスカラー値となっています．784は，$28 \\times 28$で，28ピクセル四方の画像データの画素値を1列に並べたものになっています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "71RNU5KmMq31"
      },
      "cell_type": "markdown",
      "source": [
        "#### SerialIteratorについて\n",
        "\n",
        "Chainerがいくつか用意しているイテレータの一種である`SerialIterator`は，データセットの中のデータを順番に取り出してくる最もシンプルなイテレータです．`SerialIterator` のコンストラクタ（クラスをインスタンス化するタイミングで呼ばれるメソッド）の引数にデータセットオブジェクトと，バッチサイズを取ります．このとき，渡したデータセットオブジェクトから，データを繰り返し読み出す必要がある場合は`repeat`引数を`True`とし，1周が終わったらそれ以上データを取り出したくない場合はこれを`False`とします．これは，主にvalidation用のデータセットに対して使うフラグです．デフォルトでは，`True`になっています．また，`shuffle`引数に`True`を渡すと，データセットから取り出されてくるデータの順番をエポックごとにランダムに変更します．`SerialIterator`の他にも，マルチプロセスで高速にデータを処理できるようにした`MultiprocessIterator`や`MultithreadIterator`など，複数のイテレータが用意されています．詳しくは以下を見てください．\n",
        "\n",
        "- [Chainerで使えるIterator一覧](https://docs.chainer.org/en/stable/reference/iterators.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "PX0GJaWLMq32"
      },
      "cell_type": "markdown",
      "source": [
        "### ネットワークの定義\n",
        "\n",
        "それでは，学習させるネットワークを定義してみましょう．今回は，全結合層のみからなるニューラルネットワーク（多層パーセプトロン）を作ることにして，中間層のユニット数は100とします．今回用いるMNISTデータセットは0〜9までの数字のいずれかを意味する10種のラベルを持つことから，出力ユニット数は10とします．\n",
        "\n",
        "ここで，ネットワークを定義するために必要な`Link`, `Function`, `Chain`について簡単に説明します．"
      ]
    },
    {
      "metadata": {
        "id": "-H4lADrCSI_o",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### LinkとFunction\n",
        "\n",
        "Chainerでは，ニューラルネットワークの各層を，`Link`と`Function`に区別します．\n",
        "\n",
        "- Linkは，**パラメータを持つ**関数です．\n",
        "- Functionは，**パラメータを持たない**関数です．\n",
        "\n",
        "これらを組み合わせてネットワークを記述します．パラメータを持つ層は，`chainer.links`モジュール以下に用意されています．パラメータを持たない層は，`chainer.functions`モジュール以下に用意されています．これらに簡単にアクセスするために，\n",
        "\n",
        "```\n",
        "import chainer.links as L\n",
        "import chainer.functions as F\n",
        "```\n",
        "\n",
        "と別名を与えて，`L.Convolution2D(...)`や`F.relu(...)`のように用いる慣習がありますが，特にこれが決まった書き方というわけではありません．"
      ]
    },
    {
      "metadata": {
        "id": "nuv4elsRSLkj",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Chain\n",
        "\n",
        "`Chain`は，**パラメータを持つ層（Link）をまとめておくためのクラス**です．パラメータを持つということは，基本的にネットワークの学習の際にそれらを更新していく必要があるということです（更新されないパラメータを持たせることもできます）．Chainerでは，モデルのパラメータの更新は，`Optimizer`という機能が担います．その際，更新すべき全てのパラメータを簡単に発見できるように，`Chain`で一箇所にまとめておきます．"
      ]
    },
    {
      "metadata": {
        "id": "o_sws9APSPR1",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### GPUで実行するには\n",
        "\n",
        "`Chain`クラスは`to_gpu`メソッドを持ち，この引数にGPU IDを指定すると，指定したGPU IDのメモリ上にネットワークの全パラメータを転送します．こうしておくと，順伝播も学習の際のパラメータ更新なども全てGPU上で行われるようになります．GPU IDとして-1を指定すると，CPUを使用します．"
      ]
    },
    {
      "metadata": {
        "id": "9MoCp9d4SRRh",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 同じ結果を保証する\n",
        "\n",
        "ネットワークを書き始める際に乱数シードを固定すると，本記事とほぼ同様の結果が再現できるようになります．（cuDNNが有効になっている環境下でより厳密に計算結果の再現性を保証したい場合は，`chainer.config.cudnn_deterministic`というConfiguringオプションについて知る必要があります．こちらのドキュメントを参照してください：[chainer.config.cudnn_deterministic](https://docs.chainer.org/en/stable/reference/configuration.html?highlight=chainer.config.cudnn_deterministic)．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "5JecdGUXMq32",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import random\n",
        "import numpy\n",
        "import chainer\n",
        "\n",
        "def reset_seed(seed=0):\n",
        "    random.seed(seed)\n",
        "    numpy.random.seed(seed)\n",
        "    if chainer.cuda.available:\n",
        "        chainer.cuda.cupy.random.seed(seed)\n",
        "        \n",
        "reset_seed(0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "G_HvOMluMq37"
      },
      "cell_type": "markdown",
      "source": [
        "#### Chainを継承したネットワークの定義\n",
        "\n",
        "Chainerでは，ネットワークは `Chain` クラスを継承したクラスとして定義されることが一般的です． `Chain` を継承することで，中間層のユニット数=100，出力ユニット数=10とした3層の多層パーセプトロンは以下のように書くことができます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "VQ-6GuZNMq3_",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import chainer\n",
        "import chainer.links as L\n",
        "import chainer.functions as F\n",
        "\n",
        "class MLP(chainer.Chain):\n",
        "\n",
        "    def __init__(self, n_mid_units=100, n_out=10):\n",
        "        super(MLP, self).__init__()\n",
        "        \n",
        "        # パラメータを持つ層の登録\n",
        "        with self.init_scope():\n",
        "            self.l1 = L.Linear(None, n_mid_units)\n",
        "            self.l2 = L.Linear(n_mid_units, n_mid_units)\n",
        "            self.l3 = L.Linear(n_mid_units, n_out)\n",
        "\n",
        "    def forward(self, x):\n",
        "        # データを受け取った際のforward計算を書く\n",
        "        h1 = F.relu(self.l1(x))\n",
        "        h2 = F.relu(self.l2(h1))\n",
        "        return self.l3(h2)\n",
        "\n",
        "gpu_id = 0  # CPUを用いる場合は，この値を-1にしてください\n",
        "\n",
        "net = MLP()\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    net.to_gpu(gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "BnYIri8AMq4C"
      },
      "cell_type": "markdown",
      "source": [
        "継承した `MLP` クラスのコンストラクタ内で `with self.init_scope()` が呼ばれており，その中でネットワークに登場する`Link` （具体的には，全結合層の `L.Linear` ）が定義されています．このような形で記述することで，`Optimizer` はこれらが最適化対象となるパラメータを持つ層であると自動的に解釈してくれるようになります．\n",
        "\n",
        "また， `forward` というメソッドには，関数の名前の通り，ネットワークの順伝播を記述します．`forward` の引数としてデータ `x` を受け取り，出力として順伝播の計算結果を返すようにすることで， `MLP` クラスをインスタンス化して作成されたオブジェクトを，関数のように使えるようになります．（例：`output = net(data)`）\n",
        "\n",
        "Chainerには数多くの `Function` や `Link` が用意されています．ぜひ一度以下の一覧のページを見てみてください．\n",
        "\n",
        "- [Chainerで使える関数(Function)一覧](https://docs.chainer.org/en/stable/reference/functions.html)\n",
        "- [Chainerで学習できる層(Link)一覧](https://docs.chainer.org/en/stable/reference/links.html)\n",
        "\n",
        "`Link`には，ニューラルネットワークによく用いられる全結合層や畳み込み層，LSTMなどに加えて，ResNetや，VGGなどの有名なネットワーク構造も登録されています．また，`Function`には，ReLUなどの活性化関数や，画像の大きさをresizeする関数，サイン・コサインのような関数を始め，ネットワークの要素として使える関数が登録されています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qIN7jkqPMq4C"
      },
      "cell_type": "markdown",
      "source": [
        "#### 入力側ユニット数の自動計算\n",
        "\n",
        "上のネットワーク定義で，最初のLinear層は第一引数に`None`が渡されています．このように引数を指定すると，データが最初にその層に入力されたタイミングで，自動的に必要な数の入力側のユニット数を判断し， `n_input` $\\times$ `n_mid_units` の大きさの行列を作成し，学習対象パラメータとして保持します．これは後々，畳み込み層を全結合層の前に配置する際などに便利な機能となるため，覚えておいてください．\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "yF92dGMjMq4M"
      },
      "cell_type": "markdown",
      "source": [
        "### 最適化手法の選択\n",
        "\n",
        "それでは，上で定義したネットワークをMNISTデータセットを使って訓練してみましょう．学習時に用いる最適化の手法は数多く提案されていますが，Chainerは多くの手法を同一のインターフェースで利用できるよう，`Optimizer`という機能でそれらを提供しています．`chainer.optimizers`モジュール以下に定義されています．一覧はこちらにあります：\n",
        "\n",
        "- [Chainerで使える最適化手法一覧](https://docs.chainer.org/en/stable/reference/optimizers.html)\n",
        "\n",
        "ここでは最もシンプルな勾配降下法の手法である`optimizers.SGD`を用います．`Optimizer`のオブジェクトには，`setup`メソッドを使ってモデル（`Chain`オブジェクト）を渡します．こうすることで`Optimizer`に，何を最適化すればいいか把握させることができます．\n",
        "\n",
        "他にもいろいろな最適化手法が手軽に試せるので，色々と試してみて結果の変化を見てみてください．例えば，下の`chainer.optimizers.SGD`のうち`SGD`の部分を`MomentumSGD`, `RMSprop`,  `Adam`などに変えるだけで，最適化手法の違いがどのような学習曲線（ロスカーブ）の違いを生むかなどを簡単に調べることができます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "Bfr21c6dMq4N",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import optimizers\n",
        "\n",
        "optimizer = optimizers.SGD(lr=0.01).setup(net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "3sFOwliOMq4Q"
      },
      "cell_type": "markdown",
      "source": [
        "#### 学習率（learning rate）\n",
        "\n",
        "今回はSGDの`lr`という引数に $0.01$ を与えました．この値は学習率として知られ，モデルをうまく訓練して良いパフォーマンスを発揮させるために調整する必要がある重要な**ハイパーパラメータ**として知られています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "lqFm-as1Mq4R"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習の開始\n",
        "\n",
        "今回は分類問題なので，`softmax_cross_entropy`という損失関数を使って最小化すべき損失を計算します．\n",
        "\n",
        "まずネットワークにデータを渡し，順伝播により予測値を計算します．そして，この予測値と入力データに対応する正解ラベルを損失関数に渡して損失（最小化したい値）を計算をします．損失は，`chainer.Variable`のオブジェクトとして得られます．この`Variable`は，**過去の計算の履歴を覚えていて，辿れるようになっています**．この仕組みが，Define-by-Run [[Tokui 2015]](http://learningsys.org/papers/LearningSys_2015_paper_33.pdf)とよばれる発明の中心的な役割を果たしています．\n",
        "\n",
        "計算した損失に対する勾配を**ネットワークに逆向きに計算していく**処理は，Chainerではネットワークが出力した`Variable`から，`backward`メソッドを呼ぶだけで実現できます．これを呼ぶことで，**誤差逆伝播用の計算グラフを構築**し，途中のパラメータの勾配を連鎖率を使って計算してくれます．（詳しくは[日本ソフトウェア科学会におけるチュートリアルの資料](https://www.slideshare.net/mitmul/chainer-79942361)をご覧ください．）\n",
        "\n",
        "最後に，計算された各パラメータに対する勾配を用いて，`Optimizer`によってネットワークパラメータの更新（＝学習）が行われます．\n",
        "\n",
        "まとめると，一連の更新処理の中で行われるのは，以下の4項目となります．\n",
        "\n",
        "1. ネットワークにデータを渡して順伝播を計算し，出力`y`を得る\n",
        "2. 出力`y`と正解ラベル`t`を使って，最小化すべき損失を`softmax_cross_entropy`関数で計算する\n",
        "3. `softmax_cross_entropy`関数の出力（`Variable`）の`backward`メソッドを呼んで，ネットワークの全てのパラメータの勾配を誤差逆伝播法で計算する\n",
        "4. Optimizerの`update`メソッドを呼び，3.で計算した勾配を使って全パラメータを更新する\n",
        "\n",
        "パラメータの更新は，上記ステップを繰り返すことで行われます．一度のパラメータ更新に用いられるデータは，ネットワークに入力された，ミニバッチとして束ねられたデータのみです．そのため，データセット全体を用いて学習を行うため，次々と新しいミニバッチを入力し，上記のステップを繰り返していくことになります．この過程を**学習ループ**と呼んでいます．"
      ]
    },
    {
      "metadata": {
        "id": "4CEuZN9GSr8o",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 目的関数\n",
        "\n",
        "目的関数として，例えば分類問題ではなく回帰問題を解きたいような場合，`F.softmax_cross_entropy`の代わりに`F.mean_squared_error`などを用いることもできます．他にも，いろいろな問題設定に対応するために様々な損失関数がChainerには用意されています．こちらからその一覧を見ることができます：\n",
        "\n",
        "- [Chainerで使える目的関数（損失関数）一覧](http://docs.chainer.org/en/stable/reference/functions.html#loss-functions)"
      ]
    },
    {
      "metadata": {
        "id": "bLSWGShBSuNk",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 学習ループのコード"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "zBYXpUQpMq4S",
        "outputId": "99c4c8c4-9b33-4984-96be-2416cf295f0f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        }
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from chainer.dataset import concat_examples\n",
        "from chainer.cuda import to_cpu\n",
        "\n",
        "max_epoch = 10\n",
        "\n",
        "while train_iter.epoch < max_epoch:\n",
        "    \n",
        "    # ---------- 学習の1イテレーション ----------\n",
        "    train_batch = train_iter.next()\n",
        "    x, t = concat_examples(train_batch, gpu_id)\n",
        "    \n",
        "    # 予測値の計算\n",
        "    y = net(x)\n",
        "\n",
        "    # 損失の計算\n",
        "    loss = F.softmax_cross_entropy(y, t)\n",
        "\n",
        "    # 勾配の計算\n",
        "    net.cleargrads()\n",
        "    loss.backward()\n",
        "\n",
        "    # パラメータの更新\n",
        "    optimizer.update()\n",
        "    # --------------- ここまで ----------------\n",
        "\n",
        "    # 1エポック終了ごとにValidationデータに対する予測精度を測って，\n",
        "    # モデルの汎化性能が向上していることをチェックしよう\n",
        "    if train_iter.is_new_epoch:  # 1 epochが終わったら\n",
        "\n",
        "        # 損失の表示\n",
        "        print('epoch:{:02d} train_loss:{:.4f} '.format(\n",
        "            train_iter.epoch, float(to_cpu(loss.data))), end='')\n",
        "\n",
        "        valid_losses = []\n",
        "        valid_accuracies = []\n",
        "        while True:\n",
        "            valid_batch = valid_iter.next()\n",
        "            x_valid, t_valid = concat_examples(valid_batch, gpu_id)\n",
        "\n",
        "            # Validationデータをforward\n",
        "            with chainer.using_config('train', False), \\\n",
        "                    chainer.using_config('enable_backprop', False):\n",
        "                y_valid = net(x_valid)\n",
        "\n",
        "            # 損失を計算\n",
        "            loss_valid = F.softmax_cross_entropy(y_valid, t_valid)\n",
        "            valid_losses.append(to_cpu(loss_valid.array))\n",
        "\n",
        "            # 精度を計算\n",
        "            accuracy = F.accuracy(y_valid, t_valid)\n",
        "            accuracy.to_cpu()\n",
        "            valid_accuracies.append(accuracy.array)\n",
        "                        \n",
        "            if valid_iter.is_new_epoch:\n",
        "                valid_iter.reset()\n",
        "                break\n",
        "\n",
        "        print('val_loss:{:.4f} val_accuracy:{:.4f}'.format(\n",
        "            np.mean(valid_losses), np.mean(valid_accuracies)))\n",
        "        \n",
        "# テストデータでの評価\n",
        "test_accuracies = []\n",
        "while True:\n",
        "    test_batch = test_iter.next()\n",
        "    x_test, t_test = concat_examples(test_batch, gpu_id)\n",
        "\n",
        "    # テストデータをforward\n",
        "    with chainer.using_config('train', False), \\\n",
        "            chainer.using_config('enable_backprop', False):\n",
        "        y_test = net(x_test)\n",
        "\n",
        "    # 精度を計算\n",
        "    accuracy = F.accuracy(y_valid, t_valid)\n",
        "    accuracy.to_cpu()\n",
        "    test_accuracies.append(accuracy.array)\n",
        "\n",
        "    if test_iter.is_new_epoch:\n",
        "        test_iter.reset()\n",
        "        break\n",
        "\n",
        "print('test_accuracy:{:.4f}'.format(np.mean(test_accuracies)))"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch:01 train_loss:0.9300 val_loss:0.9718 val_accuracy:0.7982\n",
            "epoch:02 train_loss:0.5385 val_loss:0.5331 val_accuracy:0.8642\n",
            "epoch:03 train_loss:0.4011 val_loss:0.4231 val_accuracy:0.8841\n",
            "epoch:04 train_loss:0.3327 val_loss:0.3743 val_accuracy:0.8940\n",
            "epoch:05 train_loss:0.4587 val_loss:0.3456 val_accuracy:0.9005\n",
            "epoch:06 train_loss:0.2481 val_loss:0.3274 val_accuracy:0.9078\n",
            "epoch:07 train_loss:0.3304 val_loss:0.3109 val_accuracy:0.9116\n",
            "epoch:08 train_loss:0.3801 val_loss:0.2990 val_accuracy:0.9144\n",
            "epoch:09 train_loss:0.2983 val_loss:0.2885 val_accuracy:0.9178\n",
            "epoch:10 train_loss:0.3215 val_loss:0.2802 val_accuracy:0.9201\n",
            "test_accuracy:0.9375\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VPRotZdNMq4V"
      },
      "cell_type": "markdown",
      "source": [
        "`val_accuracy`に着目してみると，最終的におよそ92%程度の精度で手書きの数字が分類できるようになりました．学習中は，各ループの終わりにValidationデータセットを使ってモデルの汎化性能をチェックしています．学習終了後には，テスト用のデータセットを用いて，学習が完了したネットワークの評価を行います．テストデータでの評価結果は，およそ93.75%の正解率となりました．"
      ]
    },
    {
      "metadata": {
        "id": "2dr2sZcZS2Ee",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### ValidationやTestを行う際の注意点\n",
        "\n",
        "これまでは主に，「学習」のやり方について説明してきましたが，「評価」を行う際には注意すべき点があります．なぜなら，一部の関数や，計算過程において，学習時と評価時でその挙動が異なるためです．以下では，それらの挙動の違いを制御するための方法について説明します．"
      ]
    },
    {
      "metadata": {
        "id": "hlx3Vz7IS3a8",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "##### `chainer.using_config('train', False)`\n",
        "\n",
        "先程の例では，学習時と推論時で動作が異なる関数は含まれていませんでしたが，Validationやテストのために推論を行うときは以下のように，`chainer.using_config('train', False)`をwith構文と共に使うことで，その中では**対応する関数が推論モードとして動作**することになります．\n",
        "\n",
        "```python\n",
        "with chainer.using_config('train', False):\n",
        "    --- 何か推論処理 ---\n",
        "```\n"
      ]
    },
    {
      "metadata": {
        "id": "6KN2FciDS7zX",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "##### `chainer.using_config('enable_backprop', False)`\n",
        "\n",
        "評価のみ行うことを考えた場合，出力の計算後に損失関数の各パラメータについての勾配の情報は不要なため，`chainer.using_config('enable_backprop', False)`とすることで，**無駄な計算グラフの構築が行われず，メモリ消費量を節約**することができます．"
      ]
    },
    {
      "metadata": {
        "id": "vFLgWimWS9d4",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "##### ChainerのConfig\n",
        "\n",
        "Chainerにはこの他にも，いくつかのグローバルなConfigが用意されています．また，`chainer.config`以下にユーザが自由な設定値を置くこともできます．詳しくはこちらを一読してください：[Configuring Chainer](https://docs.chainer.org/en/stable/reference/configuration.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kBF9Qld0Mq4V"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みモデルの保存\n",
        "\n",
        "学習が終了後，その結果を保存します．Chainerには，2種類のフォーマットで学習済みネットワークをシリアライズする機能が用意されています．一つはHDF5形式，もう一つはNumPyのNPZ形式で，ネットワークを保存します．今回は，追加ライブラリのインストールが必要なHDF5ではなく，NumPy標準機能で提供されているシリアライズ機能（`numpy.savez()`）を利用したNPZ形式でのモデルの保存を行います．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "sE7aEqoaMq4W",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import serializers\n",
        "\n",
        "serializers.save_npz('my_mnist.model', net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "o6lpheDtMq4X",
        "outputId": "10998514-e54f-408d-a81b-40c50a885141",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "cell_type": "code",
      "source": [
        "# 保存されていることを確認\n",
        "%ls -la my_mnist.model"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "-rw-r--r-- 1 root root 333928 Dec  6 05:01 my_mnist.model\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "2g89uLBEMq4a"
      },
      "cell_type": "markdown",
      "source": [
        "### 保存したモデルを読み込んで推論\n",
        "\n",
        "学習が終了して保存したモデルを読み込み，推論を行う方法について説明します．はじめに，学習に利用したネットワークを再度インスタンス化して，そこにさきほど保存したNPZファイルを読み込ませます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "XoRl-oIEMq4a",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# まず同じネットワークのオブジェクトを作る\n",
        "infer_net = MLP()\n",
        "\n",
        "# そのオブジェクトに保存済みパラメータをロードする\n",
        "serializers.load_npz('my_mnist.model', infer_net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "4klyoIO7Mq4d"
      },
      "cell_type": "markdown",
      "source": [
        "以上で準備が整いました．それでは，試しにテストデータの中から一つ目の画像を取ってきて，それに対する分類を行ってみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "le0Fo53xMq4f",
        "outputId": "272ea2db-5ef6-4f5f-c792-b3b78e53665c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        }
      },
      "cell_type": "code",
      "source": [
        "gpu_id = 0  # CPUで計算をしたい場合は，-1を指定してください\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    infer_net.to_gpu(gpu_id)\n",
        "\n",
        "# 1つ目のテストデータを取り出します\n",
        "x, t = test[0]  #  tは使わない\n",
        "\n",
        "# どんな画像か表示してみます\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "# ミニバッチの形にする（複数の画像をまとめて推論に使いたい場合は，サイズnのミニバッチにしてまとめればよい）\n",
        "print('元の形：', x.shape, end=' -> ')\n",
        "\n",
        "x = x[None, ...]\n",
        "\n",
        "print('ミニバッチの形にしたあと：', x.shape)\n",
        "\n",
        "# ネットワークと同じデバイス上にデータを送る\n",
        "x = infer_net.xp.asarray(x)\n",
        "\n",
        "# モデルのforward関数に渡す\n",
        "with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "    y = infer_net(x)\n",
        "\n",
        "# Variable形式で出てくるので中身を取り出す\n",
        "y = y.array\n",
        "\n",
        "# 結果をCPUに送る\n",
        "y = to_cpu(y)\n",
        "\n",
        "# 予測確率の最大値のインデックスを見る\n",
        "pred_label = y.argmax(axis=1)\n",
        "\n",
        "print('ネットワークの予測:', pred_label[0])"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nupSB/wclp6FycBcGXAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f40f02ebf60>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "元の形： (784,) -> ミニバッチの形にしたあと： (1, 784)\n",
            "ネットワークの予測: 7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "tkKEfMPbMq4i"
      },
      "cell_type": "markdown",
      "source": [
        "ネットワークの予測は7でした．画像を見る限り，正しく予測できていることが確認できます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "55aQjRHeMq4i"
      },
      "cell_type": "markdown",
      "source": [
        "## Trainerの使用方法\n",
        "\n",
        "Chainerは，これまで書いてきたような学習ループを隠蔽する`Trainer`という機能を提供しています．これを使うと，学習ループを自ら書く必要がなくなり，また便利な拡張機能(`Extention`)を使うことで，学習過程での学習曲線の可視化や，ログの保存なども簡単に行うことができます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "zqGffNzPMq4j"
      },
      "cell_type": "markdown",
      "source": [
        "### データセット・Iterator・ネットワークの準備\n",
        "\n",
        "データセット，Iterator，ネットワークは，，Trainerを使用する場合にも同様に準備します．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "LWIQJgmeMq4k",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "train_val, test = mnist.get_mnist()\n",
        "train, valid = split_dataset_random(train_val, 50000, seed=0)\n",
        "\n",
        "batchsize = 128\n",
        "\n",
        "train_iter = iterators.SerialIterator(train, batchsize)\n",
        "valid_iter = iterators.SerialIterator(valid, batchsize, False, False)\n",
        "test_iter = iterators.SerialIterator(test, batchsize, False, False)\n",
        "\n",
        "gpu_id = 0  # CPUを用いたい場合は，-1を指定してください\n",
        "\n",
        "net = MLP()\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    net.to_gpu(gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qpv-bUQfMq4n"
      },
      "cell_type": "markdown",
      "source": [
        "### Updaterの準備\n",
        "\n",
        "学習ループを自分で書く場合の学習ステップについて再度確認すると，「データセットからミニバッチを作成」「ネットワークに入力して予測を出力」「正解と比較し誤差を計算」「バックワード（誤差逆伝播）を実行」「`Optimizer`によってパラメータを更新」という一連のステップを，以下のように書いていました．\n",
        "\n",
        "```python\n",
        "# ---------- 学習の1イテレーション ----------\n",
        "train_batch = train_iter.next()\n",
        "x, t = concat_examples(train_batch, gpu_id)\n",
        "\n",
        "# 予測値の計算\n",
        "y = net(x)\n",
        "\n",
        "# 損失の計算\n",
        "loss = F.softmax_cross_entropy(y, t)\n",
        "\n",
        "# 勾配の計算\n",
        "net.cleargrads()\n",
        "loss.backward()\n",
        "\n",
        "# パラメータの更新\n",
        "optimizer.update()\n",
        "```\n",
        "\n",
        "Chainerの機能として提供されている`Updater`を用いることで，これらの一連の処理を簡単に書けるようになります．`Updater`には`Iterator`と`Optimizer`を渡します． `Iterator`はデータセットオブジェクトを持っているため，そこからミニバッチを作成します．`Optimizer`は最適化対象のネットワークを持っているため，それを使って順伝播と誤差計算・パラメータのアップデートをすることができます．従って，この2つを渡すことで，`Updater`内で全ての処理が完結します．さっそく，`Updater`オブジェクトを作成してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "NIz8Fj2IMq4o",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import training\n",
        "\n",
        "gpu_id = 0  # CPUを使いたい場合は-1を指定してください\n",
        "\n",
        "# ネットワークをClassifierで包んで，損失の計算などをモデルに含める\n",
        "net = L.Classifier(net)\n",
        "\n",
        "# 最適化手法の選択\n",
        "optimizer = optimizers.SGD(lr=0.01).setup(net)\n",
        "\n",
        "# UpdaterにIteratorとOptimizerを渡す\n",
        "updater = training.StandardUpdater(train_iter, optimizer, device=gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "BywdNhUSMq4s"
      },
      "cell_type": "markdown",
      "source": [
        "#### 損失計算のためのChain\n",
        "\n",
        "ここでは，ネットワークを`L.Classifier`で包んでいます．`L.Classifier`は，渡されたネットワーク自体を`predictor`というattributeに持ち，**損失計算を行う機能を追加してくれます**．こうすることで，`net()`はデータ`x`だけでなくラベル`t`も取るようになり，受け取ったデータを`predictor`に通して予測値を計算し，正解ラベル`t`と比較して**損失のVariableを返します．**損失関数として何を用いるかはデフォルトでは`F.softmax_cross_entropy`となっていますが，`L.Classifier`の引数`lossfunc`に損失計算を行う関数を渡してやれば変更することができ，（Classifierという名前ながら）回帰問題などの損失計算機能の追加にも使うことができます．（`L.Classifier(net, lossfun=L.mean_squared_error, compute_accuracy=False)`のようにする）\n",
        "\n",
        "`StandardUpdater`は前述のような`Updater`の担当する処理を遂行するための最もシンプルなクラスです．この他にも複数のGPUを用いるための`ParallelUpdater`などが用意されています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VxnV33vIMq4s"
      },
      "cell_type": "markdown",
      "source": [
        "### Trainerの準備\n",
        "\n",
        "実際に学習ループ部分を隠蔽しているのは`Updater`ですが，`Trainer`はさらに`Updater`を受け取って学習全体の管理を行う機能を提供しています．例えば，**データセットを何周したら学習を終了するか(stop_trigger)** や，**途中の損失の値をどのファイルに保存したいか**，**学習曲線を可視化した画像ファイルを保存するかどうか**など，学習全体の設定として必須・もしくはあると便利な色々な機能を提供しています．\n",
        "\n",
        "必須なものとしては学習終了のタイミングを指定する`stop_trigger`がありますが，これは`Trainer`オブジェクトを作成するときのコンストラクタで指定します．指定の方法は単純で，`(長さ, 単位)`という形のタプルを与えればよいだけです．「長さ」には数字を，「単位」には`'iteration'`もしくは`'epoch'`のいずれかの文字列を指定します．こうすると，たとえば100 epoch（データセット100周）で学習を終了してください，とか，1000 iteration（1000回更新）で学習を終了してください，といったことが指定できます．`Trainer`を作るときに，`stop_trigger`を指定しないと，学習は自動的には止まりません．\n",
        "\n",
        "では，実際に`Trainer`オブジェクトを作ってみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-K_GXDUVMq4t",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "max_epoch = 10\n",
        "\n",
        "# TrainerにUpdaterを渡す\n",
        "trainer = training.Trainer(\n",
        "    updater, (max_epoch, 'epoch'), out='results/mnist_result')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "LtZDUXIUMq4v"
      },
      "cell_type": "markdown",
      "source": [
        "`out`引数では，この次に説明する`Extension`を使って，ログファイルや損失の変化の過程を描画したグラフの画像ファイルなどを保存するディレクトリを指定しています．\n",
        "\n",
        "Trainerと，その内側にあるいろいろなオブジェクトの関係は，図にまとめると以下のようになっています．このイメージを持っておくと自分で部分的に改造したりする際に便利だと思います．\n",
        "\n",
        "![Trainerに関連するオブジェクト間の関係図](https://qiita-image-store.s3.amazonaws.com/0/17934/a751df31-b999-f692-d839-488c26b1c48a.png)\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WgLOnmhuMq4v"
      },
      "cell_type": "markdown",
      "source": [
        "### TrainerにExtensionを追加\n",
        "\n",
        "`Trainer`を使う利点として，\n",
        "\n",
        "- ログを自動的にファイルに保存（`LogReport`)\n",
        "- ターミナルに定期的に損失などの情報を表示（`PrintReport`）\n",
        "- 損失を定期的にグラフで可視化して画像として保存（`PlotReport`)\n",
        "- 定期的にモデルやOptimizerの状態を自動シリアライズ（`snapshot`）\n",
        "- 学習の進捗を示すプログレスバーを表示（`ProgressBar`）\n",
        "- ネットワークの構造をGraphvizのdot形式で保存（`dump_graph`）\n",
        "- ネットワークのパラメータの平均や分散などの統計情報を出力（`ParameterStatistics`）\n",
        "\n",
        "などの様々な便利な機能を簡単に利用することができる点があります．これらの機能を利用するには，`Trainer`オブジェクトに対して`extend`メソッドを使って追加したい`Extension`のオブジェクトを渡すだけです．では実際に幾つかの`Extension`を追加してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "oAtZtGfWMq4w",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.training import extensions\n",
        "\n",
        "trainer.extend(extensions.LogReport())\n",
        "trainer.extend(extensions.snapshot(filename='snapshot_epoch-{.updater.epoch}'))\n",
        "trainer.extend(extensions.Evaluator(valid_iter, net, device=gpu_id), name='val')\n",
        "trainer.extend(extensions.PrintReport(['epoch', 'main/loss', 'main/accuracy', 'val/main/loss', 'val/main/accuracy', 'l1/W/data/std', 'elapsed_time']))\n",
        "trainer.extend(extensions.ParameterStatistics(net.predictor.l1, {'std': np.std}))\n",
        "trainer.extend(extensions.PlotReport(['l1/W/data/std'], x_key='epoch', file_name='std.png'))\n",
        "trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], x_key='epoch', file_name='loss.png'))\n",
        "trainer.extend(extensions.PlotReport(['main/accuracy', 'val/main/accuracy'], x_key='epoch', file_name='accuracy.png'))\n",
        "trainer.extend(extensions.dump_graph('main/loss'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "D2tRnyVYMq4y"
      },
      "cell_type": "markdown",
      "source": [
        "#### `LogReport`\n",
        "\n",
        "`epoch`や`iteration`ごとの`loss`, `accuracy`などを自動的に集計し，`log`というファイル名で保存します．"
      ]
    },
    {
      "metadata": {
        "id": "-4cZiPrvUqfB",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `snapshot`\n",
        "\n",
        "`Trainer`オブジェクトを指定されたタイミング（デフォルトでは1エポックごと）で保存します．`Trainer`オブジェクトは上述のように`Updater`を持っており，この中に`Optimizer`とモデルが保持されているため，この`Extension`でスナップショットをとっておけば，その時点から学習を再開させたり，学習済みモデルを使った推論などが可能になります．"
      ]
    },
    {
      "metadata": {
        "id": "nomZePWnUsFT",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `dump_graph`\n",
        "\n",
        "指定された`Variable`オブジェクトから辿れる計算グラフをGraphvizのdot形式で保存します．\n"
      ]
    },
    {
      "metadata": {
        "id": "d5DugCn3UthJ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `Evaluator`\n",
        "\n",
        "評価用のデータセットの`Iterator`と，学習に使うモデルのオブジェクトを渡しておくことで，学習中のモデルを指定されたタイミングで評価用データセットを用いて評価します．内部では，`chainer.config.using_config('train', False)`が自動的に行われます．`backprop_enable`を`False`にすることは行われないため，メモリ使用効率はデフォルトでは最適ではありませんが，基本的には`Evaluator`を使えば評価を行うという点において問題はありません．\n"
      ]
    },
    {
      "metadata": {
        "id": "rbnF4Of8UvTZ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `PrintReport`\n",
        "\n",
        "`LogReport`と同様に集計された値を標準出力に出力します．この際，どの値を出力するかをリストの形で与えます．\n"
      ]
    },
    {
      "metadata": {
        "id": "IzRAhjcfUwl8",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `PlotReport`\n",
        "\n",
        "引数のリストで指定された値の変遷を`matplotlib`ライブラリを使ってグラフに描画し，出力ディレクトリに`file_name`引数で指定されたファイル名で画像として保存します．"
      ]
    },
    {
      "metadata": {
        "id": "Pmgkto2tUxyV",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### `ParameterStatistics`\n",
        "\n",
        "指定したレイヤ（Link）が持つパラメータの平均・分散・最小値・最大値などなどの統計情報を計算して，ログに保存します．パラメータが発散していないかなどをチェックするのに便利です．\n"
      ]
    },
    {
      "metadata": {
        "id": "YzFusGNSUzWF",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "---\n",
        "\n",
        "これらの`Extension`は，ここで紹介した以外にも，例えば`trigger`によって個別に作動するタイミングを指定できるなどのいくつかのオプションを持っており，より柔軟に組み合わせることができます．詳しくは公式のドキュメントを見てください．\n",
        "\n",
        "- [ChainerのTrainer extension一覧](http://docs.chainer.org/en/stable/reference/extensions.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "UENQI-q5Mq4z"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習の開始 (Trainer利用)\n",
        "\n",
        "学習を開始するために，`Trainer`オブジェクトのメソッド`run`を実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "h92kAz7-Mq4z",
        "outputId": "4a124c14-26b3-497d-d201-a2ed6d08093a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        }
      },
      "cell_type": "code",
      "source": [
        "trainer.run()"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  l1/W/data/std  elapsed_time\n",
            "\u001b[J1           1.66917     0.599884       0.93892        0.806764           0.0359232      8.82253       \n",
            "\u001b[J2           0.673347    0.843211       0.519291       0.86699            0.0366054      16.4872       \n",
            "\u001b[J3           0.459921    0.878686       0.414858       0.887658           0.037035       24.1709       \n",
            "\u001b[J4           0.389535    0.893262       0.370489       0.896855           0.037301       31.8903       \n",
            "\u001b[J5           0.353169    0.901255       0.342332       0.904569           0.03749        39.6056       \n",
            "\u001b[J6           0.330151    0.90609        0.32213        0.909711           0.037639       47.4179       \n",
            "\u001b[J7           0.312338    0.910846       0.306804       0.91337            0.0377671      55.3019       \n",
            "\u001b[J8           0.298136    0.914663       0.295119       0.915843           0.0378811      62.9994       \n",
            "\u001b[J9           0.285837    0.917559       0.284161       0.918513           0.0379865      70.726        \n",
            "\u001b[J10          0.275229    0.921116       0.27476        0.921776           0.0380852      78.448        \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "4N-T8yJIMq42"
      },
      "cell_type": "markdown",
      "source": [
        "学習ループを自分で書いた場合よりも遥かに簡単に，同様の結果を得ることができました．さらに，`Extension`の機能を利用することで，様々なスコアや，学習曲線の可視化も自動で出力されます．\n",
        "\n",
        "では，保存されている損失のグラフを確認してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "vGulNmkgMq43",
        "outputId": "0f7fded7-a2e1-4f4f-cb6f-22cbe8f5c75b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "from IPython.display import Image\n",
        "Image(filename='results/mnist_result/loss.png')"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nohvv8kgAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WDR3LRzkMq46"
      },
      "cell_type": "markdown",
      "source": [
        "精度のグラフも見てみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "eJmS70CGMq46",
        "outputId": "459afd09-b9cf-498c-c5a2-5a7fc37e67c9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/mnist_result/accuracy.png')"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "sAG2GYmwMq48"
      },
      "cell_type": "markdown",
      "source": [
        "もう少し学習を続ければ，さらに精度の向上が期待できそうです．\n",
        "\n",
        "最後に，`dump_graph`という`Extension`によって出力された計算グラフのファイルを，`Graphviz`で画像化してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "6cznAWVbMq49",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!dot -Tpng results/mnist_result/cg.dot -o results/mnist_result/cg.png"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "Eo0dsPW-Mq4_",
        "outputId": "b505501a-1261-44da-a833-ba83fdb95f17",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1256
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/mnist_result/cg.png')"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n5jbg107GayjX2LX09x5xc3PDxYsXDfbTz+vj7u4+LOd966238PDDDxs8Ntjzvvrqq0LPh2thG8A2\nYDyZNGkSFixYgLS0NKhUKuFxfQ+nJUuW4OuvvzZ4Tnp6Om677TbhRtpo/sy/UWyP2B4RERHRyBn1\nwZmdnR2SkpKQl5eHI0eOoLu7G2vXrkVFRYWwj34yW61W+4vH+v777+Ht7Y0JEyYMug79l9Hed4Et\nLS1hZWUlfHkd6H49yWQynD9/HkVFRQOuJyoqCj/++COmTJmCX//616isrERhYeE193/jjTewfft2\nPPHEE8jOzsaBAwdQV1eHFStWGNR08eJFLF26FOnp6cjIyIC1tTU2btwIAPjzn/+M6OhoeHh4oLKy\nEj/++KPBOdRqNc6fP48PPvgAaWlp2LJlyy/2GOzo6MDx48exevXqYe1ZSOIZyjXWn2u9R5544glc\nuHAB77//Ptra2qBUKvHuu+/itttuw6233jrk854/fx4nT57sszjJYM6rUChQXV2Ne++997rnYxvA\nNmA8iY2NhUqlQlpamvBYamoqIiMjsWTJEhQXFxt8xh87dgyxsbHCf4/2z/zBYnvE9oiIiIhG1qgP\nzmxsbDB9+nRIJBL4+flh27Zt6OzsxL59+4R9Fi1ahIKCAjz11FPXPE57ezvOnj0r3AUerM7OTgDo\n060fACQSiXDnfKD79eTl5QVg+O5M96ZSqZCYmIjFixdj+fLlmDRpEgICArB161ZcunQJH3/8sbDv\nkiVL8PTTT8POzg729vaIiYlBU1MTLl26dN3zzJkzB3PmzMEbb7yBF154weCHTn/+8Y9/wNHREc89\n99yQXyOJb6jXWH+u9R6ZPXs2HnvsMWzevBkymQy/+tWv0NbW1mfVvBu1a9cuPPTQQzA1NWxCB3pe\nlUqFl156CS+//PKAzsc2gG3AeBIdHQ0rKyuD4ZrHjx/H3LlzER4eDicnJ3z55ZfCtpycHERGRgr/\nPdo/8weL7RHbIyIiIhpZoz446y0gIACTJk0a1J1QAGhsbIROp4OVldUNnVc/X0Z/E+Z2d3cLxx3o\nfj3p74YPx53p/iiVSrS1tSEkJMTg8ZkzZ8Lc3PwXJ1PXz1UykCXqT548iezsbOzcuROffvoplixZ\n0mfuEb1vvvkGX375JT788MM+d+ppdBrqNdbbL71HXn31VXz88cf4+OOPUVhYiNTUVMjlctx3331D\n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\niIiIaAxgcEZEI6eiogIzZszo09usN1NTUyxbtgz//Oc/MWHChJtUnfEIDQ1Fbm4udDodzM3NceHC\nBdjZ2YldltHZv38/HnroIajVaqjV6mvuJ5FIUF9fj8mTJ9/E6oiIiIiIaAzi4gBENHLeffddSCSS\n6+6n1Wpx+PBhLFiwABcuXLgJlRmXuLg4mJmZwczMDEuWLGFo1otGo0FCQgJWr16Nzs7OXwzNgKvz\nnx08ePAmVUdERERERGMZgzMiGhEajQbvvPNOv8Pp+qNWq5GTk4OIiAiUlpaOcHXGZfXq1dBqtdBo\nNFi3bp3Y5RiVxsZGxMTE4LXXXoNOp7tu70XganD24Ycf3oTqiIiIiIhorONQTSIaEV988QViY2Ov\nu5+JiYnwv/pgxNzcHPPnz8eUKVNGukyj8cMPP6CpqQn33HMPzMzMxC7HKDQ3NyM9PR0dHR3CYhLX\n622mx5VJiYiIiIhoGCRffwwVEdENWLp0Kdra2tDZ2YmWlhao1Wo0Nzfj9ddfx78+OwwHVxl0Ws1/\n/rTQatWATgetphs6nQ7ZBVWwd7aCmcRC7Jdyc1i7YoJ2AnIqNQCuvZDCeKFRd6H5fDk0MMeUKZOw\nfPm9aG5uHtQxiouLGZwREREREdGQMDgjohFjbW0Na2trODg4CI85Ozvjlmn+uPvZr0SszPh0tjWh\n8Vw+pvlHiV2KUfn5s/+GebMCe/bsEbsUIiIiIiIahzjHGRGREbC0cWBoRkREREREZGQYnBERERER\nEREREfWDwRkREREREREREVE/GJwRERERERERERH1g8EZERERERERERFRPxicERERERERERER9YPB\nGRERERERERERUT8YnBEREREREREREfWDwRkREREREREREVE/GJwRERERERERERH1g8EZERERERER\nERFRPxicERERERERERER9YPBGRERERERERERUT8YnBEREREREREREfVDInYBRES/pCLnCDI+exEt\njVUAgAmTpsI1YCEWPvT2NZ9ztiAF37/7KG5/6G24By++WaVeU+/X0J+Jk93wwMs5N7GqX2Zs/4ZE\nRERERERiYHBGREbNKzQWXqGxOPBiOFRtjXhwW/H1n6TTjXxhg9D7NcS9VgEA0Gk10Gi60a1qxZdv\nxIpcZS9G9m9IREREREQkBgZnRDTmuAX9Cr95vVLsMq7LxNQMElMzSMytYOc4Q7Q61N0qfLVjGe55\n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\nZK6eZNu3b9fJkydlsVg0ZswYj5Bs/Pjx8vHxMbtk4LI4P0zbtWuXqqqqZLFYFB0d7RGmpaamqn//\n/maXDAAAAKB7EZwBV7LzQ7IdO3aosrLSMCRLTk6Wr6+v2SUDpjo/TMvNzdWpU6dktVoVFRXlEaal\npaVxzQAAAABXNoIz4EpxfkiWlZXlntdp7NixHiFZUlISvWeAdjp69KjH4gNFRUU6c+aMrFaroqOj\nPRYfSElJkbe3t9klAwAAAOgaBGdAb9Q6JMvNzVVWVpZ7JcHRo0fLZrO5Q7LExETmawK6UHNzs/bv\n3+/umebqndbQ0KCAgAAlJyd79EyLi4tj8QwAAACgdyI4A3qbuLg4lZSUqF+/foqMjHQPs0xMTFRC\nQoL8/f3NLhHocxwOh0pLS92reBYWFqqkpESNjY0KDAzU7t27NWbMGLPLBAAAANAxBGdAbzNkyBAt\nWLBAP/rRjxQQEGB2OQAuoKmpSRs3btSPfvQjFRUVKS4uzuySAAAAAHTMO4wdAXqhESNGEJoBPZzV\natXYsWPNLgMAAADAJSA4A2CKjIwMPffccx7bWlpa9Oqrr+q2224zfM8f/vAHpaenKyEhQdHR0Zo5\nc6aeeeYZ1dXVtWn7wQcfaP78+UpISNDUqVO1YsUKHT9+/JJq/rb6JCk7O1u33367YmNjlZaWpmef\nfVaNjY0dbvfpp59q1apVam5uvqSaGxsb9dRTTyk1NVWxsbFavHixJkyYoIiICL3xxhuXtO/2WrVq\nlWbNmqVx48YpLi5Os2bN0vPPP6/a2lqPdh05vwAAAADQHQjOAHS7F154QevWrdPy5cvd2w4cOKC7\n7rpLv/nNb1RfX2/4vm3btmnZsmXKzMxUXl6eHn/8cb366qt68MEHPdr97W9/08MPP6w5c+Zox44d\nWrNmjbKysrRs2TI5HI5O1dye+ux2u+6++25NmzZNu3bt0urVq/X222/r5z//eYfbXX/99fL19dWi\nRYtUXV3dqZol6U9/+pM+//xzbdq0SU8++aQWL16s9957r9P764zs7GwtXLhQ27dvV05Ojh577DGt\nWrVKDzzwgEe79p5fAAAAAOguBGcAutWqVav04YcfauXKle6FDIqLi/Xcc89pyZIlio+Pv+B7/f39\ntWjRIgUHB8vf319z587V7NmztWXLFh0+fNjd7o033lBYWJh++MMfauDAgYqPj9c999yjoqIi5eXl\n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\n6y795je/UX19veH7tm3bpmXLlikzM1N5eXl6/PHH9eqrr+rBBx/0aPe3v/1NDz/8sObMmaMdO3Zo\nzZo1ysrK0rJly+RwODpVc3vqs9vtuvvuuzVt2jTt2rVLq1ev1ttvv62f//znHW53/fXXy9fXV4sW\nLVJ1dXWnapakP/3pT/r888+1adMmPfnkk1q8ePFlG5J0IdnZ2Vq4cKG2b9+unJwcPfbYY1q1apUe\neOABj3btPb/ofT788ENNmTLlsuy7s/cTrldjXK+4kI8//lgzZsyQl5eX/v73v+uXv/ylx+vNzc1a\nuHChx7bIyEh9+OGHevzxx/Vv//Zv+vOf/9zh4/aEa7yjuAd1HvcgAD0RwRmAbrVq1Sp9+OGHWrly\npfz9/SVJxcXFeu6557RkyRLFx8df8L3+/v5atGiRgoOD5e/vr7lz52r27NnasmWLe9JlSXrjjTcU\nFhamH/7whxo4cKDi4+N1zz33qKioSHl5eR2uub31vfTSSwoJCdGPf/xj+fn5acKECbr//vv1l7/8\nRfv37+9wux/84AeKj4/X9773vU4Hfhs3blRycrICAwO1aNEizZkzp1P7aa+GhoY2T9etVquWLl2q\nwYMHy9/fXzfffLNuvPFGbd26VceOHXO3a+/5Re/V1SuDXcr9hOuV6xUdN3/+fDmdTsNhY9u3b9f2\n7dtVVlbW5rXNmzdr7ty5HT5eT7rG24t7UPtxDwLQWxCcAeg25eXlev755/Xoo4/K19fXvT0uLk4v\nv/yybrnlFvn4+Fzw/WvXrm0zKeqgQYMkyeOJ7uHDhxUaGurxR/rw4cMlSd98802H625PfQ6HQ5s3\nb9akSZM8jnvttdfK6XRq48aNHWrn8sgjj6ioqEhr167tcN3Sud9Fdy4e8dZbb6mystJj2+rVqz3O\ntyT35Nith1S09/yi97JarV22r0u5n3C9nsP1io6aPXu2rFar/vnPf7Z5bevWrQoLC9Pf//53j+0N\nDQ0qLi7WzJkzO3SsnniNtwf3oPbjHgSgtyA4A9Bt1q1bJ6fTqfT09C7b55EjR9S/f3+Fh4e7t4WH\nh+vEiRMe7Vzzm40aNarLjt3aV199pbq6Oo0YMcJj++jRoyVJJSUlHWrnEhQUpEmTJmnt2rXqyCLI\nW7du1cyZM3Xs2DG9++67ioiIuOiTb6fTqTVr1ui6665TdHS0kpOTde+997Z52p6VlaX09HQlJiYq\nJiZGN954o7744gtJ0q9//Wv99re/1cGDBxUREXHRP5LKy8sVGBiokSNHXvTnMDq/6L3Ky8s1a9Ys\nxcXFady4cbrzzjuVnZ3t0WbLli1KSEjQ//zP/1x0X5dyP+F65XpF5wwcOFAzZ85URkaGGhoa3Ntd\nPZzmzJmjTz75xOM9mZmZuuaaa9zBeW++xrsK9yDuQQB6F4IzAN1m06ZNGjNmjAYMGNAl+6uvr9e2\nbdu0cOFCj54sy5cv1/Hjx7Vu3TrV1dXJbrdr7dq1uuaaay7byoOuYM41lMTF19dX/fv3dwd57W3X\nWkJCgo4cOaLi4uJ21zNjxgxt2bJFQ4cO1e23367y8nIVFRVdsP2LL76o5557TsuXL9euXbv09ttv\n6/Dhw7rzzjs9ajpx4oTmzp2rzMxMZWVlyc/PTw8//LAk6cknn1R6erpGjx6t8vJybdmyxeMYDodD\nR44c0WuvvaaMjAw99dRTF+2BdKHzi94rKChIf/7zn1VQUKCPPvpITU1NWrJkiQ4cOOBu45rcuqWl\n5aL7upT7Cdcr1ys6b968eWpoaFBGRoZ729atWzV9+nTNmTNHJSUlHtf05s2bNW/ePPf3vf0a7wrc\ng7gHAehdCM4AdIszZ87oq6++cj8l7QorV65UaGioVqxY4bF90qRJeuCBB/SrX/1KCQkJuuGGG1RX\nV9dmRa6udPbsWUlqM2xAkiwWi/vJfHvbtRYZGSnp8j35bmho0Jo1azR79mzdeuutGjhwoGJjY/X0\n00/r5MmTWr9+vbvtnDlz9MgjjygoKEjBwcG6/vrrVVVVpZMnT37rcSZPnqzJkyfrxRdf1BNPPOHx\nh5SRC51f9F7+/v4aOXKkLBaLYmJi9Oyzz+rs2bPasGGDu82sWbO0d+9ePfTQQxfcz6XeT7heuV7R\neenp6erfv7/HcM1t27ZpypQpSk1NVVhYmD7++GP3a3l5eZo+fbr7+95+jXcF7kHcgwD0LgRnALpF\nZWWlnE6n+vfv3yX7+8c//qGPP/5Yr7/+epsnsb/73e+0fv16rV+/XkVFRdq6datsNptuu+22yzZh\nrGs+DqMJeZuamtw/d3vbteZ62n65nnzb7XbV1dUpOTnZY/v48eNltVovuqCCay4UVw+Ci9mxY4d2\n7dqll156Se+++67mzJnTZm4Tl4udX1w5YmNjNXDgwA71jJAu/X7C9cr1is7z9/fXrFmz9Nlnn8np\ndKqxsVEWi0UWi0VeXl666aab3POclZWVKSEhocPzZvXka7wrcA/iHgSgd+m+2R8B9Gmup6bnT/ja\nGR999JHWrFmjN9980z1hrMuxY8f08ssv68EHH9TUqVMlSX5+fnr22WeVnJys1atX61e/+tUl13C+\nkJAQSVJtba3H9vr6ep09e1ahoaEdatea63fm+h12NdfS9UYfNgMDAz1q3bRpk1avXq2ysjLV1NR0\naOUui8WiwYMHa8aMGRo5cqS+853vaOXKlXryySc92l3s/OLKY7VaO7wC3KXeT7hevx3XKy5m3rx5\n+vvf/678/HwdOXLEY36qOXPmaN26dTp48GCnV9Psydd4V+Ae9O24BwHoSehxBqBbuJ6Ktucp48Ws\nW7dO77//vtavX2/4Aam8vFzNzc1tXgsICFBwcLDsdvslHf9CwsPD5e/v32bVzoMHD0o617OmI+1a\na2pqkqTL9uQ7MDBQUtsP5tK5D8iuFUkrKip03333KSQkRH/9619VWFion/3sZ506ZkREhLy9vduc\nj//H3r2HRVknfh//cBZRPB8BRQOUoyjgITXLoNrMVjcPeay20mwt236WdvU8Zbvrrtbulu6WaVqm\npSZb1tpubbh2EM0DKHIWUPEEoigeQE4D8/zhM/NzcjRA5AZ8v66Lq8ube+75zEz3MHz4fr/3z72+\naF5MJpPOnTun7t271+p2N/p+wvlaO5yv+KmRI0fKw8NDcXFx2rVrlwYOHGj9XmRkpDp37mwt1oYM\nGVLr4zfmc7w+8B5UO7wHATAaxRmABtGhQwc5ODjo4sWLdbq92WzWokWLdODAAa1YseKaQ/G7du0q\n6fLIsyuVlJTo3Llz1g909c3Z2Vl33XWXdu3aZbPg8bfffisHBwfFxMTUar8rWZ6zjh073pTsffr0\nkYeHh5KTk222JyUlqbKyUqGhoZIur5diMpk0ffp09ejRQ25ubnJwcLjusYuKiuyuY2MpOC2vR01f\nXzQvP/74o6qrqxUSElKr293o+wnnq32cr6gpNzc3xcTE6N///rdatGghR8f//ZXC0dFR9913nz77\n7DN17Nix1tM0pcZ9jtcH3oPs4z0IQGNFcQagQbi7u6tHjx51XmMsOztb7777rtavXy8/Pz/5+vra\nfK1YsULS5b/ODhkyROvXr9fu3btVVlam/Px8vfTSS5KkiRMnWo85e/ZsRUREKDU19cYfoKRnn31W\nhYWFevPNN3Xp0iXt3btXK1as0Lhx49S7d+9a72dheWppUekAACAASURBVM4sf1mu79xubm568skn\n9fXXX2vTpk0qLi5WZmamXn75ZXXu3FmTJ0+WJOuooPj4eJWXl+vw4cNXrWXStm1bFRQU6Pjx4yop\nKZGrq6u2bdumHTt2qLi4WCaTSWlpaXr++efVsmVLPfHEE5Jq/vqiaausrLRO10lNTdWCBQvk5eWl\n8ePHW/f57rvvFBwcrL///e/XPM6Nvp9InK8S5ytuzOjRo3Xo0CHdfffdV31v1KhRys7O1r333nvV\n95rqOc5nhst4DwJwK6I4A9BgRo4cqaysrKuuArVv3z6NGzdOAwcOVFJSkjIyMhQVFaWHHnpIu3fv\nlnT5r4s14eDgoHfeeUejR4/Wiy++qLCwMEVHRysvL0/vvvuuzXSSyspKnTlzRnFxcdc9Zk3ySVJA\nQIDWrl2rH374QeHh4Xrqqac0YcIELVy40OZ4Nd3PIjk5WV27drV+CK5J7hMnTmjUqFEqLCzUF198\noQceeEBfffWVVq5cqXHjxkmSFi5cqKeeekqSNGfOHL344otaunSpwsPDNXHiRHl7e+uTTz5Ry5Yt\nJV3+ED5r1iytWbNGUVFR+vOf/6zBgwdLksaNG6f8/HxNnTpVHTp0UHR0tB599FGVlpYqMjJS8+bN\n06BBgxQUFKSnn35a3t7e2rRpk/r06SOp5q8vmq6xY8eqU6dOuvPOO9W3b19NmzZNwcHBio2NVatW\nrWp9vBt5P5E4XzlfcaNGjBihwMBADRgw4KrvRUVFKTAwUIMGDarz8RvbOc5nBt6DANy6HMy88wBN\nSocOHfT8889r6tSpRkeptdzcXEVHR+uNN97Q2LFjjY6j6upqPfzwwxo3bpwmTJhgdBy7ioqKNHjw\nYM2dO1dPPvmkpKaRG5dlZmbqvvvuU3p6ugIDA+v9+EePHlXPnj21adMm9e/fv96P35g1tvcTifO1\nKXr22Wfl5OSkzz777KYcf8iQIQoODtb//b//96YcvzlrbOd4UziXeQ9qnr766ivNmjVLJpNJTk5O\nRscBbkWxjDgD0GB8fX31/PPPa+nSpSopKTE0S1VVlb755hsVFxdr9OjRhma5nrfeektBQUF67LHH\nJDWd3MDN1pjeTyw4X4H605jO8aZyLvMeBAA3B8UZgAb19NNP6/7779czzzxT50V/68POnTv11Vdf\n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\nQ0OtI8kYnVK/rpzemZCQoPj4eJ0/f16tW7dWv379rKPSIiMjuRogbNR02uWgQYPk4uJidNxmy7Jc\nw08vSJCbmyuz2SxPT0/17NnTpkwLCgri5zmaJMvnBcv0Sst6ZEePHrX+/+7n52czioz1AgH8BMUZ\ngBt3/vx564gByjTUt5+WZKmpqdZfuO2VZFy6vWH9dHrnDz/8oCNHjsjZ2dm6GHJkZKQGDx7cZC+q\ngNqrrq5WTk6O9WdDQkKCsrKy5OTkZDPtcvjw4erVq5fRcaHLP8tzcnJsyrT9+/ersLBQ0uXpnpbR\naZav0NBQCnI0GgUFBUpJSbFZgywzM1MVFRVycXGRn5/fVVez7NWrF58ZAPwcijMAN8e5c+eUmppq\nU6ZlZGRI0lVlWmRkpNq2bWtwYjQG9kqy5ORk61VgLevsUZI1btea3tmlSxfr6xcVFaXg4GDWhWkm\nLFOlLRebSUxM1Llz566adjl8+HDe75uYvLw86+g0ywUJ9u3bp9LSUjk7O8vLy8t6IQJLoebn58e5\njZvm/PnzysrKshZkqampSktL06VLlyT979WwLVMsg4ODFRISwkVuANQVxRmAhpOfn2/9hcpSpp08\neVKS1LlzZ2spYvmwwzoSzVtVVZUOHjxoU5JZFuBt1aqV9aqOlpKMxXebLst6idu3b9e2bduY3tkM\nnDp1SsnJydb38qSkJFVWVqpr1642i/gz7bJ5MplMOnr0qHV0mqVQs6yDalk/LSQkxFqmMf0NtVVZ\nWanDhw9bp1da1iOzXEW2bdu2CgoKshlFFh4erlatWhmcHEAzQ3EGwFiWhYstX7t27dLp06fl5OSk\n2267TSEhITaj09zd3Y2OjDqwlGR79uxRTk6OtSgrLS2Vi4uL/P39rSNSKMmav6qqKmVmZlpHpW3b\ntk25ubk20ztDQkI0ZMgQde/e3ei4tzzL+WsZTZaammp32uUdd9whX19fo+PCQBUVFcrOzrYp0xIT\nE61/JGvTpo0CAgKso9JCQ0MVFBQkDw8Pg5PDSCaTSXl5eTYL9VumWlZXV8vV1VW33XabzSiyyMhI\ndevWzejoAG4NFGcAGp8ry7SEhATt3LlTZ86ckbOzs3r37m1TprG+SuNkWWfEMoosISFB58+fl4OD\ng1xcXBQSEqJf/epXGjFihAYOHChXV1ejI8NgV07vTEhI0J49e1RZWcn0TgP8dNql5fxt3bq1wsLC\n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\nld3bLFmyRNHR0QoODpa/v79GjBihP/3pTyopKblq3y+++EIPPviggoODdfvtt2vu3Lk6ffr0DWX+\nuXyStGfPHj300EPWaXqLFi1SRUVFrfeLi4vTsmXLVFVVdUOZKyoq9NprrykyMlJ9+/bVlClTNGDA\nAPn6+urjjz++oWPX1LJlyzRy5Ej16dNHgYGBGjlypP7yl7+ouLjYZr/avL4AAACNEcUZAAC4YW++\n+aZWr16t2bNnW7cdPnxYEyZM0O9//3uVlpbavd2OHTv0yCOPaPv27UpKStILL7ygVatW6emnn7bZ\n78svv9ScOXN0//33a+fOnVq5cqV2796tRx55RCaTqU6Za5IvKytL06ZN09ChQ7V3714tX75cGzdu\n1Msvv1zr/WJiYuTm5qbJkyfrwoULdcosSe+9956+++47bd26Va+88oqmTJmizz77rM7Hq4s9e/Zo\n0qRJ+vHHH5WQkKD/+Z//0bJlyzRr1iyb/Wr6+gIAADRWFGcAAOCGLFu2TP/85z/19ttvW9dky8jI\n0OLFizV16lQFBQVd87YeHh6aPHmy2rZtKw8PDz3wwAO677779P333ys/P9+638cff6wuXbpo5syZ\nat26tYKCgvTEE08oPT1dSUlJtc5c03xLly5Vp06d9Nvf/lYtW7bUgAED9NRTT+kf//iHDh48WOv9\nfv3rXysoKEiPPvponQu/b775RmFhYfL09NTkyZOt0wdvlrKysqtG5Lm4uGj69Olq3769PDw8NGrU\nKN17773atm2b9aqUUs1fXwAAgMaK4gwAANRZbm6u/vKXv+j555+Xm5ubdXtgYKDeffddjRkzRq6u\nrte8/fvvvy8nJyebbe3atZMkm1Fg+fn56ty5sxwcHKzbunXrJkk6ceJErXPXJJ/JZNK3336rQYMG\n2dzvnXfeKbPZrG+++aZW+1k899xzSk9P1/vvv1/r3NLl58LZueGWqf3kk0905swZm23Lly+3eb0l\nqUuXLpJkMw2zpq8vAABAY0VxBgAA6mz16tUym82Kjo6ut2OePHlSLVq0kI+Pj3Wbj4+PCgsLbfaz\nrG/Wo0ePervvKx07dkwlJSXy8vKy2d6zZ09JUmZmZq32s2jTpo0GDRqk999/X7W5uPm2bds0YsQI\nnTp1Sp9++ql8fX2vO1rObDZr5cqVuvvuu+Xv76+wsDA9+eSTNiPgJGn37t2Kjo5WSEiIAgICdO+9\n9+qHH36QJP3ud7/TH/7wBx05ckS+vr4aMWLENe8vNzdXnp6e8vb2vu7jsPf6AgAANFYUZwAAoM62\nbt2q3r17y93dvV6OV1paqh07dmjSpElycXGxbp89e7ZOnz6t1atXq6SkRFlZWXr//fd1xx13qH//\n/vVy3z9lKeYs008t3Nzc1KJFC2uRV9P9rhQcHKyTJ08qIyOjxnmGDx+u77//Xh07dtRDDz2k3Nxc\npaenX3P/t956S4sXL9bs2bO1d+9ebdy4Ufn5+Ro/frxNpsLCQj3wwAPavn27du/erZYtW2rOnDmS\npFdeeUXR0dHq2bOncnNz9f3339vch8lk0smTJ/Xhhx8qPj5er732ms3r9lPXen0BAAAaK4ozAABQ\nJ5cuXdKxY8esI6vqw9tvv63OnTtr7ty5NtsHDRqkWbNmacGCBQoODtY999yjkpKSq67iWZ/Ky8sl\n6aqphpLk7OyssrKyWu13pV69ekm6ejRafSkrK9PKlSt13333aezYsWrdurX69u2rhQsX6uzZs1q3\nbp113/vvv1/PPfec2rRpo7Zt2yomJkZFRUU6e/bsz97P4MGDNXjwYL311lt66aWXNHr06Ovuf63X\nFwAAoLGiOAMAAHVy5swZmc1mtWjRol6O9/XXX+tf//qX1q5de9XorTfeeEPr1q3TunXrlJ6erm3b\ntikiIkK/+tWvbtoi85Y1vOwt4l9ZWWl93DXd70qWEXr2RqPVh6ysLJWUlCgsLMxme79+/eTi4nLd\nCypY1k+rqqr62fvZuXOn9u7dq6VLl+rTTz/V/ffff9V6aBbXe30BAAAaK4ozAABQJ5aRVj9dJL4u\nNm/erGXLlmnDhg1XrZF16tQpvfvuu5o8ebJuv/12tWzZUj4+Plq0aJEKCgq0fPnyG75/ezp16iRJ\nKi4uttleWlqq8vJyde7cuVb7XcnynFmew/p24cIFSVdPH5UkT09Pm6xbt27VxIkTNWDAAPn7++tP\nf/pTje/H2dlZ7du31/Dhw/W3v/1NWVlZevvtt6/a73qvLwAAQGNGcQYAAOrEMpKqJiOTrmf16tXa\ntGmT1q1bZ70y45Vyc3NVVVV11fdatWqltm3bKisr64bu/1p8fHzk4eFx1VU7jxw5Iknq27dvrfa7\nUmVlpSTV22i9n/L09JR0dZknXS7VLFckzcvL04wZM9SpUyd9/vnnSk1N1fz58+t0n76+vnJycrrq\n9fi51xcAAKAxozgDAAB10qFDBzk4OOjixYt1ur3ZbNaiRYt04MABrVix4prT97p27Srp8sizK5WU\nlOjcuXPWEqi+OTs766677tKuXbtUXV1t3f7tt9/KwcFBMTExtdrvSpbnrGPHjjcle58+feTh4aHk\n5GSb7UlJSaqsrFRoaKiky2usmUwmTZ8+XT169JCbm5scHByue+yioiI9++yzV223FJyW16Omry8A\nAEBjRnEGAADqxN3dXT169KjzGmPZ2dl69913tX79evn5+cnX19fma8WKFZIuj+gaMmSI1q9fr927\nd6usrEz5+fl66aWXJEkTJ060HnP27NmKiIhQamrqjT9ASc8++6wKCwv15ptv6tKlS9q7d69WrFih\ncePGqXfv3rXez8LynFlGo9V3bjc3Nz355JP6+uuvtWnTJhUXFyszM1Mvv/yyOnfurMmTJ0uSunfv\nLkmKj49XeXm5Dh8+fNX6Z23btlVBQYGOHz+ukpISubq6atu2bdqxY4eKi4tlMpmUlpam559/Xi1b\nttQTTzwhqeavLwAAQGNGcQYAAOps5MiRysrKuurKkfv27dO4ceM0cOBAJSUlKSMjQ1FRUXrooYe0\ne/duSZdHJNWEg4OD3nnnHY0ePVovvviiwsLCFB0drby8PL377rsaOHCgdd/KykqdOXNGcXFx1z1m\nTfJJUkBAgNauXasffvhB4eHheuqppzRhwgQtXLjQ5ng13c8iOTlZXbt2tRZnNcl94sQJjRo1SoWF\nhfriiy/0wAMP6KuvvtLKlSs1btw4SdLChQv11FNPSZLmzJmjF198UUuXLlV4eLgmTpwob29vffLJ\nJ2rZsqWky8XdrFmztGbNGkVFRenPf/6zBg8eLEkaN26c8vPzNXXqVHXo0EHR0dF69NFHVVpaqsjI\nSM2bN0+DBg1SUFCQnn76aXl7e2vTpk3q06ePpJq/vgAAAI2Zg5lPNQAAGGrr1q26++67tXfvXrVv\n397oOLWSm5ur6OhovfHGGxo7dqzRcVRdXa2HH35Y48aN04QJE4yOY1dRUZEGDx6suXPn6sknn5TU\nNHLjf/31r3/V1q1blZKSYnQUAABwc8Uy4gwAANSZr6+vnn/+eS1dulQlJSWGZqmqqtI333yj4uJi\njR492tAs1/PWW28pKChIjz32mKSmkxsAAOBWRHEGAABuyNNPP637779fzzzzTJ0vFFAfdu7cqa++\n+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\nhYWFKioqUlNTk9mlXbba2lp5eg7vzypDQkKUmpqqlJQUpaSkKDk5WYGBgWaXhStQW1ubSktLtW/f\nPuPLarXq7NmzZpeGHvL09FRYWJgSExOVkJCg+Ph4JSQkKCQkxOzSMIIcP35cn332mT777DN9+umn\nKisrc+k9it4bN26c0tPTtXDhQl177bVKTU012lKMdB4O/vUAAIBBduDAARUWFqqgoED5+fnau3ev\nzp49Kx8fH0VHRysuLk4Wi0Xjx483u9TL8vrrr+u6667T9OnTzS6lzxwOhw4dOiSbzSabzaba2lp5\neHho5syZRpiWnJyspKQkBQQEmF0uRpDjx4+ruLhYVqvVCMiqqqrU2dmpsWPHKioqSrNnz9bs2bM1\nadIks8tFD9ntdh08eFDl5eWqqKjQ0aNH5XA4FBgYqISEBM2ZM8cI0ywWi0aPHm12yRgGjh07pk8/\n/VSfffaZduzYocrKSnl5eclisWju3LmKi4tz2e0avXf69Gnl5eUpLy9PdXV18vX1VVpamhYtWqSF\nCxcqLS1NY8aMMbvMgfA2wRkAABhQNTU1KiwsNIKyPXv26NSpU/Ly8tKsWbNksVhksVgUFxenuLi4\nEfWi6/DhwwoNDTW7jH517tw5VVZWGrMDbTabTpw4IUmaOnWqEaQlJycrIyNDEyZMMLliDHWdnZ06\nevSoSktLjXGisLBQx48flySNHz9eERERRqAeFxenWbNm8SZ4hGhubtbBgwdVVVWlkpISlZSUqLS0\nVC0tLfL29tbVV1+t2NhYY1xJSUnRtGnTzC4bJqupqVFubq62bdum7OxslZeXy9vbWzExMca/k4yM\njGH/AdxQdfToUeXn56uwsFA5OTk6evSovL29lZCQoKysLKWnp+vaa68dKX9/gjMAANB/uodkhYWF\nysvL04kTJ9yGZBaLRWPHjjW7ZPSDuro62Ww2lZSUyGazqbi4WCdPnpSXl5ciIyNdwrSkpCT5+vqa\nXTJMcu7cORUXF6usrEylpaUqKCiQ1Wo1QpKZM2cqIiJCERERslgsSkhI0JQpU8wuG4PMbrfr2LFj\nRphms9m0f/9+HTlyRJIUGBjoEqbFxsYyO22EO3jwoHJycpSbm6uPPvpIhw8flre3t2bPnq2MjAwl\nJycrLS1N/v7+Zpd6Raqrq1NBQYFyc3NVUFCgqqoqeXt7Kz4+XhkZGcrIyFBWVtZw/TCN4AwAAPRN\n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\noHUAA6Wrq0v79+83grRdu3bp9OnTGjdunNLS0oydOzMzMzV69OgLf5zgDAAAs+3evVtZWVlqbm7W\nmDFjFBMTo7i4OMXHx8tisSg8PHzE9UcBhoPGxkbZbDYVFxcb/YycvYwWL16sjz/+eEAed/r06aqt\nrTX+e/bs2cZXTEyMQkJCCM6BEaS5uVkVFRUqLy9XWVmZysvLVVlZqZaWFnl5eenpp5/Wj370owF5\n7O9+97t64YUX5OnpqZiYGKWmpmrevHlKTU3VhAkTBuQxAbM5HA5VVVVp9+7dysvLU15enk6ePCk/\nPz/t3LlT8fHx3U9/29usQgEAwBdaWlrU3Nyst956S0lJSfL25n/PwFDg7++vBQsWaMGCBcaxhoYG\n/fSnP1VFRcWAPe6pU6f06KOP6v7772cWGXAF8PPzM2aYOXV1denIkSN64IEH1NDQMGCPferUKc2d\nO1ebNm2Sv7//gD0OMJR4eHgoKipKUVFRuu+++yRJeXl5WrlypVpaWi46n4+qAAAYIsLDwwnNgCEu\nMDBQ06dPH/DHCQ0NJTQDrmCenp4KCwsblDArMDCQ0AxXvKuuuupLbyM4AwAA/SInJ0fPPvusy7Gu\nri698sor+upXv+r2Z5577jllZWUpNjZWERERWrhwof7jP/5Dzc3NF537hz/8QcuXL1dsbKwWLFig\ndevW6eTJk5dV8z+qT5Ly8/N1xx13KDo6WqmpqVq/fr3a29t7fd7WrVv10ksvyW63X1bN7e3tevrp\np5WSkqLo6GitWrVKSUlJCg0N1euvv35Z991TL730khYvXqyoqCjNnj1bixcv1i9+8Qs1NTW5nNeb\n5xcjyy233KLQ0FCFhoYqNTVVTz/99D/8mUOHDmn58uWKiYlRWFiY1qxZ06fH7stYJPX8Wu8Nxpi+\nYYyB0/LlyzVz5kzdfPPNA3L/AzVecD2OrOuR4AwAAFy2X/7yl3rttdf08MMPG8cOHTqklStX6ic/\n+YlaW1vd/tzOnTt13333KTc3V1arVY899pheeeUVPfTQQy7n/elPf9LatWu1dOlS7d69W5s2bVJe\nXp7uu+8+dXZ29qnmntRXVVWle++9V+np6SoqKtKGDRv01ltvXdRrpifnLVmyRKNHj9Y999yjc+fO\n9almSfrv//5vffrpp9q+fbuefPJJrVq1Su+8806f768v8vPzdffdd2vXrl0qKCjQv/7rv+qll17S\ngw8+6HJeT59fjDx//vOflZmZKQ8PD33wwQf68Y9/7HK73W7X3Xff7XIsLCxMf/zjH/XYY4/pK1/5\nijZv3tzrx+3rWNTTa703GGP6jjEGTn/84x81f/78AbnvgRwvuB5H1vVIcAYAAC7LSy+9pD/+8Y96\n8cUX5efnJ0kqLy/Xs88+q9WrVysmJuZLf9bPz0/33HOPAgMD5efnp1tvvVU33XSTduzYYTRHl6TX\nX39dwcHB+va3vy1/f3/FxMTogQceUFlZmaxWa69r7ml9zz//vKZMmaJ/+Zd/ka+vr5KSkvSd73xH\n//u//6sDBw70+rx/+qd/UkxMjO6///4+B34fffSR4uPjFRAQoHvuuUdLly7t0/30VFtb20Wfuvv4\n+GjNmjWaOHGi/Pz8dMstt+jGG29Udna2Tpw4YZzX0+cXI9Py5cvlcDjcbqKwa9cu7dq1S9XV1Rfd\n9sknn+jWW2/t9eNdzljU02u4pxhjeo4xBj3h4eHRr/c3GOMF1+PIuR4JzgAAQJ8dPnxYv/jFL/S9\n733PZfvu2bNn6+WXX9Ztt92mUaNGfenPv/rqqxftGOrcxav7J721tbUKCgpyeeE8bdo0SdKxY8d6\nXXdP6uvs7NQnn3yitLQ0l8ddtGiRHA6HPvroo16d5/Too4+qrKxMr776aq/rlr74WwxmL7zf/e53\nqq+vdzm2YcOGi7ZrDw4OliSXJRk9fX4xMt10003y8fHRtm3bLrotOztbwcHB+uCDD1yOt7W1qby8\nXAsXLuzVY13OWNTba7gnGGN6jjEGPeHj49Nv9zWY4wXX48i4HgnOAABAn7322mtyOBzKysrqt/s8\nfvy4xowZo6uvvto4dvXVV+vUqVMu5zn7m11zzTX99tjd/e1vf1Nzc7NmzJjhcjwkJESSjF0Ve3qe\n0/jx45WWlqZXX31VDoejx/VkZ2dr4cKFOnHihH7/+98rNDT0kp+IOxwObdq0Sddff70iIiIUHx+v\nb37zmxfNnsnLy1NWVpYsFosiIyN144036rPPPpMk/fu//7t++tOf6siRIwoNDb1kmHH48GEFBARc\nsrmu5P75xcjk7++vhQsXKicnR21tbcZx58yLpUuX6i9/+YvLz+Tm5uraa6813iTv2LFDsbGxeuGF\nFy75WJczFvX2Gu4vjDGMMei5w4cPa/HixZo9e7aioqJ05513Kj8/3+WcoThecD2OjOuR4AwAAPTZ\n9u3bNXPmTI0dO7Zf7q+1tVU7dzInX6oAACAASURBVO7U3Xff7fLp8sMPP6yTJ0/qtddeU3Nzs6qq\nqvTqq6/q2muvVWJiYr889oWcwZxzCYfT6NGjNWbMGCPI6+l53cXGxur48eMqLy/vcT2ZmZnasWOH\nJk+erDvuuEOHDx9WWVnZl57/q1/9Ss8++6wefvhhFRUV6a233lJtba3uvPNOl5pOnTqlW2+9Vbm5\nucrLy5Ovr6/Wrl0rSXryySeVlZWlkJAQHT58WDt27HB5jM7OTh0/fly/+c1vlJOTo6effvqSswK+\n7PnFyLVs2TK1tbUpJyfHOJadna2MjAwtXbpUFRUVOnTokHHbJ598omXLlhnfOxtrd3V1XfJxLmcs\n6ss13B8YYxhj0HPjx4/X5s2bZbPZ9P7776ujo0OrV692GT+G6njB9Tj8r0eCMwAA0CctLS3629/+\nZnzK2h9efPFFBQUFad26dS7H09LS9OCDD+qpp55SbGysbrjhBjU3N1+0E1Z/On/+vCRdtOxAkry9\nvY0ZND09r7uwsDBJAzeTpa2tTZs2bdJNN92k22+/Xf7+/oqOjtYzzzyj06dPa8uWLca5S5cu1aOP\nPqrx48crMDBQS5Ys0ZkzZ3T69Ol/+Djz5s3TvHnz9Ktf/Uo/+MEPXAIPd77s+cXIlZWVpTFjxrgs\n19y5c6fmz5+vlJQUBQcH689//rNxm9VqVUZGhvH94sWLVVpaqu9+97tf+hiXOxb15RruD4wxjDHo\nOT8/P1111VXy9vZWZGSk1q9fr/Pnz+uNN94wzhmq4wXX4/C/HgnOAABAn9TX18vhcGjMmDH9cn8f\nfvih/vznP+u3v/3tRZ/k/uxnP9OWLVu0ZcsWlZWVKTs7W8nJyfrqV786YA1nnf083DX07ejoMH7v\nnp7XnfNT7oGayVJVVaXm5mbFx8e7HE9ISJCPj88lN1Rw9lJxfnJ/Kbt371ZRUZGef/55/f73v9fS\npUsv6o3idKnnFyOXn5+fFi9erI8//lgOh0Pt7e3y9vaWt7e3PDw8dPPNNxt9zqqrqxUbG9vrfj6X\nOxb15RruD4wxjDHou+joaPn7+/dqFpdkznjB9Tj8r8fB6zIHAABGFOenrhc2jO2L999/X5s2bdKb\nb75pNJx1OnHihF5++WU99NBDWrBggSTJ19dX69evV3x8vDZs2KCnnnrqsmu40JQpUyRJTU1NLsdb\nW1t1/vx5BQUF9eq87px/M+ffsL+dO3dO0sVLSSQpICDApdbt27drw4YNqq6uVmNjY692/vL29tbE\niROVmZmpq666Stddd51efPFFPfnkky7nXer5xci3bNkyffDBByouLtbx48dd+uYsXbpUr732mo4c\nOdLn3TQvdyzqyzXcHxhj/jHGGFyKj49Pr3erNGO84Hoc/phxBgAA+sT5qWpPPqW8lNdee03vvvuu\ntmzZ4vYF1uHDh2W32y+6bdy4cQoMDFRVVdVlPf6Xufrqq+Xn53fRrp1HjhyR9MWn3b05r7uOjg5J\nGrCZLAEBAZIufmEvffEC27kjaU1Njb71rW9pypQpeu+991RSUqInnniiT48ZGhoqLy+vi56Pf/T8\nYuRbvHix/Pz8tHXrVu3Zs0dz5841bktJSVFQUJARrM2fP7/X93+5Y1FfruH+wBjTO4wx6K6zs1MN\nDQ2aPn16r37OjPGC63H4IzgDAAB9MmnSJHl4eKixsbFPP+9wOLR+/XpVVlZq48aNXzqVf+rUqZK+\nmHnWXXNzsxoaGowXhP3N29tb1113nfbs2ePSaPiTTz6Rh4eHlixZ0qvzunP+zSZPnjwgtUdFRcnP\nz0/FxcUux61Wqzo6OhQXFyfpi34rnZ2dWrNmja655hqNHj1aHh4el7zvM2fOuO0f4ww4nc9HT59f\njHyjR4/WkiVL9MEHH2jMmDHy9Pz7WxBPT0/ddNNNeueddzR58uReL9OULn8s6ss13B8YY9xjjEFP\n7Nq1S11dXbJYLL36OTPGC67H4Y/gDAAA9MnYsWN1zTXX9LnHWHV1tV5++WW98cYbCg8PV2hoqMvX\nxo0bJX3x6e78+fP1xhtvKC8vT21tbaqtrdUPfvADSdJdd91l3OfDDz+s5ORklZSUXP4vKOm73/2u\nTp06pV/+8pdqaWlRUVGRNm7cqBUrVmjmzJm9Ps/J+TdzfjLd33WPHj1a3/zmN/Xhhx/q3XffVVNT\nkyoqKvSjH/1IQUFBuueeeyTJ+KQ+JydH58+f16FDhy7qhRIYGKi6ujp9/vnnam5u1qhRo5Sdna2d\nO3eqqalJnZ2dKi0t1fe+9z35+vrqgQcekNTz5xdXhmXLlungwYO6/vrrL7rtlltuUXV1tW688caL\nbvv0008VGxurF1544Uvv+3LHIqnn1zBjzBcYYzDYOjo6jKWFJSUleuqppzRjxgzdeeedxjlDbbxw\n4noc/tcjwRkAAOizxYsXq6qq6qJdpPbu3asVK1Zo7ty5slqtKi8vV2pqqu644w7l5eVJ+uLTyZ7w\n8PDQr3/9ay1btkzf//73FR8fr6ysLNXU1Ojll192WfbV0dGh+vp6bd269ZL32ZP6JCkyMlK//e1v\n9dlnn2nOnDn6zne+o5UrV+qZZ55xub+enudUXFysqVOnGi+ie1L3sWPHdMstt+jUqVP6wx/+oFtv\nvVV/+ctftGnTJq1YsUKS9Mwzz+g73/mOJGnt2rX6/ve/r+eff15z5szRXXfdpauuukq/+93v5Ovr\nK+mLF/EPPvigNm/erNTUVP385z/XvHnzJEkrVqxQbW2tVq9erUmTJikrK0v333+/WltblZKSoscf\nf1xpaWmKiYnRQw89pKuuukrvvvuuoqKiJPX8+cWVYeHChZo9e7aSkpIuui01NVWzZ89WWlpan+//\ncsYiqefXMGMMYwwG3+23364pU6Zo0aJFio6O1r333qvY2Fi9/fbbGjduXK/vb7DGCyeux+HPwzHS\nf0MAAIa47du36/rrr1dRUZEmTpxodjm9cvjwYWVlZelnP/uZbr/9drPLUVdXl772ta9pxYoVWrly\npdnluHXmzBnNmzdP69at0ze/+U1Jw6Nu/N1//dd/afv27bLZbANy/6NGjdLPfvYz3XbbbQNy/yPR\nYI1Fw+FaZYwZWW677Tbj3/ZAuOeee3T69Glt2LBhQO5/KBrM1y5cj8NHTU2NFixYoF27dhmB4v95\nmxlnAACgz0JDQ/W9731Pzz//vJqbm02txW6366OPPlJTU5OWLVtmai2X8qtf/UoxMTH6+te/Lmn4\n1A0MZYMxFg2Xa5UxBri0wXztwvU4MhCcAQCAy/LQQw9p6dKleuSRR/rcbLc/7N69W3/5y1/0m9/8\nRmPHjjWtjkvZtGmTysrK9NprrxlN0IdD3cBwMNBj0XC4VhljgJ4ZjNcuXI8jR++3rQEAALjAY489\npuzsbP3617/W448/bkoN6enpSk9PN+Wxe2Lr1q1qb2/Xm2++KS8vL+P4UK8bGE4Gciwa6tcqYwzQ\nOwM5XnA9jiz0OAMAwGTOHmdhYWGKj49XfHy84uLiFBsbO+K28waGo88//1zFxcWy2Wyy2Wzat2+f\nQkJCBrTHmZ+fnywWi2bPnm18RUREGLMWAIw8Z86cUVlZmcrLy1VeXq6KigpVVlbq0UcfHdAeZ++9\n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\nX1t9zbx58xQZGanu3burU6dOCgsL05///Gfl5+ffcu7atWsVExOj7t27a+DAgZo5c6bOnTt3T5l/\nKZ8kbd++XQ8//LC6du2qoKAgzZkzRzdu3Cj7eXx8vN59910VFxffU5YbN27otddeU2BgoLp27apH\nHnlEffr0kbe3tz788MN7unZFvfvuuwoPD1eXLl3UrVs3hYeH6+9//7uuXr1a7rw7+d5g24wet5Ux\nfjZs2CA/Pz8lJCTc9TV+jHFQ81GcAQAAALApb775pj744AM99dRTZceOHTum0aNH649//KMKCgqs\nvm7z5s2aNGmSUlNTlZGRoeeff16LFi3Sk08+We68uLg4zZgxQ8OHD9fWrVv1/vvvKy0tTZMmTZLF\nYrmrzBXJd+jQIU2cOFHBwcHauXOnFixYoE8++UQvvfRS2TlRUVFydnbW+PHjdeXKlbvKIknvvfee\nvvnmGyUlJemVV17RI488os8+++yur3c3tm/frnHjxmnLli3asWOH/ud//kfvvvuupk+fXu68in5v\nsG22MG4rY/xU9m5WjIOaj+IMAAAAgM149913tW7dOr3zzjtydXWVJO3fv19z587VhAkT5Ovre9vX\nurq6avz48WrSpIlcXV0VHR2toUOHauPGjTp9+nTZeR9++KFat26txx9/XA0bNpSvr6+mTJmizMxM\nZWRk3HHmiuZ7++231bJlSz377LNycXFRnz599MQTT+jTTz/V0aNHy877zW9+I19fX02ePPmui7yv\nv/5aPXv2VKNGjTR+/HgNHz78rq5TUYWFhbfMKHJ0dFRsbKyaNWsmV1dXPfjggxoyZIiSk5OVk5NT\ndl5FvzfYLlsat/c6fsLDw7V3715FRkbe8WsZB7UTxRkAAAAAm5CVlaW///3veu655+Ts7Fx2vFu3\nbpo/f75+9atfycnJ6bavX7x48S17uTVt2lSSys12OX36tFq1aiU7O7uyY23btpUknTp16o5zVySf\nxWLRhg0b1K9fv3L3HTRokEpLS/X111+XO/+ZZ55RZmamFi9efMd5pB/eY1Xvs/VjH3/8sS5cuFDu\n2IIFC8p9j5LUunVrSSq3/Kyi3xtsky2O23sdP3eLcVA7UZwBAAAAsAkffPCBSktL72qmx+2cOXNG\n9evXV/v27cuOtW/fXufPny933s19kjw9PSvt3j924sQJ5efny8PDo9zxm0+kO3DgQLnjjRs3Vr9+\n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\n8bzlvjtx8JxS1TkAABxBSURBVNv52rlqnOR0qvVz83Ro60KdP/69Spfx1MPd31KNkB6SpB3/+usN\nn02dR/vd03s8sHmOdq56U9YyngpsFKZT+z6X/dpVla/aQM17jlfFwCaSpK1LoxS3/feyz9MvUO0G\nLlT5qg307ZLhOr57lUxmqx7vP0vVGjAbDsajOAMAAACAEqZB+xH69ef/KOHXvfrsg1B5V66tWs16\nq/YjfWXz8Mk1dvfn7+mnL6fqsT5TFVC/o1Iun9a3Hw/Tusmd1ONv2+TmWUH313lcvd76QUvH1JF/\nvbZq1XdGzutTL59V4un96vXWDznb7Neuas/n76tF7w/kU6Wushxp2rRoiE4f/EYdhkarQrWHZCnt\nrl1r3ta+rz/UAw/3lO/9D0qS0pIvKqhJd9V7fJDkdOo/M3tr08LB6vv+UdVqHq6KgU20+r02qtbw\nSVVrGCpJqtG0p7z8qqv2I89KkpIvnVaWI0Pl/evf0TWzpydr74bJ+uk/k+VVIUgVq4fIKedtXaNM\n+zV9OauPGnccqbCX18uenqRt0aOVlWmX6Rb7rLfItONff1XtR/rKp0rdnG3Bj/0/Xbt6Tns3TJbV\nVlZt/998ZWVm6Ou5kdq69CVVb9xFpcxWNe/5d9efzT28x3qPD9Ll+Dj9svNTPdh6sP7y9N+VfPGk\ntiwZpi8+fEo9/7ZdHj73q2WfqbJfu6qT+z5X55Hr5V7uPknSY32nKyvLoRpNuiugPqUZCgdu1QQA\nAACAEsZiLaMuozfoL09PkHelmroSH6edq9/Sv95prvij23LGZTrStf+bj1S9YZgeeLiXSrt5ybdK\nsFqET1Z6SqIOxy6+pxzelWvLUtpNNg/fnJlQZX38VaZseVlKu+mBh3tJkq6cO5rzmuqNu+ih0Fdl\nc/eWzcNH1eo/qYzUS0pP+f2WQ+/7aql5j/E6uiNav+xaoWM/rFR2pj2nNJMkR3qyJMlq87ir3E27\njlNwq4Fq9/xilfWtelvXKDnxVznSk+VTuY7MVpvcPCuo3fOLVaZs+Vvu+yN7WpLmDSuf87N/0+xb\n5qwU9LCsZTxVpqyfgpp0V6b9mlIun86393hdKbNF3vfVktlik3fl2mrRe5Ic6Sk68t1/bwOu+9hz\ncmZn5drmSE9Wwqk9qlqv/W1lBAoCxRkAAAAAlEClzFbVe3yQeo7doS6vfKlqDUOVlpygb+Y9p4xr\nVyRJV+IPy5GRKr9qjXK9tkK1xiplKa0LJ3fnXR7L73OrsrMz/5Dx95ukbrVA//UxzuzsnG3XH0yw\nbfkoHd+zWg93ezPXa64XZpn2tHvOfbvXyNMvUG6eftq0aIj2rH9PyYm/5oy91b4/Ku3mpYEzEnN+\nHmw9+LZzmi2lJUnZWZl/MvJG9/o98AtoJEtpN105/98CtEqtlipXsYbivlsqOZ2SpGM//FtBTZ6S\nqZT5jjMC+YXiDAAAAABKuIqBTdR+0BLVbfmc0lMSFH8kVpKUce2qJNczs2xuXnKkpxRoTkm/r802\npYs+ea2WFkRV1ver33Q5LqTL3+TISHW5+H3Z8lVlttp09cKxe85zu9fIYi2j0Kg1uq9Gc+3dMFkx\n4x7SxgUDlelIv+W+W2ne8++5btPML3nxPTBbbDmzAiVJJpPqthyg5ISTOhP3rSTp6PcxuWYGAoUB\nxRkAAAAAlDBfz+2fa2bXdTWb/X5rZKb9miTJ5l5OklwWIxlpSfLwqZKPKW+Ucum0vprTT25eFdX1\nlS/Vf9JJPdxt3A3jsrMc+m7F62re412dP7FLP274INd+s8Um/7ptlJ6SqPPHv7/p+TJSL2vr0qhb\nZrqTa+RTuY6eeGGZIiYcUMP2UTq+e5V+/nr6n+4z2r1+D7KzHMpIuyoP79zjajYPl9lqU9z2Jbp6\n/heVdvNUWd+qeRccyAMUZwAAAABQwmRl2nUlPu6G7VfO/yJJ8r2/niTJp3JdWW0euvjr3lzjLpzc\nrexMu/yqNsz/sH9w+exBZWc5FPzYc/L0C5TZapNJphvGbf90jOq06KcH27yg+m2G6scvJunCiV25\nxjzU6TWZLTbtWPm3m87suhx/SKZSt36m3u1eo2tXz+Vc8zJl/dS06//Ir2oDXYmPu+W+23Ht6nl9\nu2T4bY29G/f6PYg/uk1yOlWxekiu7TZ3bwU16a5TP32ufV9PV+0W/fI8O3CvKM4AAAAAoAT6ak4/\nHd+zWva0q7KnJenUvi+0a/VbqtbgyZzizGy1qX7bYTq5d51+2fmpHOnJunT2oLZFj5Z7uUqq2zLy\nT89j8/DRtavx/7sAfsot1yv7Mx6+/pKkM4e3KMuRoasXjt+wvtbBLfPl4V1ZgY3CJElNu/xNPvfV\n1qaFg3MeCiBJ5f3r6/EBs3X57CGtmxyq3w58JXtakrKzHEpOPKXD2z7Wt5+MyFlD7WZu9xpdu3pO\nsdGjdOX8UWVn2pX42z4lXzqtCtVDbrnvlpxOZTrSdXLvZ7KW8bzDq3n7n82dfg+czmxlXLui7OxM\nXTpzQN/9668q6+uvms3Dbzh23ZbPKSszQ7/u/48C6ne44/cA5DeT0/m/q/ABAAAAAIqcUaNGafnq\nLeo06svbfs2Zw5sVt/0TJZzaq9QrZ+WUU57lA1QjpIcaPhEls8X238FOp37+ZoYOb1us5MTfZLV5\nqHLNFmrabZzKVawhSUq59Ju+mtNPib/tU6lSFvneH6yGHUeqeqPOSvxtn76a00/pyRflF9BIlR5o\nrgObZivTnibP8gFq1X+mzh/7Xj99OUX2tCS5eVZQ8x7vylTKrO9WvK605IuyuXvrkd7/UI0mT2nX\nmrd1eNvHcmZn6/66j6vyAy20/dNX5eVXXdYyZZV4Zr9s7t7q8MJyVazeVDtW/k0HNs2W05mt0m5e\nCh2xWn4B/50hlXr5jPZvnqMzBzcqOfGUMh3pstrKytOvmvyqNlCtv/RRpaCHte+radqz/j1lOtLl\n4XO/mnb5W85TP2/3Gm1aOEhXzh2RPT1Zbp4VVOsvEWrSaYxSr5y96b5TP2/Qzn+PU1LCiVt+po07\njlKTzn/VwW/na+eqccq0p6lcxSB1HLZCZ+K+1ff/HitHerLK+lbVky/+W+UqBt3w2VQIfEiHvl1w\n1+9RkmKXj9KR75bKzdNPaUkXZS7tpiq1W6r5U+/I0y/QZfZVE1vLP7iNmnb5n9v+Dv/RhRM/aO2k\nDjp16pQCAgLu6hjATaygOAMAAACAIuxuijMgv8QuH6UTP65R3/d/ue3X/Oej3nrkmffkWb7aXZ2T\n4gz5aAW3agIAAAAAgDzjzM665f4/3hJ66cwBma22uy7NgPxGcQYAAAAAAArMztVv6eqF47p64Zi+\nXTJcIWF/NToScFMUZwAAAAAA4J7tWvuOjuxYJntakmLGNtaJH9e6HGcp7aZ/vd1Mn0/rroc6vSbv\nyrULOClw+279eBAAAAAAAIDb0LTL/9zWAv8hnd9QSOc3CiARcO+YcQYAAAAAAAC4QHEGAAAAAAAA\nuEBxBgAAAAAAALhAcQYAAAAAAAC4QHEGAAAAAAAAuEBxBgAAAAAAALhAcQYAAAAAAAC4QHEGAAAA\nAAAAuEBxBgAAAAAAALhAcQYAAAAAAAC4QHEGAAAAAAAAuEBxBgAAAAAAALhAcQYAAAAAAAC4YDE6\nAAAAAADg3sQf3615w8obHQMAih2KMwAAAAAowvr166dmzZoZHaNEe+WVV9S2bVt17NjR6Cglmp+f\nn9ERUAyZnE6n0+gQAAAAAAAUVdWqVdOLL76o0aNHGx0FQN5awRpnAAAAAAAAgAsUZwAAAAAAAIAL\nFGcAAAAAAACACxRnAAAAAAAAgAsUZwAAAAAAAIALFGcAAAAAAACACxRnAAAAAAAAgAsUZwAAAAAA\nAIALFGcAAAAAAACACxRnAAAAAAAAgAsUZwAAAAAAAIALFGcAAAAAAACACxRnAAAAAAAAgAsUZwAA\nAAAAAIALFGcAAAAAAACACxRnAAAAAAAAgAsUZwAAAAAAAIALFGcAAAAAAACACxRnAAAAAAAAgAsU\nZwAAAAAAAIALFGcAAAAAAACACxRnAAAAAAAAgAsUZwAAAAAAAIALFGcAAAAAAACACxRnAAAAAAAA\ngAsUZwAAAAAAAIALFGcAAAAAAACACxRnAAAAAAAAgAsUZwAAAAAAAIALFGcAAAAAAACACxRnAAAA\nAAAAgAsUZwAAAAAAAIALJqfT6TQ6BAAAAAAARcHYsWO1detW/fFf6UOHDsnPz08VKlTI2WY2mzVp\n0iQ1btzYiJgA8sYKi9EJAAAAAAAoKqpWrarNmzffsP3ChQu5fvf09FRwcHABpQKQX7hVEwAAAACA\n29SzZ09ZrdZbjrFarerVq5dsNlsBpQKQXyjOAAAAAAC4TT4+PurQoYMslpvfwOVwOBQREVGAqQDk\nF4ozAAAAAADuQJ8+fZSVlXXT/X5+fmrVqlUBJgKQXyjOAAAAAAC4A126dFGZMmVc7rNarerbt6/M\nZnMBpwKQHyjOAAAAAAC4A+7u7urevbvLtc4cDofCw8MNSAUgP1CcAQAAAABwhyIiIuRwOG7YXrVq\nVYWEhBiQCEB+oDgDAAAAAOAOPfHEEypXrlyubVarVQMGDJDJZDIoFYC8RnEGAAAAAMAdslqtCg8P\nV+nSpXO2ORwOPfPMMwamApDXKM4AAAAAALgL4eHhstvtOb/Xq1dPwcHBBiYCkNcozgAAAAAAuAst\nW7ZU5cqVJf0+A61///4GJwKQ1yjOAAAAAAC4CyaTSc8++6xMJpMyMzO5TRMohixGBwAAAAAAIL/Z\n7XZ9/fXXSk1NzdPj+vn5yel0qlatWvr+++/1/fff5+nxg4ODVa9evTw9JoDbZ3I6nU6jQwAAAAAA\nkB8uX76sOXPmaNq0aTp79qzRce6YyWRS+/btNXr0aLVr144ndgIFawUzzgAAAAAAxc6JEyc0e/Zs\nzZo1S1lZWXr66ac1cOBA3X///Xl+rhkzZqh3794qX758nh7X6XRq27ZtWrhwoTp06KAHHnhAw4YN\n06BBg+Tm5pan5wLgGjPOAAAAAADFxu7duzV16lQtX75cvr6+ioiI0IABA1SuXLl8O2dGRoZsNlu+\nHV+SDh06pCVLlmjlypXy8vLS0KFDNXz4cPn5+eXreYESbgXFGQAAAACgSMvOztb69es1ceJEbd++\nXfXr11dkZKS6du0qi6V43Wh18eJFLV26VIsWLVJaWpp69eql119/XXXr1jU6GlAcUZwBAAAAAIqm\nlJQULVu2TJMmTdKxY8fUunVrDRgwQI8++qjR0fJdamqq1qxZo/nz5+vEiRNq06aNRowYoc6dOxsd\nDShOKM4AAAAAAEXLuXPnNGvWLH344YdKTU1Vp06dNGzYMNWoUcPoaAUuOztbGzdu1KJFixQbG6tG\njRrp5ZdfVnh4uKxWq9HxgKKO4gwAAAAAUDTs3btXkydPVnR0tLy9vdWnTx/1799fPj4+RkcrFH7+\n+WctXLhQa9euVYUKFTRo0CBFRUVxfYC7R3EGAAAAACi8rs+omjJlitavX6+6deuqb9++6tGjR74v\nyF9UnT59WkuXLtXSpUvldDoVHh6uUaNGqVatWkZHA4oaijMAAAAAQOGTkZGhmJgYTZw4UYcOHVJI\nSIiGDBmitm3bymQyGR2vSEhNTVVMTIzmz5+v+Ph4hYaG6vXXX9cjjzxidDSgqKA4AwAAAAAUHhcu\nXNBHH32kGTNmKCkpSWFhYRo8eLBq165tdLQi6/qsvY8++kh79uxRkyZNNGLECEVERBS7p44CeYzi\nDAAAAABgvKNHj2r69OmaO3eu3N3d1atXL/Xv31/33Xef0dGKlV27dmnRokXasGGDAgICFBUVpYED\nB8rDw8PoaEBhRHEGAAAAADBObGys3nvvPa1fv17VqlVTv379FB4eLjc3N6OjFWunTp3SokWLFB0d\nLavVqsjISI0ePVpVq1Y1OhpQmFCcAQAAAAAKlt1uV3R0tP7xj39o//79CgkJ0YABA9SxY0eZzWaj\n45UoycnJWrFihebMmaNLly6pa9euGj16tB5++GGjowGFAcUZAAAAAKBgJCYmatasWfrwww916dIl\nhYWFaeDAgapXr57R0Uo8u92u1atXa/78+YqLi1ObNm00atQoPfnkkzyMASUZxRkAAAAAoGCMHz9e\n77zzjp577jnWLyuknE6ntm7dqunTp2vnzp1KSkqSp6en0bEAo6zg8RkAAAAAgAJTpUoVvfbaa0bH\nwE2YTCY99thjys7O1s6dO42OAxiulNEBAAAAAADIL3a7XW+99ZZCQkJUp04d9enTRw899JACAwO1\ndOnSAskwc+ZMtWnTRrVr11bdunXVpk0bffDBB0pJSck1burUqWrXrp3q1aunmjVrqlWrVpowYYJS\nU1MLJCeAGzHjDAAAAABQbM2dO1ebN2/Wxo0btW7dOnl7eys4OFiPP/54gWXYtWuXwsPD1aNHD9ls\nNm3evFlRUVHau3evlixZkjNu+/bt6t+/vzp37iyr1apNmzbppZde0uHDh7V48eICywvgv5hxBgAA\nAAAotr788ks1aNBAXl5eioiIUGhoaL6eLz09XU899VSubVarVf369ZOvr688PDzUqVMndejQQVu3\nbtWFCxdyxnl4eCgiIkLe3t7y8PBQWFiYOnbsqC1btig+Pj5fcwNwjeIMAAAAAFBsxcfHy2IpuJut\nYmJilJiYmGvb7NmzZbPZcm2rVKmSJOW6DXPBggUym825xvn4+EiS0tLS8iMugD9BcQYAAAAAKHa2\nbt2qVq1a6cKFC1q5cqUCAwMVHBx80/FOp1Pz5s1T27ZtVbNmTTVo0EDPP/+8jh07lmvczp071a5d\nOz344IOqVauWOnTooG+//VaS9Pbbb+vdd9/VqVOnFBgYqFatWt30fCdPnpSXl5f8/f1v+T7OnTun\nMmXKqGrVqnfw7gHkFYozAAAAAECx07JlS23ZskV+fn7q0aOHTp48qYMHD950/JQpU/Tee+9p+PDh\n2rNnjz799FPFx8fr6aefVkJCQs64hIQEhYWFadu2bdq5c6fc3d0VFRUlSRo7dqzatWunatWq6eTJ\nk9qyZUuuc2RmZurcuXNavHixYmNj9dZbb8lqtd40U1pamrZv367w8PBbjgOQfyjOAAAAAAAlWnp6\nuubNm6eOHTuqe/fu8vT0VJ06dTR+/HhdunRJy5YtyxkbGhqql156SeXKlZO3t7fat2+vy5cv69Kl\nS396nubNm6t58+aaMmWKXn/9dXXu3PmW42fMmKGKFStq9OjR9/weAdwdijMAAAAAQIl25MgRpaam\n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\nAAAAgEJmx/8HNjMyuGDY+1MAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "afca_9ZgMq5B"
      },
      "cell_type": "markdown",
      "source": [
        "データやパラメータが関数に次々と渡され，損失が出力されるまでの一連の計算過程が確認できます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VKGpB55MMq5B"
      },
      "cell_type": "markdown",
      "source": [
        "### テストデータ評価\n",
        "\n",
        "Validationデータに対する評価を学習中に行うために使用されるEvaluatorは，Trainerと関係なく独立して使うこともできます．以下のようにして`Iterator`とネットワークのオブジェクト（`net`），使用するデバイスIDを渡してEvaluatorオブジェクトを作成し，これを関数として実行するだけです．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "0VPMBv5uMq5C",
        "outputId": "4d08c602-32cf-4855-fb33-1be2ab781086",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "cell_type": "code",
      "source": [
        "test_evaluator = extensions.Evaluator(test_iter, net, device=gpu_id)\n",
        "results = test_evaluator()\n",
        "print('Test accuracy:', results['main/accuracy'])"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test accuracy: 0.92494065\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "S3wF6tp-Mq5F"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みモデルで推論する\n",
        "\n",
        "それでは，Trainer Extensionのsnapshotが保存した学習済みパラメータを読み込んで，以前と同様に1番目のテストデータで推論を行ってみましょう．\n",
        "\n",
        "ここで一点注意が必要ですが，snapshotが保存するnpzファイルはTrainer全体のスナップショットとなっており，学習の再開に必要となるextensionの内部のパラメータなども一緒に保存されています．しかし，今回はネットワークのパラメータだけを読み込めば良いので， `serializers.load_npz()` の`path`引数にネットワーク部分までのパスを指定します．こうすることで，ネットワークのオブジェクトにパラメータだけを読み込ませることができます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "c75UL_8XMq5H",
        "outputId": "2c597a0a-af42-45cc-cf56-f34f064bbf8a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "infer_net = MLP()\n",
        "serializers.load_npz(\n",
        "    'results/mnist_result/snapshot_epoch-10',\n",
        "    infer_net, path='updater/model:main/predictor/')\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    infer_net.to_gpu(gpu_id)\n",
        "\n",
        "x, t = test[0]\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "x = infer_net.xp.asarray(x[None, ...])\n",
        "with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "    y = infer_net(x)\n",
        "y = to_cpu(y.array)\n",
        "\n",
        "print('予測ラベル:', y.argmax(axis=1)[0])"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nupSB/wclp6FycBcGXAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f41529e7668>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "予測ラベル: 7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "z0KB6IURMq5J"
      },
      "cell_type": "markdown",
      "source": [
        "無事正解できていることが確認できました．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "aNGmM0_eMq5K"
      },
      "cell_type": "markdown",
      "source": [
        "## 新しいネットワークの利用\n",
        "\n",
        "ここでは，MNISTデータセットではなくCIFAR10という32x32サイズの小さなカラー画像に10クラスのいずれかのラベルがついたデータセットを用いて，いろいろなモデルを自分で書いて試行錯誤する流れを体験してみます．\n",
        "\n",
        "| airplane | automobile | bird | cat | deer | dog | frog | horse | ship | truck |\n",
        "|:--------:|:----------:|:----:|:---:|:----:|:---:|:----:|:-----:|:----:|:-----:|\n",
        "| ![Airplane](https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane4.png) | ![Automobile](https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile4.png) | ![Bird](https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird4.png) | ![Cat](https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat4.png) | ![Deer](https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer4.png) | ![Dog](https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog4.png) | ![Frog](https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog4.png) | ![Horse](https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse4.png) | ![Ship](https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship4.png) | ![Truck](https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck4.png) |\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "id": "DMuv4lbQRBIC",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### 新しいネットワークの定義\n",
        "\n",
        "ここでは，さきほど試した全結合層だけからなるネットワークではなく，前章で紹介した，畳込み層を持つネットワークを定義してみます．3つの畳み込み層を持ち，2つの全結合層がそのあとに続いています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "iabj0L8sMq5L",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class MyNet(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, n_out):\n",
        "        super(MyNet, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.conv1 = L.Convolution2D(None, 32, 3, 3, 1)\n",
        "            self.conv2 = L.Convolution2D(32, 64, 3, 3, 1)\n",
        "            self.conv3 = L.Convolution2D(64, 128, 3, 3, 1)\n",
        "            self.fc4 = L.Linear(None, 1000)\n",
        "            self.fc5 = L.Linear(1000, n_out)\n",
        "        \n",
        "    def forward(self, x):\n",
        "        h = F.relu(self.conv1(x))\n",
        "        h = F.relu(self.conv2(h))\n",
        "        h = F.relu(self.conv3(h))\n",
        "        h = F.relu(self.fc4(h))\n",
        "        h = self.fc5(h)\n",
        "        return h"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kExP3QgLMq5O"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習\n",
        "\n",
        "ここで，あとから別のネットワークも簡単に同じ設定で訓練できるよう，`train`関数を作っておきます．これは，\n",
        "\n",
        "- ネットワークのオブジェクト\n",
        "- バッチサイズ\n",
        "- 使用するGPU ID\n",
        "- 学習を終了するエポック数\n",
        "- データセットオブジェクト\n",
        "- 学習率の初期値\n",
        "- 学習率減衰のタイミング\n",
        "\n",
        "などを渡すと，内部で`Trainer`を用いて渡されたデータセットを使ってネットワークを訓練し，学習が終了した状態のネットワークを返してくれる関数です．`Trainer.run()`が終了した後に，テストデータセットを使って評価まで行ってくれます．先程のMNISTでの例と違い，最適化手法にはMomentumSGDを用い，`ExponentialShift`という`Extention`を使って，指定したタイミングごとに学習率を減衰させるようにしてみます．\n",
        "\n",
        "また，ここでは`cifar.get_cifar10()`が返す学習用データセットのうち9割のデータを`train`，残りの1割を`valid`として使うようにしています．\n",
        "\n",
        "この`train`関数を用いて，上で定義した`MyModel`モデルを訓練してみます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "NEvyuq1TMq5O",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import cifar\n",
        "\n",
        "\n",
        "def train(network_object, batchsize=128, gpu_id=0, max_epoch=20, train_dataset=None, valid_dataset=None, test_dataset=None, postfix='', base_lr=0.01, lr_decay=None, snapshot=None):\n",
        "\n",
        "    # 1. Dataset\n",
        "    if train_dataset is None and valid_dataset is None and test_dataset is None:\n",
        "        train_val, test = cifar.get_cifar10()\n",
        "        train_size = int(len(train_val) * 0.9)\n",
        "        train, valid = split_dataset_random(train_val, train_size, seed=0)\n",
        "    else:\n",
        "        train, valid, test = train_dataset, valid_dataset, test_dataset\n",
        "\n",
        "    # 2. Iterator\n",
        "    train_iter = iterators.MultiprocessIterator(train, batchsize)\n",
        "    valid_iter = iterators.MultiprocessIterator(valid, batchsize, False, False)\n",
        "\n",
        "    # 3. Model\n",
        "    net = L.Classifier(network_object)\n",
        "\n",
        "    # 4. Optimizer\n",
        "    optimizer = optimizers.MomentumSGD(lr=base_lr).setup(net)\n",
        "    optimizer.add_hook(chainer.optimizer.WeightDecay(0.0005))\n",
        "\n",
        "    # 5. Updater\n",
        "    updater = training.StandardUpdater(train_iter, optimizer, device=gpu_id)\n",
        "\n",
        "    # 6. Trainer\n",
        "    trainer = training.Trainer(updater, (max_epoch, 'epoch'), out='results/{}_cifar10_{}result'.format(network_object.__class__.__name__, postfix))\n",
        "    \n",
        "    # 7. Trainer extensions\n",
        "    trainer.extend(extensions.LogReport())\n",
        "    trainer.extend(extensions.observe_lr())\n",
        "    trainer.extend(extensions.snapshot(filename='snapshot_epoch_{.updater.epoch}'), trigger=(10, 'epoch'))\n",
        "    trainer.extend(extensions.Evaluator(valid_iter, net, device=gpu_id), name='val')\n",
        "    trainer.extend(extensions.PrintReport(['epoch', 'main/loss', 'main/accuracy', 'val/main/loss', 'val/main/accuracy', 'elapsed_time', 'lr']))\n",
        "    trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], x_key='epoch', file_name='loss.png'))\n",
        "    trainer.extend(extensions.PlotReport(['main/accuracy', 'val/main/accuracy'], x_key='epoch', file_name='accuracy.png'))\n",
        "    if lr_decay is not None:\n",
        "        trainer.extend(extensions.ExponentialShift('lr', 0.1), trigger=lr_decay)\n",
        "    if snapshot is not None:\n",
        "        chainer.serializers.load_npz(snapshot, trainer)\n",
        "    trainer.run()\n",
        "    del trainer\n",
        "    \n",
        "    # 8. Evaluation\n",
        "    test_iter = iterators.MultiprocessIterator(test, batchsize, False, False)\n",
        "    test_evaluator = extensions.Evaluator(test_iter, net, device=gpu_id)\n",
        "    results = test_evaluator()\n",
        "    print('Test accuracy:', results['main/accuracy'])\n",
        "    \n",
        "    return net"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kURPNSFjMq5S",
        "outputId": "31d46e09-4f3d-46d9-e06e-cda069fe5571",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        }
      },
      "cell_type": "code",
      "source": [
        "net = train(MyNet(10), gpu_id=0)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz...\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           1.92581     0.306064       1.72284        0.398047           9.9811        0.01        \n",
            "\u001b[J2           1.60892     0.423273       1.52995        0.459961           19.405        0.01        \n",
            "\u001b[J3           1.47192     0.469752       1.47722        0.479102           28.5666       0.01        \n",
            "\u001b[J4           1.39192     0.500488       1.38975        0.503711           37.786        0.01        \n",
            "\u001b[J5           1.32738     0.525997       1.38147        0.511719           47.0001       0.01        \n",
            "\u001b[J6           1.2666      0.547918       1.34803        0.52168            56.3374       0.01        \n",
            "\u001b[J7           1.21278     0.566573       1.25596        0.563281           65.6387       0.01        \n",
            "\u001b[J8           1.16407     0.583585       1.2349         0.563281           75.1421       0.01        \n",
            "\u001b[J9           1.12049     0.601141       1.23196        0.564844           84.29         0.01        \n",
            "\u001b[J10          1.07015     0.620036       1.22593        0.566992           93.6632       0.01        \n",
            "\u001b[J11          1.0288      0.637806       1.18005        0.582031           103.25        0.01        \n",
            "\u001b[J12          0.981212    0.651665       1.20322        0.580273           112.516       0.01        \n",
            "\u001b[J13          0.935354    0.669256       1.16152        0.600391           121.737       0.01        \n",
            "\u001b[J14          0.900116    0.682915       1.2067         0.580273           130.934       0.01        \n",
            "\u001b[J15          0.855434    0.697088       1.2027         0.586328           140.119       0.01        \n",
            "\u001b[J16          0.81052     0.714165       1.20015        0.592578           149.406       0.01        \n",
            "\u001b[J17          0.766603    0.730979       1.198          0.595508           158.63        0.01        \n",
            "\u001b[J18          0.717969    0.747514       1.2124         0.581836           167.937       0.01        \n",
            "\u001b[J19          0.668172    0.765425       1.24           0.590234           177.113       0.01        \n",
            "\u001b[J20          0.617002    0.783536       1.26439        0.592969           186.235       0.01        \n",
            "Test accuracy: 0.6019581\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "cXSoxEcvMq5W"
      },
      "cell_type": "markdown",
      "source": [
        "学習が20エポックまで終わりました．損失と精度のプロットを見てみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "LsjyDJSPMq5Y",
        "outputId": "f6580409-674f-428d-f93e-e152c223bed5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/MyNet_cifar10_result/loss.png')"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n3759Nqvnz3/+M48//rjNXv9yDg4OrFq1ioCAgNZtKSkp3HzzzQDMnDmz3We1b98+kpKSABg4cCDV\n1dUYjcZeq2/JkiXMnj0baFlfu6qqqkdeuys6qq8ztv78Ljl37hy1tbU2PXrs6HelL33/RN/TLwNY\np9Ph4uICwNq1a5k2bVq7LtIlS5Ywb9483nrrLRQbzNZ59uxZfvWrXzFv3jz27NnTur20tBQfH5/W\n+z4+PpSWlvZ6fQDHjh0jODi4TZcpgMlk4rnnnuPBBx/kk08+6bV69Ho9Tk5ObbY1NDS0dvn5+vq2\n+6zKysrw9vZuvd+Tn2dH9bm4uKDT6bBYLPz973/n9ttvb/e4K30XeqM+gNWrV7Nw4UKeeeYZKioq\n2rTZ+vO75G9/+xvz58/vsC01NZVFixbxs5/9jJMnT/ZIbdDx70pf+v6JvqffngMG2Lp1K2vXruXj\njz9us/2pp57ipptuwtPTkyeeeILNmzdzyy239FpdUVFRPPnkk9x6663k5eWxcOFCtmzZ0u7cka2t\nXbuWu+66q932F154gTvuuAONRsP8+fOJj49n5MiRNqiwra78Q8oW/9iyWCy88MILTJw4kUmTJrVp\ns/V34Sc/+QleXl4MHTqUDz/8kPfff59XX331ivvb4vMzmUwcOnSIpUuXtmsbPXo0Pj4+zJgxgyNH\njvC73/2Or7/+ukfrufx35fKxJX31+ydsp18eAQP88MMP/O///i+rVq3C3b3tOpt33nknvr6+6PV6\npk2bRkZGRq/WFhgYyJw5c9BoNERERODn50dxcTEAAQEBlJWVte5bXFx8TV2G3SklJYW4uLh22+fN\nm4erqysuLi5MnDix1z+/y7m4uNDY2Ah0/Fn9+PMsKSlpd0Tf01588UUiIyN58skn27Vd7bvQGyZN\nmsTQoUOBlsGJP/5/2Rc+vwMHDlyx63ngwIGtg8bi4uKoqKjo0dNNP/5dsYfvn7CdfhnAtbW1/PGP\nf+SDDz5oHd15eduiRYswmUxAy1/uSyNQe8v69ev56KOPgJYu5/Ly8tZR2GFhYRiNRvLz8zGbzezY\nsYMpU6b0an3Q8mPi6ura7kjs3LlzPPfccyiKgtls5vDhw73++V1u8uTJbN68GYAtW7Zw0003tWmf\nMmVKa/uJEycICAjAzc2t1+pbv349BoOBp5566ortV/ou9Ibf/OY35OXlAS3/4Prx/0tbf34Ax48f\nZ8iQIR22rVq1im+++QZoGUHt4+PTYyPyO/pd6evfP2Fb/bILesOGDVRWVvL000+3bpswYQKDBw8m\nOTmZadOm8cADD+Do6MiwYcN6tfsZWo40fvvb37Jt2zaam5tZunQp33zzDe7u7iQnJ7N06VKee+45\nAObMmUN0dHSv1gftz0V/+OGHJCQkEBcXR1BQEPfeey9arZbExMReGxiTnp7OypUrKSgoQK/Xs3nz\nZt566y0WL17M559/TkhICHfeeScAzzzzDK+//jpjx45l+PDhPPjgg2g0GpYsWdKr9ZWXl+Po6MiC\nBQuAliO2pUuXttbX0Xehp7qfO6pv/vz5PP300zg7O+Pi4sLrr78O9J3P77333qO0tLT1MqNLfv3r\nX/M///M/3H777Tz//PN89tlnmM1mli9f3mP1dfS78sYbb/Dyyy/3ie+f6HtkPWAhhBDCBvplF7QQ\nQghhaxLAQgghhA1IAAshhBA2IAEshBBC2IAEsBBCCGEDEsBCXIN169bx29/+1tZlCCFUQAJYCCGE\nsIF+ORGHUL9PP/2UjRs3YrFYGDBgAL/4xS947LHHmDZtGqdPnwbgT3/6E4GBgezcuZM///nPODk5\n4ezszLJlywgMDCQtLY0VK1ZgMBjw9PRk5cqVABiNRn7729+SlZVFSEgI77//PhqNxpZvVwhhh+QI\nWKjOsWPH+O6771izZg2ff/457u7u7N27l7y8PO6++27+/ve/M378eD7++GMaGhp4+eWXee+99/j0\n00+ZNm0a//3f/w3A888/z7Jly1i9ejUJCQns2rULaFmdaNmyZaxbt47MzExOnDhhy7crhLBTcgQs\nVCclJYXc3FwWLlwIQH19PcXFxXh5eTFixAgAxo4dy1//+leys7Px9fUlKCgIgPHjx/PZZ59RUVFB\nTU0NsbGxADz88MNAyzngkSNH4uzsDLQsllBbW9vL71AIoQYSwEJ1HBwcSExMbLNsXn5+PnfffXfr\nfUVR0Gg07bqOL99+pVlafzyZv8zmKoS4HtIFLVRn7NixfP/999TV1QGwZs0aSktLqa6ubl2Q/fDh\nwwwePJioqCjKy8spLCwEYN++fYwePRpvb2+8vLw4duwYAB9//DFr1qyxzRsSQqiSHAEL1Rk5ciQP\nPfQQCxYswNHRkYCAACZMmEBgYCDr1q3jjTfeQFEU3nnnHZycnFi+fDnPPPMMDg4OuLi4tK6Y8+ab\nb7JixQr0ej3u7u68+eabbNmyxcbvTgihFrIakugX8vPz+elPf8r3339v61KEEAKQLmghhBDCJuQI\nWAghhLABOQIWQgghbEACWAghhLABCWAhhBDCBiSAhRBCCBuQABZCCCFs4P8BPZYV8VF2OfwAAAAA\nSUVORK5CYII=\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xHuqlhrUMq5b",
        "outputId": "f2c7c202-3cfe-4eb0-d02d-6efbac349c84",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/MyNet_cifar10_result/accuracy.png')"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n2LdvX7cUGhXiw+QRIcyZOKRbji8iIuIMOjxjT0tLIykpCYD4+Hiqq6upq6vD19eXQYMG8ec//xlo\nDfm6ujpCQ7unY9vQMF9WfndixxuKiIgMYB2esZeXlxMYGOh4HhQUhNlsbrPNq6++SnJyMosWLSI6\nOrrrqxQREZFOueLOc4ZhtFt27733sm3bNj7//HOysrK6pDARERG5ch0Ge1hYGOXl5Y7nZWVljub2\ns2fPkpmZCYCXlxdz585l79693VSqiIiIdKTDYJ89ezapqakAZGdnExYWhq+vLwBWq5VVq1ZRX18P\nwKFDh4iLi+vGckVERORyOuw8l5iYSEJCAkuXLsVkMrFmzRpSUlLw8/MjOTmZFStWcPfdd+Pm5sbo\n0aO59tpre6JuERERuQiTcbGL5t3IbK7tyZcTEXEKoaF+vV2C9BP95s5zIiIi0jEFu4iIiBPp8aZ4\nERER6T46YxcREXEiCnYREREnomAXERFxIgp2ERERJ6JgFxERcSIKdhERESeiYBcREXEiHd4r3lk9\n99xzZGVlYbVaue+++7juuusc6xYsWEBERASurq4AvPDCC4SHh/dYbenp6fy///f/GDlyJACjRo3i\n17/+tWP9rl27+M1vfoOrqytz585lxYoVPVYbwF//+lc+/PBDx/PDhw+zb98+x/OEhAQSExMdz//0\npz85Psvudvz4ce6//35+8IMfsGzZMoqLi3nkkUew2WyEhoby/PPP4+Hh0WafdevWceDAAUwmE6tX\nr2bixIk9Wt+jjz6K1WrFzc2N559/3jF7InT8Xeju+latWkV2djaDBw8GYPny5cybN6/NPr35+a1c\nuZKqqiqgdbbJyZMn89RTTzm2T0lJ4aWXXiImJgaAWbNm8dOf/rTb6vv635UJEyb0qe+fDBDGAJSW\nlmbcc889hmEYRmVlpXHNNde0WT9//nyjrq6uFyprtXv3buNnP/vZJddff/31RlFRkWGz2Yw77rjD\nOHHiRA9W11Z6errx+OOPt1k2ffr0Xqmlvr7eWLZsmfHYY48Zb7zxhmEYhrFq1Spj06ZNhmEYxosv\nvmi89dZbbfZJT0837r33XsMwDOPkyZPG9773vR6t75FHHjH+8Y9/GIZhGG+++abx7LPPttmno+9C\nd9f3y1/+0vjkk08uuU9vf34XWrVqlXHgwIE2y95//33jmWee6baaLnSxvyt96fsnA8eAbIqfNm0a\n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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Wpz2mcvpMq5g"
      },
      "cell_type": "markdown",
      "source": [
        "学習データでの精度（`main/accuracy`)は77%程度まで到達していますが，テストデータでの損失（`val/main/loss`）は途中から下げ止まり，精度（`val/main/accuracy`）も60%前後で頭打ちになってしまっています．表示されたログの最後の行を確認すると，テストデータでの精度も同様に60%程度となっています．学習データでは精度が良いが， テストデータでは精度が良くない場合，**モデルが学習データにオーバーフィッティングしている**と考えられます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "sSB6NmM_Mq5h"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みネットワークを使った予測\n",
        "\n",
        "テスト精度は60%程度でしたが，試しにこの学習済みネットワークを使っていくつかのテスト画像を分類させてみましょう．あとで使いまわせるように`predict`関数を作っておきます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "cZVANymqMq5h",
        "outputId": "638f6571-e28f-4e36-f3c9-f34a6f490246",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1442
        }
      },
      "cell_type": "code",
      "source": [
        "cls_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',\n",
        "             'dog', 'frog', 'horse', 'ship', 'truck']\n",
        "\n",
        "def predict(net, image_id):\n",
        "    _, test = cifar.get_cifar10()\n",
        "    x, t = test[image_id]\n",
        "    net.to_cpu()\n",
        "    with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "        y = net.predictor(x[None, ...]).data.argmax(axis=1)[0]\n",
        "\n",
        "    plt.imshow(x.transpose(1, 2, 0))\n",
        "    plt.show()\n",
        "    print('predicted_label:', cls_names[y])\n",
        "    print('answer:', cls_names[t])\n",
        "\n",
        "for i in range(10, 15):\n",
        "    predict(net, i)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f40deb2a4a8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: airplane\n",
            "answer: airplane\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAFV0RYkA/w9P2kwTH2qvqAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f40db2b4588>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: automobile\n",
            "answer: truck\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRVeUGPD/AEp0BJLEAuA/AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f40debc0710>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: dog\n",
            "answer: dog\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nxID/D74/bcoGU5g9AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f40f00551d0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: horse\n",
            "answer: horse\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nQBVdUSLA/wPjOFvUs4XLvQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f40ded75908>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: automobile\n",
            "answer: truck\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "X1IJmNiHMq5l"
      },
      "cell_type": "markdown",
      "source": [
        "うまく分類できているものもあれば，そうでないものもありました．ネットワークの学習に使用したデータセット上ではほぼ百発百中で正解できても，未知のデータ，すなわちテストデータセットの画像に対して高精度な予測ができなければ意味がありません．テストデータでの精度は，モデルの**汎化性能**に関係していると言われています．\n",
        "\n",
        "どうすれば高い汎化性能を持つネットワークを設計し，学習することができるでしょうか？これは非常に難しい問いですが，機械学習を使った応用を考えるとき，最も重要な問いの一つです．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "l6-aXDxhMq5l"
      },
      "cell_type": "markdown",
      "source": [
        "### 深いネットワークの定義\n",
        "\n",
        "では，さきほどのネットワークよりも多層のネットワークを定義してみましょう．ここでは，1層の畳み込みネットワークを`ConvBlock`，1層の全結合ネットワークを`LinearBlock`として定義し，これを数多く積み重ねることで大きなネットワークを定義してみます．"
      ]
    },
    {
      "metadata": {
        "id": "R_HtP-XAVcrI",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 構成要素を定義する\n",
        "\n",
        "まず，ネットワークの構成要素となる`ConvBlock`と`LinearBlock`を定義してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kokxUuBUMq5m",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class ConvBlock(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, n_ch, pool_drop=False):\n",
        "        w = chainer.initializers.HeNormal()\n",
        "        super(ConvBlock, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.conv = L.Convolution2D(None, n_ch, 3, 1, 1, nobias=True, initialW=w)\n",
        "            self.bn = L.BatchNormalization(n_ch)\n",
        "        self.pool_drop = pool_drop\n",
        "        \n",
        "    def forward(self, x):\n",
        "        h = F.relu(self.bn(self.conv(x)))\n",
        "        if self.pool_drop:\n",
        "            h = F.max_pooling_2d(h, 2, 2)\n",
        "            h = F.dropout(h, ratio=0.25)\n",
        "        return h\n",
        "    \n",
        "class LinearBlock(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, drop=False):\n",
        "        w = chainer.initializers.HeNormal()\n",
        "        super(LinearBlock, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.fc = L.Linear(None, 1024, initialW=w)\n",
        "        self.drop = drop\n",
        "        \n",
        "    def forward(self, x):\n",
        "        h = F.relu(self.fc(x))\n",
        "        if self.drop:\n",
        "            h = F.dropout(h)\n",
        "        return h"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7PWQmRE4Mq5o"
      },
      "cell_type": "markdown",
      "source": [
        "`ConvBlock`は`Chain`を継承した小さなネットワークとして定義されており，一つの畳み込み層とBatch Normalization層で構成されます．Batch Normalization層は，ネットワークの学習プロセスを安定させるために広く利用されている手法の一つで，例えば今回のように，畳み込み層の直後に挿入する形で利用されます．`forward`メソッドでは，これらにデータを渡しつつ，活性化関数ReLUを適用して，さらに`pool_drop`引数が`True`であれば，Max PoolingとDropoutを適用するような順伝播の計算が行われます．Dropoutは，ネットワークの過学習を避けて汎化性能を上げる目的で利用される手法の一つで，層の中のノードの内，一定割合をランダムに無効にしながら学習を行います（無効にする割合は`ratio`という引数で指定でき，何も指定しなければ50%が無効化されます）．\n",
        "\n",
        "Chainerでは，Pythonを使って書いたforward計算のコード自体がネットワークの構造を表します．すなわち，実行時にデータがどの層を通過していったか，によってネットワークそのものが定義されます．この性質によって，上記のような分岐などを含むネットワークも簡単に記述でき，柔軟かつシンプルで可読性の高いネットワーク定義が可能になります．これが**Define-by-Run**の大きな特徴となっています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7KpJgoXQMq5p"
      },
      "cell_type": "markdown",
      "source": [
        "#### 大きなネットワークの定義\n",
        "\n",
        "次に，これらの小さなネットワークを構成要素として積み重ねて，大きなネットワークを定義してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "2lMV0pumMq5q",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class DeepCNN(chainer.ChainList):\n",
        "\n",
        "    def __init__(self, n_output):\n",
        "        super(DeepCNN, self).__init__(\n",
        "            ConvBlock(64),\n",
        "            ConvBlock(64, True),\n",
        "            ConvBlock(128),\n",
        "            ConvBlock(128, True),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256, True),\n",
        "            LinearBlock(),\n",
        "            LinearBlock(),\n",
        "            L.Linear(None, n_output)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        for f in self:\n",
        "            x = f(x)\n",
        "        return x"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Wywy-_DVMq5s"
      },
      "cell_type": "markdown",
      "source": [
        "ここで，`ChainList`というクラスが利用されています．このクラスは`Chain`を継承したクラスで，いくつもの`Link`や`Chain`を順次呼び出していくようなネットワークを定義するときに便利です．`ChainList`を継承して定義されるモデルは，親クラスのコンストラクタを呼び出す際に，キーワード引数ではなく通常の引数として`Link`もしくは`Chain`オブジェクトを渡すことができ，`self.children()`メソッドによって**登録した順番に**取り出すことができます．この特徴を使うと，forward計算が上記のように簡単に記述可能となります．\n",
        "\n",
        "それでは，学習を回してみます．今回はパラメータ数も多いので，学習を停止するエポック数を100に設定します．また，学習率を0.1から始めて，30エポックごとに10分の1にするように設定します．"
      ]
    },
    {
      "metadata": {
        "id": "g735gZpbVh3-",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 高速化のTIPS\n",
        "\n",
        "今回は多くの畳込み層を使う大きなネットワークを使うので，Chainerが用意してくれているcuDNNのautotune機能を有効にしてみます．やり方は簡単で，以下の二行を事前に実行しておくだけです．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "jI4IbE9WMq5t",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "chainer.cuda.set_max_workspace_size(1024 * 1024 * 1024)\n",
        "chainer.config.autotune = True"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "GLFm2waBMq5x"
      },
      "cell_type": "markdown",
      "source": [
        "それでは，学習を開始してみましょう．本来は，以下の2行を実行することで乱数シードを固定し，100エポック分上で定義した `DeepCNN` というクラスが表すモデルの学習ができるのですが，これは40分以上の時間を要するので，今回は事前に90エポックまで学習を進めておいた重みを読み込んで，90エポック終了時点から学習を再開し，最後の10エポックだけ実際にここで学習を回すことにします．"
      ]
    },
    {
      "metadata": {
        "id": "g73am7hvVlQa",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "**ゼロから学習する場合:**\n",
        "\n",
        "```python\n",
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, base_lr=0.1, lr_decay=(30, 'epoch'))\n",
        "```"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kAiXcG8jMq5y",
        "outputId": "3fbbee0f-be22-4392-95d1-2cf91d5c2a00",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2161
        }
      },
      "cell_type": "code",
      "source": [
        "!wget https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_snapshot_epoch_90.npz\n",
        "\n",
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, base_lr=0.1, lr_decay=(30, 'epoch'), snapshot='DeepCNN_cifar10_snapshot_epoch_90.npz')"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2018-12-06 05:07:02--  https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_snapshot_epoch_90.npz\n",
            "Resolving github.com (github.com)... 192.30.253.113, 192.30.253.112\n",
            "Connecting to github.com (github.com)|192.30.253.113|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/4fcc1200-eeb7-11e8-8ca0-9095e5bca078?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181206%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181206T050702Z&X-Amz-Expires=300&X-Amz-Signature=4233e042f890fc0b99f8c4d76873f7c3706b96887cceb8033734677817c464fc&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream [following]\n",
            "--2018-12-06 05:07:03--  https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/4fcc1200-eeb7-11e8-8ca0-9095e5bca078?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181206%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181206T050702Z&X-Amz-Expires=300&X-Amz-Signature=4233e042f890fc0b99f8c4d76873f7c3706b96887cceb8033734677817c464fc&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream\n",
            "Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.216.236.43\n",
            "Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.236.43|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 56889445 (54M) [application/octet-stream]\n",
            "Saving to: ‘DeepCNN_cifar10_snapshot_epoch_90.npz’\n",
            "\n",
            "DeepCNN_cifar10_sna 100%[===================>]  54.25M  26.3MB/s    in 2.1s    \n",
            "\n",
            "2018-12-06 05:07:05 (26.3 MB/s) - ‘DeepCNN_cifar10_snapshot_epoch_90.npz’ saved [56889445/56889445]\n",
            "\n",
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           2.62849     0.144931       2.22525        0.15625            27.9748       0.1         \n",
            "\u001b[J2           2.11316     0.210804       1.97533        0.266406           54.5483       0.1         \n",
            "\u001b[J3           1.87483     0.289396       1.8026         0.320508           81.0827       0.1         \n",
            "\u001b[J4           1.74066     0.340443       1.74728        0.358203           107.7         0.1         \n",
            "\u001b[J5           1.58789     0.409411       1.63916        0.40332            134.235       0.1         \n",
            "\u001b[J6           1.38757     0.492831       1.22399        0.561719           161.093       0.1         \n",
            "\u001b[J7           1.2036      0.566128       1.32939        0.553906           187.55        0.1         \n",
            "\u001b[J8           1.07527     0.617077       1.17079        0.589648           214.184       0.1         \n",
            "\u001b[J9           0.964984    0.660711       0.950063       0.67207            240.817       0.1         \n",
            "\u001b[J10          0.895905    0.688056       0.972697       0.657031           267.372       0.1         \n",
            "\u001b[J11          0.828796    0.715043       0.944733       0.686914           297.779       0.1         \n",
            "\u001b[J12          0.784123    0.731793       0.960205       0.687305           324.312       0.1         \n",
            "\u001b[J13          0.742033    0.748291       0.858308       0.719727           351.032       0.1         \n",
            "\u001b[J14          0.692516    0.76627        0.811853       0.725195           377.591       0.1         \n",
            "\u001b[J15          0.65644     0.776256       0.692374       0.767578           404.23        0.1         \n",
            "\u001b[J16          0.650682    0.780738       0.796731       0.733008           430.797       0.1         \n",
            "\u001b[J17          0.610249    0.793435       0.632162       0.791406           457.467       0.1         \n",
            "\u001b[J18          0.591896    0.803667       0.791757       0.739453           484.04        0.1         \n",
            "\u001b[J19          0.578718    0.804465       1.04659        0.671484           510.602       0.1         \n",
            "\u001b[J20          0.554954    0.814431       0.8127         0.733594           537.247       0.1         \n",
            "\u001b[J21          0.549188    0.814236       0.654926       0.787109           567.567       0.1         \n",
            "\u001b[J22          0.535866    0.820446       0.640323       0.788672           594.214       0.1         \n",
            "\u001b[J23          0.527765    0.823028       0.958373       0.70957            620.761       0.1         \n",
            "\u001b[J24          0.512286    0.830056       0.793664       0.748633           647.363       0.1         \n",
            "\u001b[J25          0.497195    0.833141       0.717548       0.759961           673.951       0.1         \n",
            "\u001b[J26          0.495153    0.835759       1.7557         0.511328           700.494       0.1         \n",
            "\u001b[J27          0.486062    0.837069       0.732518       0.775391           727.13        0.1         \n",
            "\u001b[J28          0.47963     0.839387       0.669157       0.786328           753.692       0.1         \n",
            "\u001b[J29          0.475502    0.838312       0.915904       0.718555           780.308       0.1         \n",
            "\u001b[J30          0.460236    0.844841       0.877713       0.72793            806.806       0.1         \n",
            "\u001b[J31          0.298483    0.897239       0.381921       0.879687           837.16        0.01        \n",
            "\u001b[J32          0.211182    0.92784        0.364046       0.882617           863.898       0.01        \n",
            "\u001b[J33          0.180429    0.937478       0.374651       0.883984           890.554       0.01        \n",
            "\u001b[J34          0.164156    0.943692       0.361041       0.888867           917.199       0.01        \n",
            "\u001b[J35          0.144584    0.950387       0.375391       0.889258           943.774       0.01        \n",
            "\u001b[J36          0.132288    0.954235       0.377427       0.890625           970.4         0.01        \n",
            "\u001b[J37          0.12103     0.957376       0.390434       0.892578           996.96        0.01        \n",
            "\u001b[J38          0.111974    0.961204       0.400307       0.886133           1023.62       0.01        \n",
            "\u001b[J39          0.102573    0.964476       0.399275       0.892773           1050.2        0.01        \n",
            "\u001b[J40          0.0972647   0.965931       0.432854       0.887109           1076.83       0.01        \n",
            "\u001b[J41          0.0928545   0.966597       0.418165       0.887305           1107.19       0.01        \n",
            "\u001b[J42          0.08498     0.96964        0.432462       0.884961           1133.75       0.01        \n",
            "\u001b[J43          0.0845448   0.970792       0.4365         0.880273           1160.37       0.01        \n",
            "\u001b[J44          0.0770674   0.973914       0.441935       0.883789           1187.02       0.01        \n",
            "\u001b[J45          0.0732439   0.974565       0.469901       0.881836           1213.62       0.01        \n",
            "\u001b[J46          0.070491    0.975962       0.453856       0.8875             1240.16       0.01        \n",
            "\u001b[J47          0.068846    0.97583        0.461264       0.881055           1266.75       0.01        \n",
            "\u001b[J48          0.0694101   0.976941       0.435111       0.885742           1293.25       0.01        \n",
            "\u001b[J49          0.0653772   0.977117       0.461284       0.882617           1319.87       0.01        \n",
            "\u001b[J50          0.0633419   0.97836        0.464232       0.889648           1346.47       0.01        \n",
            "\u001b[J51          0.0584663   0.979834       0.464193       0.885547           1376.6        0.01        \n",
            "\u001b[J52          0.0607617   0.979714       0.466352       0.881445           1403.21       0.01        \n",
            "\u001b[J53          0.0615791   0.978632       0.451807       0.889453           1429.69       0.01        \n",
            "\u001b[J54          0.0588031   0.979914       0.489054       0.881836           1456.28       0.01        \n",
            "\u001b[J55          0.0582368   0.979367       0.4719         0.882617           1482.83       0.01        \n",
            "\u001b[J56          0.0558719   0.981379       0.495846       0.878125           1509.45       0.01        \n",
            "\u001b[J57          0.0579962   0.979936       0.472415       0.875781           1536.06       0.01        \n",
            "\u001b[J58          0.0592009   0.9793         0.454762       0.88418            1562.6        0.01        \n",
            "\u001b[J59          0.0568546   0.980735       0.487556       0.876172           1589.17       0.01        \n",
            "\u001b[J60          0.0579785   0.980079       0.472908       0.883398           1615.93       0.01        \n",
            "\u001b[J61          0.0318918   0.98968        0.416953       0.895703           1646.15       0.001       \n",
            "\u001b[J62          0.0220127   0.993612       0.416859       0.899609           1672.69       0.001       \n",
            "\u001b[J63          0.0186169   0.99434        0.417849       0.898242           1699.29       0.001       \n",
            "\u001b[J64          0.0159041   0.995526       0.41804        0.900781           1725.78       0.001       \n",
            "\u001b[J65          0.0147089   0.995916       0.429896       0.899609           1752.39       0.001       \n",
            "\u001b[J66          0.0129457   0.996404       0.433748       0.898828           1779.01       0.001       \n",
            "\u001b[J67          0.0131643   0.996283       0.433923       0.898828           1805.54       0.001       \n",
            "\u001b[J68          0.0112659   0.996893       0.437222       0.901758           1832.17       0.001       \n",
            "\u001b[J69          0.0106502   0.997151       0.443475       0.901758           1858.73       0.001       \n",
            "\u001b[J70          0.0107926   0.997203       0.445066       0.900391           1885.34       0.001       \n",
            "\u001b[J71          0.0105973   0.997062       0.44159        0.898633           1915.8        0.001       \n",
            "\u001b[J72          0.00934292  0.99767        0.450084       0.897266           1942.45       0.001       \n",
            "\u001b[J73          0.0104884   0.997092       0.451691       0.899023           1969.06       0.001       \n",
            "\u001b[J74          0.00849317  0.997707       0.450391       0.9                1995.61       0.001       \n",
            "\u001b[J75          0.00846932  0.997891       0.451362       0.902148           2022.21       0.001       \n",
            "\u001b[J76          0.00826699  0.997841       0.448779       0.900781           2048.69       0.001       \n",
            "\u001b[J77          0.00875069  0.997492       0.45095        0.900391           2075.31       0.001       \n",
            "\u001b[J78          0.00823296  0.998019       0.449194       0.898438           2102.1        0.001       \n",
            "\u001b[J79          0.00701245  0.998113       0.454196       0.899609           2128.74       0.001       \n",
            "\u001b[J80          0.00846517  0.997596       0.455877       0.901172           2155.29       0.001       \n",
            "\u001b[J81          0.00677115  0.99818        0.459518       0.899805           2185.54       0.001       \n",
            "\u001b[J82          0.00717393  0.998047       0.465337       0.899805           2212.13       0.001       \n",
            "\u001b[J83          0.00709802  0.997908       0.464472       0.898828           2238.69       0.001       \n",
            "\u001b[J84          0.00699702  0.998091       0.470595       0.899219           2265.27       0.001       \n",
            "\u001b[J85          0.00746627  0.997975       0.470063       0.901172           2291.78       0.001       \n",
            "\u001b[J86          0.00666763  0.998069       0.466201       0.899414           2318.38       0.001       \n",
            "\u001b[J87          0.00616266  0.998531       0.462948       0.9                2344.86       0.001       \n",
            "\u001b[J88          0.00719447  0.997847       0.463587       0.899609           2371.48       0.001       \n",
            "\u001b[J89          0.00638493  0.998335       0.465655       0.901367           2398.08       0.001       \n",
            "\u001b[J90          0.0061445   0.998286       0.464918       0.900586           2424.59       0.001       \n",
            "\u001b[J91          0.00582547  0.99838        0.46484        0.900977           2454.06       0.0001      \n",
            "\u001b[J92          0.00602776  0.998331       0.461773       0.901367           2481.07       0.0001      \n",
            "\u001b[J93          0.00597373  0.998491       0.464172       0.900195           2508.17       0.0001      \n",
            "\u001b[J94          0.00619672  0.99813        0.46446        0.900391           2535.21       0.0001      \n",
            "\u001b[J95          0.00545568  0.998557       0.466652       0.900977           2562.51       0.0001      \n",
            "\u001b[J96          0.00613308  0.998308       0.465334       0.900781           2589.52       0.0001      \n",
            "\u001b[J97          0.00541797  0.998624       0.465641       0.900586           2616.61       0.0001      \n",
            "\u001b[J98          0.00512294  0.998801       0.467118       0.900781           2643.72       0.0001      \n",
            "\u001b[J99          0.00562217  0.998576       0.464968       0.901367           2670.79       0.0001      \n",
            "\u001b[J100         0.00551728  0.998624       0.462731       0.901367           2697.91       0.0001      \n",
            "Test accuracy: 0.8966574\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "OK1P287rMq51"
      },
      "cell_type": "markdown",
      "source": [
        "学習が終了しました．学習曲線と精度のグラフを見てみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "W67QavgIMq52",
        "outputId": "98fb0443-07f8-4e7a-cbef-090e25c09ac1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/DeepCNN_cifar10_result/loss.png')"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nRU5ErkJggg==\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "FnEM3DmzMq56",
        "outputId": "dd59d369-e33f-465b-d9f7-5b82bf0d5041",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/DeepCNN_cifar10_result/accuracy.png')"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nAYN93rx5rFixAoBNmzZRWFiY6H4HuP/++/nqV7/K/Pnzh67KLolgD7kZXZw55J8nIiIy3Ax4u9us\nWbOYMmUKixcvxjAM7rrrLpYvX47H4+GMM87gD3/4A1VVVbz44osAfOELX+Cyyy4bkmKbA61gGlgi\nLsoLdaubiIjIwY7oPvZbbrml1+tJkyYlvt64cePgVnQYzYEWzJCT0nwPdpsmzomIiBxs2Kw8F41F\naQu2Ewu6NXFORETkEIZNsLcE2zAxMUNuxmh8XUREpF/DJth7zogfrRnxIiIi/Ro2wd7StTiNEU6j\nrEArzomIiPRn2AS70VVqgbMYu23YlC0iInJMDZuELDLG0bnuHMbnVSS7FBERkePWsAn2PXUdEHEw\nRuPrIiIihzRsgn3sqExmjsvnpPEFA+8sIiIyQhlmf091GUINDR3H8uNERFJCQYF6K+XIDJsWu4iI\niAxMwS4iIpJCFOwiIiIpRMEuIiKSQhTsIiIiKUTBLiIikkIU7CIiIilEwS4iIpJCjvkCNSIiIjJ0\n1GIXERFJIQp2ERGRFKJgFxERSSEKdhERkRSiYBcREUkhCnYREZEUomAXERFJIbZkF3A4y5YtY/36\n9RiGwe2338706dOTXdKQefDBB/nggw+IRCJce+21TJs2je9+97tEo1EKCgp46KGHcDgcyS5z0AUC\nAb7whS9w/fXXc9ppp42Ia3755Zf5xS9+gc1m49vf/jYTJ05M6ev2+Xx873vfo62tjXA4zA033EBB\nQQE//OEPAZg4cSJ33313coscRFu3buX666/na1/7GkuWLGH//v39/nxffvllfvWrX2GxWLj00ku5\n5JJLkl26pArzOLVmzRrzm9/8pmmaprl9+3bz0ksvTXJFQ2fVqlXmNddcY5qmaTY3N5tnnXWWeeut\nt5qvvPKKaZqm+cgjj5jPPfdcMkscMo8++qh58cUXmy+99NKIuObm5mbzvPPOMzs6Osy6ujrzzjvv\nTPnrfvbZZ82HH37YNE3TrK2tNc8//3xzyZIl5vr1603TNM2bb77ZXLlyZTJLHDQ+n89csmSJeeed\nd5rPPvusaZpmvz9fn89nnnfeeWZ7e7vZ2dlpXnjhhWZLS0syS5cUctx2xa9atYqFCxcCUFlZSVtb\nG16vN8lVDY05c+bw2GOPAZCZmUlnZydr1qzh3HPPBeDss89m1apVySxxSOzYsYPt27ezYMECgBFx\n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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "FJ9K1MtIMq5-"
      },
      "cell_type": "markdown",
      "source": [
        "先程60%前後だったValidationデータでの精度が，90%程度まで上がりました．また，テストデータを用いた精度も，およそ90%程度となっています．しかし最新の研究成果では97%以上まで達成されています．さらに精度を上げるには，今回行ったようなネットワークの構造自体の改良ももちろんのこと，学習データを擬似的に増やす操作（Data augmentation）や，複数のモデルの出力を一つの出力に統合する操作（Ensemble）などなど，いろいろな工夫が考えられます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "IyOFHCvrMq5_"
      },
      "cell_type": "markdown",
      "source": [
        "## データセットクラスの使用方法\n",
        "\n",
        "ここでは，Chainerにすでに用意されているCIFAR10のデータを取得する機能を使って，データセットクラスを自分で書いてみます．Chainerでは，データセットを表すクラスは以下の機能を持っている必要があります．\n",
        "\n",
        "- データセット内のデータ数を返す`__len__`メソッド\n",
        "- 引数として渡される`i`に対応したデータもしくはデータとラベルの組を返す`get_example`メソッド\n",
        "\n",
        "その他のデータセットに必要な機能は，`chainer.dataset.DatasetMixin`クラスを継承することで用意できます．ここでは，`DatasetMixin`クラスを継承し，Data augmentation機能のついたデータセットクラスを作成してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "b-11jjDiMq6B"
      },
      "cell_type": "markdown",
      "source": [
        "### CIFAR10データセットクラス"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "csErjCCTMq6C",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class CIFAR10Augmented(chainer.dataset.DatasetMixin):\n",
        "\n",
        "    def __init__(self, split='train', train_ratio=0.9):\n",
        "        train_val, test_data = cifar.get_cifar10()\n",
        "        train_size = int(len(train_val) * train_ratio)\n",
        "        train_data, valid_data = split_dataset_random(train_val, train_size, seed=0)\n",
        "        if split == 'train':\n",
        "            self.data = train_data\n",
        "        elif split == 'valid':\n",
        "            self.data = valid_data\n",
        "        elif split == 'test':\n",
        "            self.data = test_data\n",
        "        else:\n",
        "            raise ValueError(\"'split' argument should be either 'train', 'valid', or 'test'. But {} was given.\".format(split))\n",
        "\n",
        "        self.split = split\n",
        "        self.random_crop = 4\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "\n",
        "    def get_example(self, i):\n",
        "        x, t = self.data[i]\n",
        "        if self.split == 'train':\n",
        "            x = x.transpose(1, 2, 0)\n",
        "            h, w, _ = x.shape\n",
        "            x_offset = np.random.randint(self.random_crop)\n",
        "            y_offset = np.random.randint(self.random_crop)\n",
        "            x = x[y_offset:y_offset + h - self.random_crop,\n",
        "                  x_offset:x_offset + w - self.random_crop]\n",
        "            if np.random.rand() > 0.5:\n",
        "                x = np.fliplr(x)\n",
        "            x = x.transpose(2, 0, 1)\n",
        "\n",
        "        return x, t"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "x3UPCe0RMq6F"
      },
      "cell_type": "markdown",
      "source": [
        "このクラスは，CIFAR10のデータのそれぞれに対し，\n",
        "\n",
        "- 32x32の大きさの中からランダムに28x28の領域をクロップ\n",
        "- 1/2の確率で左右を反転させる\n",
        "\n",
        "という加工を行っています．このような操作を加えて擬似的に学習データのバリエーションを増やすことで，オーバーフィッティングの抑制に寄与することが知られています．これらの操作以外にも，画像の色味を変化させるような変換やランダムな回転，アフィン変換など，さまざまな加工によって学習データ数を擬似的に増やす方法が提案されています．\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "vmvsVsTMMq6G"
      },
      "cell_type": "markdown",
      "source": [
        "### 作成したデータセットクラスを用いた学習\n",
        "\n",
        "それではさっそくこの`CIFAR10`クラスを使って学習を行ってみましょう．先程と同じネットワークを用い，Data augmentationの効果がどの程度あるのかを調べてみましょう．`train`関数も含め，データセットクラス以外は先程とすべて同様です．\n",
        "\n",
        "ここでも，40分ほどの時間がかかりますので，上と同様に90エポックまで学習したあとのsnapshotをダウンロードして読み込ませ，最後の10エポックだけ実際に学習させてみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "upvteI1eMq6G",
        "outputId": "ce788cf2-6f39-4f2a-ae1f-6c8c90e06521",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2161
        }
      },
      "cell_type": "code",
      "source": [
        "!wget https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_augmented_snapshot_epoch_90.npz\n",
        "\n",
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, train_dataset=CIFAR10Augmented(), valid_dataset=CIFAR10Augmented('valid'), test_dataset=CIFAR10Augmented('test'), postfix='augmented_', base_lr=0.1, lr_decay=(30, 'epoch'), snapshot='DeepCNN_cifar10_augmented_snapshot_epoch_90.npz')"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2018-12-06 05:11:49--  https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_augmented_snapshot_epoch_90.npz\n",
            "Resolving github.com (github.com)... 192.30.253.112, 192.30.253.113\n",
            "Connecting to github.com (github.com)|192.30.253.112|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/5064a880-eeb7-11e8-95bf-80b5d9533256?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181206%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181206T051149Z&X-Amz-Expires=300&X-Amz-Signature=fb5006a91a6c433339b08eb2747e53cee3f7f8147443cab051b85566ef966824&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_augmented_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream [following]\n",
            "--2018-12-06 05:11:49--  https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/5064a880-eeb7-11e8-95bf-80b5d9533256?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181206%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181206T051149Z&X-Amz-Expires=300&X-Amz-Signature=fb5006a91a6c433339b08eb2747e53cee3f7f8147443cab051b85566ef966824&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_augmented_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream\n",
            "Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.216.168.35\n",
            "Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.168.35|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 56730280 (54M) [application/octet-stream]\n",
            "Saving to: ‘DeepCNN_cifar10_augmented_snapshot_epoch_90.npz’\n",
            "\n",
            "DeepCNN_cifar10_aug 100%[===================>]  54.10M  26.3MB/s    in 2.1s    \n",
            "\n",
            "2018-12-06 05:11:52 (26.3 MB/s) - ‘DeepCNN_cifar10_augmented_snapshot_epoch_90.npz’ saved [56730280/56730280]\n",
            "\n",
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           2.5875      0.156405       2.11656        0.203125           24.1767       0.1         \n",
            "\u001b[J2           1.99359     0.233842       1.84577        0.304492           47.9466       0.1         \n",
            "\u001b[J3           1.76968     0.325365       1.98983        0.26543            71.6864       0.1         \n",
            "\u001b[J4           1.61662     0.389537       2.07369        0.26875            95.5072       0.1         \n",
            "\u001b[J5           1.41259     0.478989       1.52089        0.446484           119.236       0.1         \n",
            "\u001b[J6           1.23382     0.555487       1.48775        0.480664           143.06        0.1         \n",
            "\u001b[J7           1.09323     0.613404       1.11949        0.590234           166.813       0.1         \n",
            "\u001b[J8           0.99303     0.650857       1.33017        0.566992           190.624       0.1         \n",
            "\u001b[J9           0.926848    0.678755       1.0075         0.665234           214.446       0.1         \n",
            "\u001b[J10          0.863165    0.702769       0.858035       0.717383           238.218       0.1         \n",
            "\u001b[J11          0.807948    0.727162       0.9556         0.679297           265.757       0.1         \n",
            "\u001b[J12          0.769224    0.739116       0.857765       0.711328           289.507       0.1         \n",
            "\u001b[J13          0.739977    0.752952       0.91583        0.711133           313.339       0.1         \n",
            "\u001b[J14          0.72064     0.759393       1.20587        0.61875            337.097       0.1         \n",
            "\u001b[J15          0.690136    0.77093        0.837919       0.726562           360.905       0.1         \n",
            "\u001b[J16          0.673935    0.774706       1.03539        0.678711           384.67        0.1         \n",
            "\u001b[J17          0.662879    0.778742       0.730712       0.758789           408.47        0.1         \n",
            "\u001b[J18          0.639202    0.78742        0.758566       0.765625           432.298       0.1         \n",
            "\u001b[J19          0.625988    0.792713       1.24791        0.664062           456.061       0.1         \n",
            "\u001b[J20          0.616269    0.795277       0.963706       0.70625            479.882       0.1         \n",
            "\u001b[J21          0.611734    0.795962       0.887129       0.723437           507.312       0.1         \n",
            "\u001b[J22          0.600444    0.800582       0.889526       0.710352           531.173       0.1         \n",
            "\u001b[J23          0.605317    0.800414       0.715702       0.756445           554.926       0.1         \n",
            "\u001b[J24          0.584194    0.805731       0.984225       0.694336           578.687       0.1         \n",
            "\u001b[J25          0.584041    0.805464       0.956576       0.685156           602.49        0.1         \n",
            "\u001b[J26          0.57384     0.80954        0.977559       0.712695           627.031       0.1         \n",
            "\u001b[J27          0.560405    0.814298       0.894127       0.718945           650.845       0.1         \n",
            "\u001b[J28          0.559933    0.816195       0.729981       0.752734           674.584       0.1         \n",
            "\u001b[J29          0.555933    0.814387       0.841304       0.727344           698.4         0.1         \n",
            "\u001b[J30          0.558057    0.814971       0.753542       0.757227           722.119       0.1         \n",
            "\u001b[J31          0.397613    0.866455       0.337977       0.888867           749.619       0.01        \n",
            "\u001b[J32          0.320024    0.890202       0.322082       0.894336           773.368       0.01        \n",
            "\u001b[J33          0.293655    0.900479       0.323365       0.888867           797.169       0.01        \n",
            "\u001b[J34          0.279553    0.904874       0.308263       0.897656           820.951       0.01        \n",
            "\u001b[J35          0.26519     0.909945       0.301763       0.897852           844.682       0.01        \n",
            "\u001b[J36          0.259166    0.909846       0.286909       0.904688           868.482       0.01        \n",
            "\u001b[J37          0.246168    0.915064       0.289997       0.904688           892.324       0.01        \n",
            "\u001b[J38          0.24097     0.91697        0.280986       0.903906           916.139       0.01        \n",
            "\u001b[J39          0.233951    0.918892       0.291962       0.904102           939.884       0.01        \n",
            "\u001b[J40          0.220939    0.923628       0.299502       0.902539           963.666       0.01        \n",
            "\u001b[J41          0.216055    0.924272       0.2946         0.905664           991.125       0.01        \n",
            "\u001b[J42          0.215143    0.926972       0.308637       0.897266           1014.88       0.01        \n",
            "\u001b[J43          0.213903    0.926625       0.291742       0.907812           1038.64       0.01        \n",
            "\u001b[J44          0.203283    0.929198       0.296043       0.905469           1062.33       0.01        \n",
            "\u001b[J45          0.19772     0.931041       0.327708       0.89375            1086.11       0.01        \n",
            "\u001b[J46          0.194907    0.932893       0.312555       0.901563           1109.82       0.01        \n",
            "\u001b[J47          0.190354    0.934326       0.336271       0.895703           1133.58       0.01        \n",
            "\u001b[J48          0.190431    0.932915       0.326305       0.902539           1157.3        0.01        \n",
            "\u001b[J49          0.18926     0.934326       0.312767       0.901172           1181.05       0.01        \n",
            "\u001b[J50          0.184469    0.936035       0.296937       0.907812           1204.93       0.01        \n",
            "\u001b[J51          0.181691    0.936521       0.324149       0.901172           1232.22       0.01        \n",
            "\u001b[J52          0.17546     0.939675       0.347524       0.893945           1256          0.01        \n",
            "\u001b[J53          0.175786    0.937723       0.335627       0.893164           1279.74       0.01        \n",
            "\u001b[J54          0.173612    0.940274       0.317897       0.902344           1303.52       0.01        \n",
            "\u001b[J55          0.171849    0.939548       0.306998       0.90625            1327.23       0.01        \n",
            "\u001b[J56          0.168304    0.94165        0.31145        0.902148           1351.04       0.01        \n",
            "\u001b[J57          0.170139    0.941495       0.301311       0.910156           1374.82       0.01        \n",
            "\u001b[J58          0.165011    0.942708       0.359516       0.892773           1398.52       0.01        \n",
            "\u001b[J59          0.163968    0.94256        0.365818       0.886133           1422.3        0.01        \n",
            "\u001b[J60          0.16541     0.942575       0.357          0.890234           1446.01       0.01        \n",
            "\u001b[J61          0.129435    0.955988       0.277052       0.915234           1473.42       0.001       \n",
            "\u001b[J62          0.101981    0.965434       0.284798       0.916406           1497.13       0.001       \n",
            "\u001b[J63          0.0953637   0.967285       0.279956       0.919727           1520.93       0.001       \n",
            "\u001b[J64          0.0911066   0.968171       0.28204        0.918359           1544.63       0.001       \n",
            "\u001b[J65          0.0853851   0.97037        0.28504        0.918945           1568.41       0.001       \n",
            "\u001b[J66          0.0800331   0.972101       0.287688       0.917969           1592.21       0.001       \n",
            "\u001b[J67          0.0761374   0.973202       0.29148        0.920117           1616.19       0.001       \n",
            "\u001b[J68          0.0756613   0.973699       0.299635       0.918945           1639.98       0.001       \n",
            "\u001b[J69          0.075577    0.97407        0.293845       0.918359           1663.68       0.001       \n",
            "\u001b[J70          0.0730666   0.974676       0.29563        0.920508           1687.47       0.001       \n",
            "\u001b[J71          0.070825    0.975516       0.295581       0.920313           1714.73       0.001       \n",
            "\u001b[J72          0.0710753   0.975697       0.29838        0.919336           1738.52       0.001       \n",
            "\u001b[J73          0.0705982   0.975142       0.298369       0.920508           1762.3        0.001       \n",
            "\u001b[J74          0.0667571   0.976562       0.299809       0.920508           1786.01       0.001       \n",
            "\u001b[J75          0.0642319   0.978427       0.300881       0.920898           1809.77       0.001       \n",
            "\u001b[J76          0.0640179   0.977742       0.304647       0.918359           1833.51       0.001       \n",
            "\u001b[J77          0.0629752   0.977761       0.299763       0.919336           1857.31       0.001       \n",
            "\u001b[J78          0.0586612   0.979523       0.306034       0.922461           1881.03       0.001       \n",
            "\u001b[J79          0.059752    0.979869       0.311227       0.921289           1904.82       0.001       \n",
            "\u001b[J80          0.0571715   0.980213       0.304607       0.920703           1928.51       0.001       \n",
            "\u001b[J81          0.0573339   0.980136       0.315108       0.92168            1956.06       0.001       \n",
            "\u001b[J82          0.0560348   0.979847       0.321934       0.916992           1979.87       0.001       \n",
            "\u001b[J83          0.0553193   0.980613       0.315378       0.914648           2003.58       0.001       \n",
            "\u001b[J84          0.0531816   0.98129        0.318977       0.919531           2027.34       0.001       \n",
            "\u001b[J85          0.0560367   0.98097        0.310993       0.919141           2051.02       0.001       \n",
            "\u001b[J86          0.0535048   0.981534       0.317829       0.920117           2075.04       0.001       \n",
            "\u001b[J87          0.0522188   0.981571       0.31144        0.920313           2098.73       0.001       \n",
            "\u001b[J88          0.0526632   0.982156       0.318594       0.920703           2122.46       0.001       \n",
            "\u001b[J89          0.0528096   0.981445       0.309017       0.92207            2146.21       0.001       \n",
            "\u001b[J90          0.0499371   0.982928       0.313269       0.920508           2169.92       0.001       \n",
            "\u001b[J91          0.0466042   0.983953       0.313852       0.919336           2196.01       0.0001      \n",
            "\u001b[J92          0.0455722   0.98413        0.3087         0.920703           2220.25       0.0001      \n",
            "\u001b[J93          0.045748    0.984197       0.309227       0.921289           2244.6        0.0001      \n",
            "\u001b[J94          0.0473353   0.983151       0.310518       0.921094           2268.89       0.0001      \n",
            "\u001b[J95          0.0439627   0.98453        0.310031       0.921484           2293.26       0.0001      \n",
            "\u001b[J96          0.0450807   0.984375       0.312553       0.921875           2317.57       0.0001      \n",
            "\u001b[J97          0.0438994   0.984885       0.310401       0.920703           2341.92       0.0001      \n",
            "\u001b[J98          0.0441992   0.984863       0.308763       0.921875           2366.28       0.0001      \n",
            "\u001b[J99          0.0414777   0.985978       0.308018       0.921289           2390.57       0.0001      \n",
            "\u001b[J100         0.0444872   0.98402        0.313586       0.920508           2414.94       0.0001      \n",
            "Test accuracy: 0.91702926\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "YkL06bZDMq6I"
      },
      "cell_type": "markdown",
      "source": [
        "先程のData augmentationなしの場合は90%程度だったテスト精度が，学習データにaugmentationを施すことでおよそ1.8%程度向上していることが分かりました．\n",
        "\n",
        "損失と精度のグラフを見てみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-ckf3ncLMq6J",
        "outputId": "a7c8a63d-2ff5-45b3-f9c5-124c8908ef9b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/DeepCNN_cifar10_augmented_result/loss.png')"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nEEIIkQb/P7WcUBHT17DjAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "H8mCPbI5Mq6L",
        "outputId": "f20ade73-cbb8-4f11-9fcb-1def1de4a665",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='results/DeepCNN_cifar10_augmented_result/accuracy.png')"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nAPWRAA3RJppjzdSF60maKQqd+ZQX+nA73LhavwDZLDZM00x/WcD87HUNG3arDZvFhgULwXiQplgL\nwXiQHHsO+XY3boeblJkimowRTUaJJCKEExEiyShDPYO7888iK82aNYtf/epXnH766QQCAcaMGQPA\na6+9Rjze/qqSLVu2MHp01/avb2hoYNiwYcRiMd566y2mTp160GNWrlzJFVdcccDjJ0yYwO9//3sS\niQQNDQ3Mnz+fW265pcN9CxcupK6uDtM08fv97N69u8N7dXauXq+XZDJJdXU1Pp+Pq6++mvvvv59x\n48ZRXV1NXV0dN954Y5fOf38KdukR4WiC9zfW4G+M0LbXyMZdDWzanW65OWwWfN5cyotyKCvKpbwo\nl7KiXCqKc8l1Zd84dUO0keX7VnHCoK9Q6Ox8jH5/a/3r+b/d/8JldVLoKmSwp4Ly3FKO8Y7m6MKR\n5NlzCSfCNESbiCZjOK0OnFYnAMFEMNOlXZbro8hVmOlq/nwXc9JMUJJTjNveM5fWpcwUteE6osko\nbnseefY8HBZ7t4dDLhh9Hp8GtrC2dgOVLXupbKmiKlTDUHcFJwyaznHlU3Hb81q72pPYLTYNufRT\nc+bMYe7cubz44ouEQiF++tOf8sorr3DppZfy0ksv8dxzzwHt91rvinnz5nHttdcydOhQLrvsMu68\n807OOeecLzxm8+bNHH300V94/Pnnn8+8efMwTZMbbriBIUOGdLivoKCAk046KbOla2fbvp5//vmd\nnuv8+fO5/vrrAfja175Gfn4+ADNnziQYDB7Sv3NtAiOHLGWabNnTyL/W7uX9jTXE4vt1KdkjWHKC\nDC9zM2V0CccM8eJx5pFjc2G32DPdphbDiseRlwmiYDzE1tax2ePKppJj+2y/7Lf3LOOl7UvJs+Uy\n2D2IIZ7BzKyYgcfhPqT6TdNkrX89/9zxOrFknDnDTmVG+TSslq71GjRGm1jn/4Q9LfsYVXgUE4rH\n4rQ6eGvPe/x92ytEkzGGeYbwo69c067V2/FzTHH3yl+zL1jN7cf/iPI83yGdTzYxTZNQItw6xCCg\nTWAGEtM0+d73vscdd9zB8OHDu328gl26bVd1M++tq+L9jTUEmqMAlBS4OGVKBYPLbawMvMu6xg9J\n0bV9wm2GlUJXITbD2q5bt9BZwCVjLmBs0dH8ddMLvLN3BTk2FwYGoUQ4/b45xVw35SpKc4sBiCXj\n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\nrkJggg==\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Xz4qiWP2Mq6N"
      },
      "cell_type": "markdown",
      "source": [
        "## Data Augmentationの簡単な使い方\n",
        "\n",
        "前述のようにデータセット内の各画像についていろいろな変換を行って擬似的にデータを増やすような操作をData Augmentationといいます．上では，オリジナルのデータセットクラスを作る方法を示すために変換の操作も`get_example()`内に書くという実装を行いましたが，実はもっと簡単にいろいろな変換をデータに対して行う方法があります．\n",
        "\n",
        "それは，`TransformDataset`クラスを使う方法です．`TransformDataset`は，元になるデータセットオブジェクトと，そこからサンプルしてきた各データ点に対して行いたい変換を関数の形で与えると，変換済みのデータを返してくれるようなデータセットオブジェクトに加工してくれる便利なクラスです．簡単な使い方は以下のようになります．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "nBly8lfhMq6N",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import TransformDataset\n",
        "\n",
        "train_val, test_dataset = cifar.get_cifar10()\n",
        "train_size = int(len(train_val) * 0.9)\n",
        "train_dataset, valid_dataset = split_dataset_random(train_val, train_size, seed=0)\n",
        "\n",
        "\n",
        "# 行いたい変換を関数の形で書く\n",
        "def transform(inputs):\n",
        "    x, t = inputs\n",
        "    x = x.transpose(1, 2, 0)\n",
        "    h, w, _ = x.shape\n",
        "    x_offset = np.random.randint(4)\n",
        "    y_offset = np.random.randint(4)\n",
        "    x = x[y_offset:y_offset + h - 4,\n",
        "          x_offset:x_offset + w - 4]\n",
        "    if np.random.rand() > 0.5:\n",
        "        x = np.fliplr(x)\n",
        "    x = x.transpose(2, 0, 1)\n",
        "    \n",
        "    return x, t\n",
        "\n",
        "\n",
        "# 各データをtransform関数で処理して返すデータセットオブジェクト\n",
        "train_dataset = TransformDataset(train_dataset, transform)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "6Q0dLAW6Mq6O"
      },
      "cell_type": "markdown",
      "source": [
        "このようにして得られた新しい`train_dataset`は，自作のデータセットクラスと同じような変換処理を行った上でデータを返してくれるデータセットオブジェクトとなります．"
      ]
    },
    {
      "metadata": {
        "id": "iJjZn9Q-V8m5",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### ChainerCVを活用した変換処理\n",
        "\n",
        "さて，先ほどご紹介したコードでは，画像に対するランダムクロップ，及びランダムな左右反転の処理を自ら実装していました．もし，より多様な変換を行いたい場合，上記の`transform`関数に処理を追加していくことになりますが，一般的に用いられる変換処理をその度に自ら実装するのは手間です．そこで本項では最後に，[ChainerCV](http://chainercv.readthedocs.io/en/stable)[[Niitani 2017]](https://arxiv.org/abs/1708.08169)をご紹介します．ChainerCVは，Computer Visionに特化した機能が豊富に追加された，Chainerの補助パッケージとしての役割を担うオープンソース・ソフトウェアです．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "_dJ1-rCrMq6P",
        "outputId": "085a133b-597c-4a36-8900-c876231186e6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 343
        }
      },
      "cell_type": "code",
      "source": [
        "!pip install chainercv"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting chainercv\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/bb/1c/cee12630628d0acd4d6c5d7a3ba196a3aa079a863baa3dc74eb70d8494c5/chainercv-0.11.0.tar.gz (223kB)\n",
            "\r\u001b[K    4% |█▌                              | 10kB 17.1MB/s eta 0:00:01\r\u001b[K    9% |███                             | 20kB 4.4MB/s eta 0:00:01\r\u001b[K    13% |████▍                           | 30kB 6.3MB/s eta 0:00:01\r\u001b[K    18% |█████▉                          | 40kB 4.0MB/s eta 0:00:01\r\u001b[K    22% |███████▍                        | 51kB 4.9MB/s eta 0:00:01\r\u001b[K    27% |████████▉                       | 61kB 5.8MB/s eta 0:00:01\r\u001b[K    32% |██████████▎                     | 71kB 6.4MB/s eta 0:00:01\r\u001b[K    36% |███████████▊                    | 81kB 7.2MB/s eta 0:00:01\r\u001b[K    41% |█████████████▏                  | 92kB 7.9MB/s eta 0:00:01\r\u001b[K    45% |██████████████▊                 | 102kB 6.5MB/s eta 0:00:01\r\u001b[K    50% |████████████████▏               | 112kB 6.6MB/s eta 0:00:01\r\u001b[K    55% |█████████████████▋              | 122kB 8.8MB/s eta 0:00:01\r\u001b[K    59% |███████████████████             | 133kB 8.6MB/s eta 0:00:01\r\u001b[K    64% |████████████████████▌           | 143kB 15.0MB/s eta 0:00:01\r\u001b[K    68% |██████████████████████          | 153kB 15.0MB/s eta 0:00:01\r\u001b[K    73% |███████████████████████▌        | 163kB 15.0MB/s eta 0:00:01\r\u001b[K    77% |█████████████████████████       | 174kB 15.3MB/s eta 0:00:01\r\u001b[K    82% |██████████████████████████▍     | 184kB 15.4MB/s eta 0:00:01\r\u001b[K    87% |████████████████████████████    | 194kB 15.5MB/s eta 0:00:01\r\u001b[K    91% |█████████████████████████████▍  | 204kB 35.0MB/s eta 0:00:01\r\u001b[K    96% |██████████████████████████████▉ | 215kB 20.0MB/s eta 0:00:01\r\u001b[K    100% |████████████████████████████████| 225kB 14.8MB/s \n",
            "\u001b[?25hRequirement already satisfied: chainer>=5.0 in /usr/local/lib/python3.6/dist-packages (from chainercv) (5.1.0)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.6/dist-packages (from chainercv) (4.0.0)\n",
            "Requirement already satisfied: protobuf>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from chainer>=5.0->chainercv) (3.6.1)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.6/dist-packages (from chainer>=5.0->chainercv) (3.0.10)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from chainer>=5.0->chainercv) (1.11.0)\n",
            "Requirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from chainer>=5.0->chainercv) (1.14.6)\n",
            "Requirement already satisfied: olefile in /usr/local/lib/python3.6/dist-packages (from Pillow->chainercv) (0.46)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.0.0->chainer>=5.0->chainercv) (40.6.2)\n",
            "Building wheels for collected packages: chainercv\n",
            "  Running setup.py bdist_wheel for chainercv ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \bdone\n",
            "\u001b[?25h  Stored in directory: /root/.cache/pip/wheels/95/24/5a/1611db416857b5e092962bc22a70722315881e03970c7fa966\n",
            "Successfully built chainercv\n",
            "Installing collected packages: chainercv\n",
            "Successfully installed chainercv-0.11.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "jsdEfeirMq6R"
      },
      "cell_type": "markdown",
      "source": [
        "[ChainerCV](http://chainercv.readthedocs.io/en/stable)には，画像に対する様々な変換があらかじめ用意されています．\n",
        "\n",
        "- [ChainerCVで使える画像変換一覧](http://chainercv.readthedocs.io/en/stable/reference/transforms.html#image)\n",
        "\n",
        "例えば，上でNumPyを使って書いていたランダムクロップやランダム左右反転は，`chainercv.transforms`モジュールを使うと，それぞれ以下のように1行で書くことができます：\n",
        "\n",
        "```python\n",
        "x = transforms.random_crop(x, (28, 28))  # ランダムクロップ\n",
        "x = chainercv.transforms.random_flip(x)  # ランダム左右反転\n",
        "```\n",
        "\n",
        "`chainercv.transforms`モジュールを使って，`transform`関数をアップデートしてみましょう．ちなみに，`get_cifar10()`で得られるデータセットでは，デフォルトで画像の画素値の範囲が`[0, 1]`にスケールされています．しかし，`get_cifar10()`に`scale=255.`を渡しておくと，値の範囲をもともとの`[0, 255]`のままにできます．今回`transform`の中で行う処理は，以下の5つです：\n",
        "\n",
        "1. PCA lighting: 先行研究(AlexNet)の学習で使われていた方法で，色を変化させる変換処理を行います．\n",
        "2. Standardization: 訓練用データセット全体からチャンネルごとの画素値の平均・標準偏差を求めて標準化をします\n",
        "3. Random flip: ランダムに画像の左右を反転します\n",
        "4. Random expand: `[1, 1.5]`からランダムに決めた大きさの黒いキャンバスを作り，その中のランダムな位置へ画像を配置します\n",
        "5. Random crop: `(28, 28)`の大きさの領域をランダムにクロップします"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "TbDNke8ZMq6S",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from functools import partial\n",
        "from chainercv import transforms\n",
        "\n",
        "train_val, test_dataset = cifar.get_cifar10(scale=255.)\n",
        "train_size = int(len(train_val) * 0.9)\n",
        "train_dataset, valid_dataset = split_dataset_random(train_val, train_size, seed=0)\n",
        "\n",
        "mean = np.mean([x for x, _ in train_dataset], axis=(0, 2, 3))\n",
        "std = np.std([x for x, _ in train_dataset], axis=(0, 2, 3))\n",
        "\n",
        "\n",
        "def transform(inputs, train=True):\n",
        "    img, label = inputs\n",
        "    img = img.copy()\n",
        "    \n",
        "    # Color augmentation\n",
        "    if train:\n",
        "        img = transforms.pca_lighting(img, 76.5)\n",
        "        \n",
        "    # Standardization\n",
        "    img -= mean[:, None, None]\n",
        "    img /= std[:, None, None]\n",
        "    \n",
        "    # Random flip & crop\n",
        "    if train:\n",
        "        img = transforms.random_flip(img, x_random=True)\n",
        "        img = transforms.random_expand(img, max_ratio=1.5)\n",
        "        img = transforms.random_crop(img, (28, 28))\n",
        "        \n",
        "    return img, label\n",
        "\n",
        "train_dataset = TransformDataset(train_dataset, partial(transform, train=True))\n",
        "valid_dataset = TransformDataset(valid_dataset, partial(transform, train=False))\n",
        "test_dataset = TransformDataset(test_dataset, partial(transform, train=False))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "iNQZOwbAMq6S"
      },
      "cell_type": "markdown",
      "source": [
        "では，standardizationとChainerCVによるPCA Lightingを追加した`TransformDataset`を使って学習をしてみましょう．\n",
        "\n",
        "これまでと同様，90エポックまで学習させておいたsnapshotを用いて，最後の10エポックだけ学習を行います．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "jh6J1f48Mq6T",
        "outputId": "a8e7c1f5-9f8e-44e1-fc0a-3fd981abb13e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2161
        }
      },
      "cell_type": "code",
      "source": [
        "!wget https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_augmented2_snapshot_epoch_90.npz\n",
        "\n",
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, train_dataset=train_dataset, valid_dataset=valid_dataset, test_dataset=test_dataset, postfix='augmented2_', base_lr=0.1, lr_decay=(30, 'epoch'), snapshot='DeepCNN_cifar10_augmented2_snapshot_epoch_90.npz')"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2018-12-06 05:16:25--  https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/DeepCNN_cifar10_augmented2_snapshot_epoch_90.npz\n",
            "Resolving github.com (github.com)... 192.30.253.112, 192.30.253.113\n",
            "Connecting to github.com (github.com)|192.30.253.112|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/5064a880-eeb7-11e8-8e8b-fddbe76ecd56?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181206%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181206T051625Z&X-Amz-Expires=300&X-Amz-Signature=389acf977fdd9f08d28dd15c8b0096c1ae13d5f06db3ce0edceb2ff2cfd9ca0b&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_augmented2_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream [following]\n",
            "--2018-12-06 05:16:25--  https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/5064a880-eeb7-11e8-8e8b-fddbe76ecd56?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181206%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181206T051625Z&X-Amz-Expires=300&X-Amz-Signature=389acf977fdd9f08d28dd15c8b0096c1ae13d5f06db3ce0edceb2ff2cfd9ca0b&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3DDeepCNN_cifar10_augmented2_snapshot_epoch_90.npz&response-content-type=application%2Foctet-stream\n",
            "Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.216.134.27\n",
            "Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.134.27|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 56734002 (54M) [application/octet-stream]\n",
            "Saving to: ‘DeepCNN_cifar10_augmented2_snapshot_epoch_90.npz’\n",
            "\n",
            "DeepCNN_cifar10_aug 100%[===================>]  54.11M  26.2MB/s    in 2.1s    \n",
            "\n",
            "2018-12-06 05:16:28 (26.2 MB/s) - ‘DeepCNN_cifar10_augmented2_snapshot_epoch_90.npz’ saved [56734002/56734002]\n",
            "\n",
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           2.64248     0.137296       2.15132        0.175              23.5716       0.1         \n",
            "\u001b[J2           2.09025     0.202814       1.90949        0.248633           47.2547       0.1         \n",
            "\u001b[J3           1.92989     0.251647       1.80744        0.313867           70.8962       0.1         \n",
            "\u001b[J4           1.82033     0.296742       1.75358        0.319727           94.6262       0.1         \n",
            "\u001b[J5           1.70069     0.350717       1.59837        0.397266           118.252       0.1         \n",
            "\u001b[J6           1.56064     0.418435       1.6835         0.418359           141.967       0.1         \n",
            "\u001b[J7           1.45132     0.473691       1.30451        0.528711           165.613       0.1         \n",
            "\u001b[J8           1.33843     0.523815       2.81471        0.372656           189.382       0.1         \n",
            "\u001b[J9           1.27017     0.556019       1.61386        0.499023           213.846       0.1         \n",
            "\u001b[J10          1.20204     0.579972       1.46257        0.519141           237.532       0.1         \n",
            "\u001b[J11          1.14896     0.601252       1.1028         0.623633           265.125       0.1         \n",
            "\u001b[J12          1.10957     0.614428       1.17823        0.594141           288.775       0.1         \n",
            "\u001b[J13          1.07055     0.635387       1.00013        0.670898           312.476       0.1         \n",
            "\u001b[J14          1.04187     0.647058       1.07628        0.642383           336.226       0.1         \n",
            "\u001b[J15          1.00359     0.661066       1.00439        0.655859           360.038       0.1         \n",
            "\u001b[J16          0.971513    0.675503       0.8598         0.723828           383.802       0.1         \n",
            "\u001b[J17          0.941225    0.686301       1.09454        0.661328           407.665       0.1         \n",
            "\u001b[J18          0.917967    0.694869       0.998599       0.681055           431.468       0.1         \n",
            "\u001b[J19          0.905397    0.699586       0.811614       0.738281           455.224       0.1         \n",
            "\u001b[J20          0.874732    0.706188       0.714926       0.762695           479.061       0.1         \n",
            "\u001b[J21          0.86753     0.712607       0.850176       0.738477           506.629       0.1         \n",
            "\u001b[J22          0.858491    0.714844       0.95919        0.692187           530.459       0.1         \n",
            "\u001b[J23          0.845307    0.717637       1.12914        0.668164           554.185       0.1         \n",
            "\u001b[J24          0.827677    0.72785        0.827821       0.746484           577.974       0.1         \n",
            "\u001b[J25          0.821103    0.728715       0.7663         0.741602           601.76        0.1         \n",
            "\u001b[J26          0.816583    0.728321       0.763894       0.757812           625.472       0.1         \n",
            "\u001b[J27          0.805109    0.735596       0.74157        0.754492           649.375       0.1         \n",
            "\u001b[J28          0.809963    0.734152       0.742951       0.7625             673.099       0.1         \n",
            "\u001b[J29          0.792127    0.737149       0.692472       0.773633           696.895       0.1         \n",
            "\u001b[J30          0.783124    0.741965       1.02244        0.702734           720.621       0.1         \n",
            "\u001b[J31          0.604456    0.795898       0.394226       0.868359           748.179       0.01        \n",
            "\u001b[J32          0.523254    0.822227       0.379255       0.873242           771.92        0.01        \n",
            "\u001b[J33          0.502693    0.830078       0.360393       0.877734           795.747       0.01        \n",
            "\u001b[J34          0.484705    0.835627       0.351212       0.884766           819.578       0.01        \n",
            "\u001b[J35          0.465001    0.842192       0.348862       0.882031           843.291       0.01        \n",
            "\u001b[J36          0.45372     0.846613       0.339081       0.885742           867.053       0.01        \n",
            "\u001b[J37          0.450468    0.846043       0.335244       0.887695           890.763       0.01        \n",
            "\u001b[J38          0.439256    0.848411       0.331884       0.889453           914.524       0.01        \n",
            "\u001b[J39          0.430965    0.852475       0.324836       0.895312           938.351       0.01        \n",
            "\u001b[J40          0.424651    0.855447       0.370822       0.881641           962.135       0.01        \n",
            "\u001b[J41          0.418223    0.857          0.328078       0.89082            989.723       0.01        \n",
            "\u001b[J42          0.409156    0.860332       0.334291       0.888672           1013.41       0.01        \n",
            "\u001b[J43          0.410969    0.860574       0.338266       0.888281           1037.14       0.01        \n",
            "\u001b[J44          0.397083    0.862469       0.337938       0.889258           1060.81       0.01        \n",
            "\u001b[J45          0.390805    0.8661         0.31488        0.900586           1084.56       0.01        \n",
            "\u001b[J46          0.39124     0.866008       0.324671       0.893945           1108.24       0.01        \n",
            "\u001b[J47          0.390007    0.865101       0.320954       0.895117           1131.96       0.01        \n",
            "\u001b[J48          0.383439    0.868367       0.355809       0.890625           1155.62       0.01        \n",
            "\u001b[J49          0.380758    0.87065        0.314927       0.899805           1179.36       0.01        \n",
            "\u001b[J50          0.379198    0.870716       0.302073       0.903125           1203.09       0.01        \n",
            "\u001b[J51          0.371325    0.873019       0.317537       0.899805           1230.61       0.01        \n",
            "\u001b[J52          0.368561    0.874578       0.338393       0.891016           1254.34       0.01        \n",
            "\u001b[J53          0.366614    0.872975       0.318233       0.89707            1278.2        0.01        \n",
            "\u001b[J54          0.366082    0.874667       0.328654       0.892187           1301.94       0.01        \n",
            "\u001b[J55          0.365454    0.873331       0.311355       0.902148           1325.61       0.01        \n",
            "\u001b[J56          0.357191    0.876509       0.330824       0.895898           1349.36       0.01        \n",
            "\u001b[J57          0.361274    0.874667       0.320739       0.897461           1373.1        0.01        \n",
            "\u001b[J58          0.354885    0.878339       0.308104       0.901172           1396.78       0.01        \n",
            "\u001b[J59          0.359033    0.876931       0.316534       0.900586           1420.55       0.01        \n",
            "\u001b[J60          0.356422    0.876291       0.366406       0.888281           1444.25       0.01        \n",
            "\u001b[J61          0.314513    0.891513       0.261128       0.914062           1471.67       0.001       \n",
            "\u001b[J62          0.275813    0.905159       0.257487       0.916406           1495.37       0.001       \n",
            "\u001b[J63          0.268649    0.907804       0.253204       0.918164           1519.12       0.001       \n",
            "\u001b[J64          0.264412    0.908298       0.256485       0.918555           1542.84       0.001       \n",
            "\u001b[J65          0.261826    0.910511       0.253851       0.917773           1566.66       0.001       \n",
            "\u001b[J66          0.255704    0.911998       0.257955       0.916602           1590.48       0.001       \n",
            "\u001b[J67          0.25836     0.909566       0.256463       0.919141           1614.22       0.001       \n",
            "\u001b[J68          0.251792    0.912753       0.254393       0.920117           1638.04       0.001       \n",
            "\u001b[J69          0.251154    0.914508       0.25251        0.920508           1661.81       0.001       \n",
            "\u001b[J70          0.24735     0.91464        0.255754       0.91875            1685.83       0.001       \n",
            "\u001b[J71          0.241314    0.917268       0.253207       0.921094           1713.35       0.001       \n",
            "\u001b[J72          0.246059    0.914617       0.257668       0.920508           1737.18       0.001       \n",
            "\u001b[J73          0.238097    0.918213       0.257092       0.919727           1761.02       0.001       \n",
            "\u001b[J74          0.235832    0.918981       0.251519       0.919922           1784.77       0.001       \n",
            "\u001b[J75          0.236254    0.918857       0.253711       0.919531           1808.58       0.001       \n",
            "\u001b[J76          0.235273    0.917646       0.249922       0.920117           1832.36       0.001       \n",
            "\u001b[J77          0.233553    0.918635       0.251188       0.921094           1856.13       0.001       \n",
            "\u001b[J78          0.229216    0.920829       0.256883       0.921484           1879.92       0.001       \n",
            "\u001b[J79          0.231176    0.919877       0.254759       0.92207            1903.75       0.001       \n",
            "\u001b[J80          0.227571    0.921007       0.251693       0.920508           1927.51       0.001       \n",
            "\u001b[J81          0.229313    0.92041        0.257421       0.920508           1955.13       0.001       \n",
            "\u001b[J82          0.225018    0.922896       0.255896       0.919922           1978.98       0.001       \n",
            "\u001b[J83          0.223251    0.923478       0.25848        0.918555           2002.75       0.001       \n",
            "\u001b[J84          0.221238    0.924294       0.259179       0.920703           2026.56       0.001       \n",
            "\u001b[J85          0.222084    0.923411       0.251648       0.920313           2050.3        0.001       \n",
            "\u001b[J86          0.221973    0.924339       0.252463       0.920898           2074.11       0.001       \n",
            "\u001b[J87          0.217851    0.925147       0.252802       0.920898           2097.85       0.001       \n",
            "\u001b[J88          0.215969    0.925138       0.255438       0.921094           2121.65       0.001       \n",
            "\u001b[J89          0.217307    0.92294        0.253423       0.920313           2145.48       0.001       \n",
            "\u001b[J90          0.217241    0.925058       0.254931       0.919922           2169.54       0.001       \n",
            "\u001b[J91          0.205112    0.928622       0.249632       0.923047           2194.83       0.0001      \n",
            "\u001b[J92          0.203856    0.928174       0.250691       0.922852           2219.04       0.0001      \n",
            "\u001b[J93          0.204078    0.929821       0.248423       0.922852           2243.48       0.0001      \n",
            "\u001b[J94          0.203083    0.930199       0.250404       0.923633           2267.78       0.0001      \n",
            "\u001b[J95          0.204149    0.928999       0.251019       0.923047           2292.06       0.0001      \n",
            "\u001b[J96          0.203963    0.9306         0.248933       0.922656           2316.32       0.0001      \n",
            "\u001b[J97          0.201625    0.930886       0.248961       0.921289           2340.66       0.0001      \n",
            "\u001b[J98          0.205411    0.929488       0.250523       0.922266           2364.98       0.0001      \n",
            "\u001b[J99          0.20006     0.930934       0.249853       0.921875           2389.23       0.0001      \n",
            "\u001b[J100         0.201321    0.929754       0.252851       0.922656           2413.59       0.0001      \n",
            "Test accuracy: 0.923754\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "HsuPDoGsMq6V"
      },
      "cell_type": "markdown",
      "source": [
        "わずかに精度が向上しました．他にも，ResNetと呼ばれる有名なネットワーク構造を採用して学習を行うなど，簡単に試せる改善方法がいくつかあります．ぜひ色々と試してみてください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WD1oaVYTMq6Z"
      },
      "cell_type": "markdown",
      "source": [
        "## 参考文献\n",
        "\n",
        "[Tokui 2015] Tokui, S., Oono, K., Hido, S. and Clayton, J., Chainer: a Next-Generation Open Source Framework for Deep Learning, Proceedings of Workshop on Machine Learning Systems(LearningSys) in The Twenty-ninth Annual Conference on Neural Information Processing Systems (NIPS), (2015)\n",
        "\n",
        "[Niitani 2017] Yusuke Niitani, Toru Ogawa, Shunta Saito, Masaki Saito, \"ChainerCV: a Library for Deep Learning in Computer Vision\", ACM Multimedia (ACMMM), Open Source Software Competition, 2017\n",
        "\n",
        "[Hidaka 2017] Masatoshi Hidaka, Yuichiro Kikura, Yoshitaka Ushiku, Tatsuya Harada. WebDNN: Fastest DNN Execution Framework on Web Browser. ACM International Conference on Multimedia (ACMMM), Open Source Software Competition, pp.1213-1216, 2017."
      ]
    }
  ]
}