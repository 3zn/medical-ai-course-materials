{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Introduction_to_Chainer",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [
        "71RNU5KmMq31",
        "3sFOwliOMq4Q",
        "VPRotZdNMq4V",
        "BywdNhUSMq4s",
        "D2tRnyVYMq4y"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mitmul/medical-ai-course-materials/blob/master/notebooks/Introduction_to_Chainer.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "n0_KFOv4Mq3N"
      },
      "cell_type": "markdown",
      "source": [
        "<a href=\"https://colab.research.google.com/github/mitmul/medical-ai-course-materials/blob/master/notebooks/Introduction_to_Chainer.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n",
        "\n",
        "# Deep Learningフレームワークの基礎\n",
        "\n",
        "Chainerは、現在の様々なDeep Learningフレームワーク（TensorFlow, PyTorch, etc.）で採用されている主要なニューラルネットワークの記法となっているDefine-by-Runというアイデアを基本としたAPIを初めに採用したDeep Learningフレームワークで、2015年からPreferred Networks社が開発を続けています。ここでは、柔軟性と直感的であることを特徴とするこのChainerというフレームワークの基本的な使い方をマスターしていきましょう。"
      ]
    },
    {
      "metadata": {
        "id": "bIrdN3L9reS0",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## 環境構築\n",
        "\n",
        "まずはColab上で以下のセルを実行し、最新版のChainerをインストールしましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-IPVDlAAMtK1",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!curl https://colab.chainer.org/install | sh -\n",
        "!apt-get install -y graphviz"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "YLbP1BkTMq3W"
      },
      "cell_type": "markdown",
      "source": [
        "それでは，以下のコマンドをターミナルで実行し、ChainerやCuPyが正しくインストールされたかを確認してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "pNPcxcV1Mq3X",
        "outputId": "4a54ce4f-c9e3-4e1a-d891-0c4f0e3f5aa0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "cell_type": "code",
      "source": [
        "!python -c 'import chainer; chainer.print_runtime_info()'"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Platform: Linux-4.14.65+-x86_64-with-Ubuntu-18.04-bionic\n",
            "Chainer: 5.0.0\n",
            "NumPy: 1.14.6\n",
            "CuPy:\n",
            "  CuPy Version          : 5.0.0\n",
            "  CUDA Root             : /usr/local/cuda\n",
            "  CUDA Build Version    : 9020\n",
            "  CUDA Driver Version   : 9020\n",
            "  CUDA Runtime Version  : 9020\n",
            "  cuDNN Build Version   : 7201\n",
            "  cuDNN Version         : 7201\n",
            "  NCCL Build Version    : 2213\n",
            "iDeep: Not Available\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "8GFokOwXMq3b"
      },
      "cell_type": "markdown",
      "source": [
        "うまくできていますね。以下のチュートリアルでは、matplotlibを可視化に使いますので、これも同時にインストールしておきましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "AGHezHvdMq3b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 156
        },
        "outputId": "02e832e1-610f-46c0-c207-593723e1fe1a"
      },
      "cell_type": "code",
      "source": [
        "!pip install matplotlib"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (2.1.2)\n",
            "Requirement already satisfied: numpy>=1.7.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.14.6)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.3.0)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2018.7)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (0.10.0)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.5.3)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.11.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Cp1v4ygDMq3f"
      },
      "cell_type": "markdown",
      "source": [
        "## 学習ループを書いてみよう\n",
        "\n",
        "ここでは、有名な手書き数字のデータセットMNISTを使って、画像を10クラスに分類するネットワークを書いて訓練してみます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "pON7OjrkMq3f"
      },
      "cell_type": "markdown",
      "source": [
        "### データセットの準備\n",
        "\n",
        "教師あり学習の場合、**データセットは「入力データ」と「それと対になるラベルデータ」を返すオブジェクトである必要があります。**\n",
        "ChainerにはMNISTやCIFAR10/100のようなよく用いられるデータセットに対して、データをダウンロードしてくるところからそのような機能をもったオブジェクトを作るところまで自動的にやってくれる便利なメソッドがあるので、ここではひとまずこれを用いましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "co0qbD2dMq3f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "8b489ae2-e2ec-4755-f17e-89510e183bb4"
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import mnist\n",
        "\n",
        "# データセットがダウンロード済みでなければ、ダウンロードも行う\n",
        "train_val, test = mnist.get_mnist(withlabel=True, ndim=1)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading from http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz...\n",
            "Downloading from http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz...\n",
            "Downloading from http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz...\n",
            "Downloading from http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz...\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "k6phOMcvMq3j"
      },
      "cell_type": "markdown",
      "source": [
        "データセットオブジェクト自体は準備ができました。これは、例えば `train_val[i]` などとすると**i番目の `(data, label)` というタプルを返すリスト** と同様のものになっています（**実際ただのPythonリストもChainerのデータセットオブジェクトとして使えます**）。では0番目のデータとラベルを取り出して、表示してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "uylrRDSfMq3k",
        "outputId": "604ab90b-c3fa-4455-f925-7aba1120f3c7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "cell_type": "code",
      "source": [
        "# matplotlibを使ったグラフ描画結果がnotebook内に表示されるようにします。\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# データの例示\n",
        "x, t = train_val[0]  # 0番目の (data, label) を取り出す\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.axis('off')\n",
        "plt.show()\n",
        "print('label:', t)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAD4CAYAAADFJPs2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAABqlJREFUeJzt3btLV/Efx/G+v6KhqMSlIIiwoagI\nlwoiiAiJoAarRWgqmhKaXNoaiqDLIDU4BS3R2GWpwS5DIESXRWgv3MoudsP8/v6B3/ftL/Wb5uvx\nWF+czhl6cqBPRxvNZnMJsLj9Z74fAGg/oUMAoUMAoUMAoUOAZX/jJo1Gwz/tQ5s1m81Gq80bHQII\nHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQII\nHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIIHQIsm+8H\noD2WLl1a7mvWrGnr/fv7+1tuK1asKK/dvHlzuZ85c6bcr1y50nLr6+srr/3x40e5X7p0qdzPnz9f\n7vPFGx0CCB0CCB0CCB0CCB0CCB0CCB0COEdvow0bNpT78uXLy33Pnj3lvnfv3pZbR0dHee2xY8fK\nfT69e/eu3AcHB8u9t7e35fbly5fy2jdv3pT706dPy32h8kaHAEKHAEKHAEKHAEKHAEKHAI1ms9n+\nmzQa7b/JPOju7i734eHhcm/3p6IL1dTUVLmfPHmy3L9+/Trje4+NjZX7x48fy/3t27czvne7NZvN\nRqvNGx0CCB0CCB0CCB0CCB0CCB0CCB0COEefhc7OznIfGRkp966urrl8nDk13bOPj4+X+/79+1tu\nv379Kq9N/f8Fs+UcHcIJHQIIHQIIHQIIHQIIHQIIHQL4cc+z8OHDh3IfGBgo98OHD5f7q1evyn26\nH3tcef36dbn39PSU+8TERLlv27at5Xb27NnyWuaeNzoEEDoEEDoEEDoEEDoEEDoEEDoE8D36PFq9\nenW5T/crfoeGhlpup06dKq89ceJEud++fbvcWXh8jw7hhA4BhA4BhA4BhA4BhA4BhA4BfI8+jz5/\n/jyr6z99+jTja0+fPl3ud+7cKffpfsc5C4s3OgQQOgQQOgQQOgQQOgQQOgTwmeo/bOXKlS23+/fv\nl9fu27ev3A8dOlTujx49Knf+Pp+pQjihQwChQwChQwChQwChQwChQwDn6IvUpk2byv3ly5flPj4+\nXu6PHz8u9xcvXrTcbty4UV77N/5OLkbO0SGc0CGA0CGA0CGA0CGA0CGA0CGAc/RQvb295X7z5s1y\nX7Vq1Yzvfe7cuXK/detWuY+Njc343ouZc3QIJ3QIIHQIIHQIIHQIIHQIIHQI4Byd/2n79u3lfu3a\ntXI/cODAjO89NDRU7hcuXCj39+/fz/je/zLn6BBO6BBA6BBA6BBA6BBA6BBA6BDAOToz0tHRUe5H\njhxpuU33rXuj0fI4eMmSJUuWDA8Pl3tPT0+5L1bO0SGc0CGA0CGA0CGA0CGA0CGA4zX+up8/f5b7\nsmXLyn1ycrLcDx482HJ78uRJee2/zPEahBM6BBA6BBA6BBA6BBA6BBA6BKgPLIm1Y8eOcj9+/Hi5\n79y5s+U23Tn5dEZHR8v92bNns/rzFyNvdAggdAggdAggdAggdAggdAggdAjgHH2R2rx5c7n39/eX\n+9GjR8t93bp1f/xM/6/fv3+X+9jYWLlPTU3N5eMsCt7oEEDoEEDoEEDoEEDoEEDoEEDoEMA5+gI2\n3Vl1X19fy226c/KNGzfO5JHmxIsXL8r9woUL5X7v3r25fJwI3ugQQOgQQOgQQOgQQOgQQOgQwPFa\nG61du7bct27dWu7Xr18v9y1btvzxM82VkZGRcr98+XLL7e7du+W1PjOde97oEEDoEEDoEEDoEEDo\nEEDoEEDoEMA5+jQ6OztbbkNDQ+W13d3d5d7V1TWjZ5oLz58/L/erV6+W+8OHD8v9+/fvf/xMtI83\nOgQQOgQQOgQQOgQQOgQQOgQQOgRY9Ofou3fvLveBgYFy37VrV8tt/fr1M3qmufLt27eW2+DgYHnt\nxYsXy31iYmJGz8TC5I0OAYQOAYQOAYQOAYQOAYQOAYQOARb9OXpvb++s9tkYHR0t9wcPHpT75ORk\nuVffjI+Pj5fXksUbHQIIHQIIHQIIHQIIHQIIHQIIHQI0ms1m+2/SaLT/JhCu2Ww2Wm3e6BBA6BBA\n6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA6BBA\n6BDgr/y4Z2B+eaNDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFDAKFD\nAKFDAKFDAKFDAKFDAKFDAKFDAKFDgP8Ca9g1McGyJGQAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f32b6189c88>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "label: 5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "oTy7XDwMMq3o"
      },
      "cell_type": "markdown",
      "source": [
        "### Validation用データセットを作る\n",
        "\n",
        "次に、上で作成した`train_val`データセットを、Training用のデータセットとValidation用のデータセットに分割しましょう。これもChainerの便利な関数を使えば簡単にできます。元々60000個のデータが入っている`train`データセット50000個のデータをTraining用に、残りの10000個をValidation用にしてみます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xeCk_TCcMq3o",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import split_dataset_random\n",
        "\n",
        "train, valid = split_dataset_random(train_val, 50000, seed=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kJrPx08DMq3q"
      },
      "cell_type": "markdown",
      "source": [
        "これだけで元々の`train_val`を、ランダムに選んだ50000個の`train`データセットと`valid`データセットに分けることができました。何度も実行する際に異なる分け方になってしまわないよう、第3引数の`seed`を設定しておくことをオススメします。それでは、それぞれのデータセットの中に入っているデータの数を確認してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "TfT0WBQfMq3r",
        "outputId": "770859dc-4ed0-45e6-e8cd-493813e34f7a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "print('Training dataset size:', len(train))\n",
        "print('Validation dataset size:', len(valid))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training dataset size: 50000\n",
            "Validation dataset size: 10000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "IbZLLj6ZMq3v"
      },
      "cell_type": "markdown",
      "source": [
        "### Iteratorの作成\n",
        "\n",
        "データセットの準備は完了しましたが、このままネットワークの学習に使うのは少し面倒です。なぜなら、ネットワークのパラメータ最適化手法として広く用いられているStochastic Gradient Descent (SGD)という手法では、一般的にいくつかのデータを束ねた**ミニバッチ**と呼ばれる単位でネットワークにデータを渡し、それに対する予測を作って、ラベルと比較するということを行います。そのため、**バッチサイズ分だけデータとラベルを束ねる作業が必要です。**\n",
        "\n",
        "そこで、**データセットから決まった数のデータとラベルを取得し、それらを束ねてミニバッチを作ってくれる機能を持った`Iterator`を使いましょう。**`Iterator`は、先程作ったデータセットオブジェクトを渡して初期化してやったあとは、`next()`メソッドで新しいミニバッチを返してくれます。内部ではデータセットを何周なめたか（`epoch`）などの情報がどうように記録されているおり、学習ループを書いていく際に便利です。\n",
        "\n",
        "データセットオブジェクトからイテレータを作るには、以下のようにします。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "cZdvCRhxMq3w",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import iterators\n",
        "\n",
        "batchsize = 128\n",
        "\n",
        "train_iter = iterators.SerialIterator(train, batchsize)\n",
        "valid_iter = iterators.SerialIterator(\n",
        "    valid, batchsize, repeat=False, shuffle=False)\n",
        "test_iter = iterators.SerialIterator(\n",
        "    test, batchsize, repeat=False, shuffle=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "elxQ9EGEMq30"
      },
      "cell_type": "markdown",
      "source": [
        "ここでは、学習に用いるデータセット用のイテレータ（`train_iter`）と、検証用のデータセット用のイテレータ（`valid_iter`）、および学習したネットワークの評価に用いるテストデータセット用のイテレータ（`test_iter`）の計3つを作成しています。ここで、`batchsize = 128`としているので、作成した3つの`Iterator`は、例えば`train_iter.next()`などとすると128枚の数字画像データを一括りにして返してくれます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "71RNU5KmMq31"
      },
      "cell_type": "markdown",
      "source": [
        "#### NOTE: `SerialIterator`について\n",
        "\n",
        "Chainerがいくつか用意している`Iterator`の一種である`SerialIterator`は、データセットの中のデータを順番に取り出してくる最もシンプルな`Iterator`です。コンストラクタの引数にデータセットオブジェクトと、バッチサイズを取ります。このとき、渡したデータセットオブジェクトから、何周も何周もデータを繰り返し読み出す必要がある場合は`repeat`引数を`True`とし、1周が終わったらそれ以上データを取り出したくない場合はこれを`False`とします。これは、主にvalidation用のデータセットに対して使うフラグです。デフォルトでは、`True`になっています。また、`shuffle`引数に`True`を渡すと、データセットから取り出されてくるデータの順番をエポックごとにランダムに変更します。`SerialIterator`の他にも、マルチプロセスで高速にデータを処理できるようにした`MultiprocessIterator`や`MultithreadIterator`など、複数の`Iterator`が用意されています。詳しくは以下を見てください。\n",
        "\n",
        "- [Chainerで使えるIterator一覧](https://docs.chainer.org/en/stable/reference/iterators.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "PX0GJaWLMq32"
      },
      "cell_type": "markdown",
      "source": [
        "### ネットワークの定義\n",
        "\n",
        "では、学習させるネットワークを定義してみましょう。今回は、全結合層のみからなる多層パーセプトロンを作ってみます。中間層のユニット数は適当に100とし、今回は10クラス分類をしたいので、出力ユニット数は10とします。今回用いるMNISTデータセットは0〜9までの数字のいずれかを意味する10種のラベルを持つためです。では、ネットワークを定義するために必要な`Link`, `Function`, そして`Chain`について、簡単にここで説明を行います。\n",
        "\n",
        "#### LinkとFunction\n",
        "\n",
        "Chainerでは、ニューラルネットワークの各層を、`Link`と`Function`に区別します。\n",
        "\n",
        "- **`Link`は、パラメータを持つ関数です。**\n",
        "- **`Function`は、パラメータを持たない関数です。**\n",
        "\n",
        "これらを組み合わせてネットワークを記述します。パラメータを持つ層は、`chainer.links`モジュール以下にたくさん用意されています。パラメータを持たない層は、`chainer.functions`モジュール以下にたくさん用意されています。これらに簡単にアクセスするために、\n",
        "\n",
        "```\n",
        "import chainer.links as L\n",
        "import chainer.functions as F\n",
        "```\n",
        "\n",
        "と別名を与えて、`L.Convolution2D(...)`や`F.relu(...)`のように用いる慣習がありますが、特にこれが決まった書き方というわけではありません。\n",
        "\n",
        "#### Chain\n",
        "\n",
        "`Chain`は、**パラメータを持つ層（`Link`）をまとめておくためのクラス**です。パラメータを持つということは、基本的にネットワークの学習の際にそれらを更新していく必要があるということです（更新されないパラメータを持たせることもできます）。Chainerでは、モデルのパラメータの更新は、`Optimizer`という機能が担います。その際、更新すべき全てのパラメータを簡単に発見できるように、`Chain`で一箇所にまとめておきます。そうすると、`Chain.params()`メソッドを使って**更新されるパラメータ一覧が簡単に取得できます。**\n",
        "\n",
        "#### Chainを継承してネットワークを定義しよう\n",
        "\n",
        "Chainerでは、ネットワークは`Chain`クラスを継承したクラスとして定義されることが一般的です。その場合、そのクラスのコンストラクタで、`self.init_scope()`で作られる`with`コンテキストを作り、その中でネットワークに登場する`Link`をプロパティとして登録しておきます。こうすると、自動的に`Optimizer`が最適化対象のパラメータを持つ層だな、と捉えてくれます。\n",
        "\n",
        "もう一つ、一般的なのは、ネットワークの前進計算（データを渡して、出力を返す）を、`__call__`メソッドに書いておくという方法です。こうすると、ネットワーククラスをinstantiateして作ったオブジェクトを、関数のようにして使うことができます（例：`output = net(data)`）。\n",
        "\n",
        "#### GPUで実行するには\n",
        "\n",
        "`Chain`クラスは`to_gpu`メソッドを持ち、この引数にGPU IDを指定すると、指定したGPU IDのメモリ上にネットワークの全パラメータを転送します。こうしておくと、前進計算も学習の際のパラメータ更新なども全部GPU上で行われるようになります。GPU IDとして-1を使うと、すなわちこれはCPUを意味します。\n",
        "\n",
        "#### 同じ結果を保証したい\n",
        "\n",
        "ネットワークを書き始める前に、まずは乱数シードを固定して、本記事とほぼ同様の結果が再現できるようにしておきましょう。（cuDNNが有効になっている環境下でより厳密に計算結果の再現性を保証したい場合は、`chainer.config.cudnn_deterministic`というConfiguringオプションについて知る必要があります。こちらのドキュメントを参照してください：[chainer.config.cudnn_deterministic](https://docs.chainer.org/en/stable/reference/configuration.html?highlight=chainer.config.cudnn_deterministic)。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "5JecdGUXMq32",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import random\n",
        "import numpy\n",
        "import chainer\n",
        "\n",
        "def reset_seed(seed=0):\n",
        "    random.seed(seed)\n",
        "    numpy.random.seed(seed)\n",
        "    if chainer.cuda.available:\n",
        "        chainer.cuda.cupy.random.seed(seed)\n",
        "        \n",
        "reset_seed(0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "G_HvOMluMq37"
      },
      "cell_type": "markdown",
      "source": [
        "#### ネットワークを表すコード\n",
        "\n",
        "いよいよネットワークを書いてみます！"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "VQ-6GuZNMq3_",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import chainer\n",
        "import chainer.links as L\n",
        "import chainer.functions as F\n",
        "\n",
        "class MLP(chainer.Chain):\n",
        "\n",
        "    def __init__(self, n_mid_units=100, n_out=10):\n",
        "        super(MLP, self).__init__()\n",
        "        \n",
        "        # パラメータを持つ層の登録\n",
        "        with self.init_scope():\n",
        "            self.l1 = L.Linear(None, n_mid_units)\n",
        "            self.l2 = L.Linear(n_mid_units, n_mid_units)\n",
        "            self.l3 = L.Linear(n_mid_units, n_out)\n",
        "\n",
        "    def __call__(self, x):\n",
        "        # データを受け取った際のforward計算を書く\n",
        "        h1 = F.relu(self.l1(x))\n",
        "        h2 = F.relu(self.l2(h1))\n",
        "        return self.l3(h2)\n",
        "\n",
        "gpu_id = 0  # CPUを用いる場合は、この値を-1にしてください\n",
        "\n",
        "net = MLP()\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    net.to_gpu(gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "BnYIri8AMq4C"
      },
      "cell_type": "markdown",
      "source": [
        "できました！疑問点はありませんか？ちなみに、Chainerにはたくさんの学習可能なレイヤやパラメータを持たないレイヤが用意されています。ぜひ一度以下の一覧のページを見てみましょう。\n",
        "\n",
        "- [Chainerで使える関数(`Function`)一覧](https://docs.chainer.org/en/stable/reference/functions.html)\n",
        "- [Chainerで学習できるレイヤ(`Link`)一覧](https://docs.chainer.org/en/stable/reference/links.html)\n",
        "\n",
        "`Link`一覧には、ニューラルネットワークによく用いられる全結合層や畳み込み層、LSTMなどや、ReLUなどの活性化関数などなどだけでなく、有名なネットワーク全体も`Link`として載っています。ResNetや、VGGなどです。また、`Function`一覧には、画像の大きさをresizeしたり、サイン・コサインのような関数を始め、いろいろなネットワークの要素として使える関数が載っています。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qIN7jkqPMq4C"
      },
      "cell_type": "markdown",
      "source": [
        "##### NOTE\n",
        "\n",
        "上のネットワーク定義で、`L.Linear`は全結合層を意味しますが、最初のLinear層は第一引数に`None`が渡されています。これは、実行時に、つまり**データがその層に入力された瞬間、必要な数の入力側ユニット数を自動的に計算する**ということを意味します。ネットワークが最初に計算を行う際に、初めて `(n_input)` $\\times$ `n_mid_units` の大きさの行列を作成し、それを学習対象とするパラメータとして保持します。これは後々、畳み込み層を全結合層の前に配置する際などに便利な機能です。\n",
        "\n",
        "様々な`Link`は、それぞれ学習対象となるパラメータを保持しています。それらの値は、NumPyの配列として簡単に取り出して見ることができます。例えば、上のモデル`MLP`は`l1`という名前の全結合層が登録されています。この全結合層は重み行列`W`とバイアス`b`という2つのパラメータを持ちます。これらには外から以下のようにしてアクセスすることができます："
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "bn8mqvauMq4D",
        "outputId": "2ae5aa30-6b63-4736-8338-f2d13330a891",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "cell_type": "code",
      "source": [
        "print('1つ目の全結合相のバイアスパラメータの形は、', net.l1.b.shape)\n",
        "print('初期化直後のその値は、', net.l1.b.array)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1つ目の全結合相のバイアスパラメータの形は、 (100,)\n",
            "初期化直後のその値は、 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
            " 0. 0. 0. 0.]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "-ExaLiUFMq4H"
      },
      "cell_type": "markdown",
      "source": [
        "しかしここで、`net.l1.W.array`の中身を同様に表示してみようとすると、`None`が返されます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "U8fNWFseMq4I",
        "outputId": "c88e001b-95e7-4c72-af49-c19f8193e863",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "print(net.l1.W.array)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qdDHoa8kMq4L"
      },
      "cell_type": "markdown",
      "source": [
        "なぜでしょうか？我々は`l1`をネットワークに登録するときに、`L.Linear`の第一引数に`None`を渡しましたね。そして、**まだネットワークに一度もデータを入力していません**。そのため、**まだ重み行列`W`は作成されていません。**そのため、まだ`net.l1.W`は具体的な配列を保持していないのです。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "yF92dGMjMq4M"
      },
      "cell_type": "markdown",
      "source": [
        "### 最適化手法の選択\n",
        "\n",
        "では、上で定義したネットワークをMNISTデータセットを使って訓練してみましょう。学習時に用いる最適化の手法としてはいろいろな種類のものが提案されていますが、Chainerは多くの手法を同一のインターフェースで利用できるよう、`Optimizer`という機能でそれらを提供しています。`chainer.optimizers`モジュール以下に色々なものを見つけることができます。一覧はこちらにあります：\n",
        "\n",
        "- [Chainerで使える最適化手法一覧](https://docs.chainer.org/en/stable/reference/optimizers.html)\n",
        "\n",
        "ここでは最もシンプルな勾配降下法の手法である`optimizers.SGD`を用います。`Optimizer`のオブジェクトには、`setup`メソッドを使ってモデル（`Chain`オブジェクト）を渡します。こうすることで`Optimizer`に、何を最適化すればいいか把握させることができます。\n",
        "\n",
        "他にもいろいろな最適化手法が手軽に試せるので、色々と試してみて結果の変化を見てみてください。例えば、下の`chainer.optimizers.SGD`のうち`SGD`の部分を`MomentumSGD`, `RMSprop`,  `Adam`などに変えるだけで、最適化手法の違いがどのような学習曲線（ロスカーブ）の違いを生むかなどを簡単に調べることができます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "Bfr21c6dMq4N",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import optimizers\n",
        "\n",
        "optimizer = optimizers.SGD(lr=0.01).setup(net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "3sFOwliOMq4Q"
      },
      "cell_type": "markdown",
      "source": [
        "#### NOTE\n",
        "\n",
        "今回はSGDのコンストラクタの`lr`という引数に $0.01$ を与えました。この値は学習率として知られ、モデルをうまく訓練して良いパフォーマンスを発揮させるために調整する必要がある重要な**ハイパーパラメータ**として知られています。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "lqFm-as1Mq4R"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習する\n",
        "\n",
        "いよいよ学習をスタートします！今回は分類問題なので、`softmax_cross_entropy`というロス関数を使って最小化すべきロスの値を計算します。\n",
        "\n",
        "まず、ネットワークにデータを渡して、出てきた出力と、入力データに対応する正解ラベルを、`Function`の一種でありスカラ値を返す**ロス関数**に渡し、ロス（最小化したい値）の計算を行います。ロスは、`chainer.Variable`のオブジェクトになっています。そして、この`Variable`は、**今まで自分にどんな計算が施されたかを辿れるようになっています。**この仕組みが、Define-by-Run [[Tokui 2015]](http://learningsys.org/papers/LearningSys_2015_paper_33.pdf)とよばれる発明の中心的な役割を果たしています。\n",
        "\n",
        "ここでは誤差逆伝播法自体の説明は割愛しますが、**計算したロスに対する勾配をネットワークに逆向きに流していく**処理は、Chainerではネットワークが吐き出した`Variable`が持つ`backward()`メソッドを呼ぶだけでできます。これを呼ぶと、前述のようにこれまでの計算過程を逆向きに遡って**誤差逆伝播用の計算グラフを構築し**、途中のパラメータの勾配を連鎖率を使って計算してくれます。（詳しくは筆者が[日本ソフトウェア科学会で行ったチュートリアルの資料](https://www.slideshare.net/mitmul/chainer-79942361)をご覧ください。）\n",
        "\n",
        "こうして計算された各パラメータに対する勾配を使って、先程`Optimizer`を作成する際に指定したアルゴリズムを使ってネットワークパラメータの更新（＝学習）が行われるわけです。\n",
        "\n",
        "まとめると、今回1回の更新処理の中で行うのは、以下の4項目です。\n",
        "\n",
        "1. ネットワークにデータを渡して出力`y`を得る\n",
        "2. 出力`y`と正解ラベル`t`を使って、最小化すべきロスの値を`softmax_cross_entropy`関数で計算する\n",
        "3. `softmax_cross_entropy`関数の出力（`Variable`）の`backward()`メソッドを呼んで、ネットワークの全てのパラメータの勾配を誤差逆伝播法で計算する\n",
        "4. Optimizerの`update`メソッドを呼び、3.で計算した勾配を使って全パラメータを更新する\n",
        "\n",
        "パラメータの更新は、何度も何度も繰り返し行います。一度の更新に用いられるデータは、ネットワークに入力されたバッチサイズ分だけ束ねられたデータのみです。そのため、データセット全体のデータを使うために、次のミニバッチを入力して再度更新、その次のミニバッチを使ってまた更新、ということを繰り返すわけです。そのため、この過程を学習ループと呼んでいます。\n",
        "\n",
        "#### NOTE: ロス関数\n",
        "\n",
        "ちなみに、ロス関数は、例えば分類問題ではなく簡単な回帰問題を解きたいような場合、`F.softmax_cross_entropy`の代わりに`F.mean_squared_error`などを用いることもできます。他にも、いろいろな問題設定に対応するために様々なロス関数がChainerには用意されています。こちらからその一覧を見ることができます：\n",
        "\n",
        "- [Chainerで使えるロス関数一覧](http://docs.chainer.org/en/stable/reference/functions.html#loss-functions)\n",
        "\n",
        "#### 学習ループのコード"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "zBYXpUQpMq4S",
        "outputId": "b9bcddec-a3dd-4f29-988d-a7372db7a7bf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from chainer.dataset import concat_examples\n",
        "from chainer.cuda import to_cpu\n",
        "\n",
        "max_epoch = 10\n",
        "\n",
        "while train_iter.epoch < max_epoch:\n",
        "    \n",
        "    # ---------- 学習の1イテレーション ----------\n",
        "    train_batch = train_iter.next()\n",
        "    x, t = concat_examples(train_batch, gpu_id)\n",
        "    \n",
        "    # 予測値の計算\n",
        "    y = net(x)\n",
        "\n",
        "    # ロスの計算\n",
        "    loss = F.softmax_cross_entropy(y, t)\n",
        "\n",
        "    # 勾配の計算\n",
        "    net.cleargrads()\n",
        "    loss.backward()\n",
        "\n",
        "    # パラメータの更新\n",
        "    optimizer.update()\n",
        "    # --------------- ここまで ----------------\n",
        "\n",
        "    # 1エポック終了ごとにValidationデータに対する予測精度を測って、\n",
        "    # モデルの汎化性能が向上していることをチェックしよう\n",
        "    if train_iter.is_new_epoch:  # 1 epochが終わったら\n",
        "\n",
        "        # ロスの表示\n",
        "        print('epoch:{:02d} train_loss:{:.04f} '.format(\n",
        "            train_iter.epoch, float(to_cpu(loss.data))), end='')\n",
        "\n",
        "        valid_losses = []\n",
        "        valid_accuracies = []\n",
        "        while True:\n",
        "            valid_batch = valid_iter.next()\n",
        "            x_valid, t_valid = concat_examples(valid_batch, gpu_id)\n",
        "\n",
        "            # Validationデータをforward\n",
        "            with chainer.using_config('train', False), \\\n",
        "                    chainer.using_config('enable_backprop', False):\n",
        "                y_valid = net(x_valid)\n",
        "\n",
        "            # ロスを計算\n",
        "            loss_valid = F.softmax_cross_entropy(y_valid, t_valid)\n",
        "            valid_losses.append(to_cpu(loss_valid.array))\n",
        "\n",
        "            # 精度を計算\n",
        "            accuracy = F.accuracy(y_valid, t_valid)\n",
        "            accuracy.to_cpu()\n",
        "            valid_accuracies.append(accuracy.array)\n",
        "                        \n",
        "            if valid_iter.is_new_epoch:\n",
        "                valid_iter.reset()\n",
        "                break\n",
        "\n",
        "        print('val_loss:{:.04f} val_accuracy:{:.04f}'.format(\n",
        "            np.mean(valid_losses), np.mean(valid_accuracies)))\n",
        "        \n",
        "# テストデータでの評価\n",
        "test_accuracies = []\n",
        "while True:\n",
        "    test_batch = test_iter.next()\n",
        "    x_test, t_test = concat_examples(test_batch, gpu_id)\n",
        "\n",
        "    # テストデータをforward\n",
        "    with chainer.using_config('train', False), \\\n",
        "            chainer.using_config('enable_backprop', False):\n",
        "        y_test = net(x_test)\n",
        "\n",
        "    # 精度を計算\n",
        "    accuracy = F.accuracy(y_valid, t_valid)\n",
        "    accuracy.to_cpu()\n",
        "    test_accuracies.append(accuracy.array)\n",
        "\n",
        "    if test_iter.is_new_epoch:\n",
        "        test_iter.reset()\n",
        "        break\n",
        "\n",
        "print('test_accuracy:{:.04f}'.format(np.mean(test_accuracies)))"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch:01 train_loss:0.9257 val_loss:0.9715 val_accuracy:0.8020\n",
            "epoch:02 train_loss:0.5392 val_loss:0.5328 val_accuracy:0.8639\n",
            "epoch:03 train_loss:0.4004 val_loss:0.4228 val_accuracy:0.8848\n",
            "epoch:04 train_loss:0.3331 val_loss:0.3741 val_accuracy:0.8943\n",
            "epoch:05 train_loss:0.4589 val_loss:0.3455 val_accuracy:0.9001\n",
            "epoch:06 train_loss:0.2479 val_loss:0.3273 val_accuracy:0.9075\n",
            "epoch:07 train_loss:0.3313 val_loss:0.3108 val_accuracy:0.9115\n",
            "epoch:08 train_loss:0.3799 val_loss:0.2989 val_accuracy:0.9147\n",
            "epoch:09 train_loss:0.2978 val_loss:0.2884 val_accuracy:0.9183\n",
            "epoch:10 train_loss:0.3215 val_loss:0.2800 val_accuracy:0.9205\n",
            "test_accuracy:0.9375\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VPRotZdNMq4V"
      },
      "cell_type": "markdown",
      "source": [
        "`val_accuracy`に着目してみると、最終的におおよそ92%程度の精度で手書きの数字が分類できるようになりました。**学習終了後**に、ループの中でValidationデータセットを使ってモデルの汎化性能をおおまかにチェックしているのと同様にして、**テスト用のデータセットを用いて学習が終了したネットワークの評価を行っています。**テストデータでの評価結果は、およそ93.75%の正解率となりました。\n",
        "\n",
        "#### ValidationやTestを行う際の注意点\n",
        "\n",
        "ここで、ValidationにせよTestにせよ、「評価」を行う際には注意すべき点があります。学習は行わない、評価のためだけのデータをネットワークに渡して出力を計算している部分（例えば、`y_test = net(x_test)`）では、それらの行を2つのコンテキストでくくっています。\n",
        "\n",
        "##### `chainer.using_config('train', False)`\n",
        "\n",
        "まず、今回は学習時と推論時で動作が異なる関数は含まれていないため、実際の効力は持ちませんが、Validationやテストのために推論を行うときは`chainer.config.train = False`とします。以下のように、`chainer.using_config('train', False)`をwith構文と共に使えば、その中では`chainer.config.train = False`となります。\n",
        "\n",
        "```python\n",
        "with chainer.using_config('train', False):\n",
        "    --- 何か推論処理 ---\n",
        "```\n",
        "\n",
        "これは、以下のようにするのと同じことです。\n",
        "\n",
        "```python\n",
        "chainer.config.train = False\n",
        "\n",
        "--- 何か推論処理 ---\n",
        "```\n",
        "\n",
        "ただし、Pythonのコンテキストを利用しない場合は、一度このようにどこかで書くと、それ以降この設定はグローバルにずっと有効になることに注意してください。（推論したあと再び学習を行うという場合は、再度`chainer.config.train = True`などのようにすることが必要になります。`chainer.config`以下の規定の値に何かを代入することはグローバルに作用しますので、次に説明する`enable_backprop`についても同様です。）\n",
        "\n",
        "##### `chainer.using_config('enable_backprop', False)`\n",
        "\n",
        "次に、今回は評価に用いる出力の計算後にロス関数の各パラメータについての勾配は必要ないので、内部に計算グラフを保持しておく必要もないため、`chainer.using_config('enable_backprop', False)`として**無駄な計算グラフの構築を行わないようにし、メモリ消費量を節約しています。**\n",
        "\n",
        "##### NOTE: ChainerのConfig\n",
        "\n",
        "Chainerにはこの他にも、いくつかのグローバルなConfigがプリセットとして用意されています。また、`chainer.config`以下にユーザが自由な設定値を置くこともできます。詳しくはこちらを一読してください：[Configuring Chainer](https://docs.chainer.org/en/stable/reference/configuration.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kBF9Qld0Mq4V"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みモデルを保存する\n",
        "\n",
        "学習が終わったら、その結果を保存します。Chainerには、2種類のフォーマットで学習済みネットワークをシリアライズする機能が用意されています。一つはHDF5形式で、もう一つはNumPyのNPZ形式でネットワークを保存するものです。今回は、追加ライブラリのインストールが必要なHDF5ではなく、NumPy標準機能で提供されているシリアライズ機能（`numpy.savez()`）を利用したNPZ形式でのモデルの保存を行います。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "sE7aEqoaMq4W",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import serializers\n",
        "\n",
        "serializers.save_npz('my_mnist.model', net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "o6lpheDtMq4X",
        "outputId": "82a553f6-4cd8-442f-ec56-ac91758ae66e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# ちゃんと保存されていることを確認\n",
        "%ls -la my_mnist.model"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "-rw-r--r-- 1 root root 333929 Nov  6 16:50 my_mnist.model\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "2g89uLBEMq4a"
      },
      "cell_type": "markdown",
      "source": [
        "### 保存したモデルを読み込んで推論する\n",
        "\n",
        "学習したネットワークを、それを使って数字の分類がしたい誰かに渡して、使ってもらうにはどうしたら良いでしょうか。もっともシンプルな方法は、ネットワークの定義がかかれたPythonファイルと、今しがた保存したNPZファイルを渡して、以下のように使うことです。以下のコードの前に、渡したネットワーク定義のファイルからネットワークのクラス（ここでは`MLP`）が読み込まれていることを前提とします。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "XoRl-oIEMq4a",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# まず同じネットワークのオブジェクトを作る\n",
        "infer_net = MLP()\n",
        "\n",
        "# そのオブジェクトに保存済みパラメータをロードする\n",
        "serializers.load_npz('my_mnist.model', infer_net)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "4klyoIO7Mq4d"
      },
      "cell_type": "markdown",
      "source": [
        "以上で準備が整いました。それでは、試しにテストデータの中から一つ目の画像を取ってきて、それに対する分類を行ってみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "le0Fo53xMq4f",
        "outputId": "3beb17aa-a204-4911-8824-727d610d7a11",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        }
      },
      "cell_type": "code",
      "source": [
        "gpu_id = 0  # CPUで計算をしたい場合は、-1を指定してください\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    infer_net.to_gpu(gpu_id)\n",
        "\n",
        "# 1つ目のテストデータを取り出します\n",
        "x, t = test[0]  #  tは使わない\n",
        "\n",
        "# どんな画像か表示してみます\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "# ミニバッチの形にする（複数の画像をまとめて推論に使いたい場合は、サイズnのミニバッチにしてまとめればよい）\n",
        "print('元の形：', x.shape, end=' -> ')\n",
        "\n",
        "x = x[None, ...]\n",
        "\n",
        "print('ミニバッチの形にしたあと：', x.shape)\n",
        "\n",
        "# ネットワークと同じデバイス上にデータを送る\n",
        "x = infer_net.xp.asarray(x)\n",
        "\n",
        "# モデルのforward関数に渡す\n",
        "with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "    y = infer_net(x)\n",
        "\n",
        "# Variable形式で出てくるので中身を取り出す\n",
        "y = y.array\n",
        "\n",
        "# 結果をCPUに送る\n",
        "y = to_cpu(y)\n",
        "\n",
        "# 予測確率の最大値のインデックスを見る\n",
        "pred_label = y.argmax(axis=1)\n",
        "\n",
        "print('ネットワークの予測:', pred_label[0])"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nupSB/wclp6FycBcGXAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f32b23ef780>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "元の形： (784,) -> ミニバッチの形にしたあと： (1, 784)\n",
            "ネットワークの予測: 7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "tkKEfMPbMq4i"
      },
      "cell_type": "markdown",
      "source": [
        "ネットワークの予測は7でした。画像を見る限り、当たっていそうですね！"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "55aQjRHeMq4i"
      },
      "cell_type": "markdown",
      "source": [
        "## Trainerを使ってみよう\n",
        "\n",
        "Chainerは、これまで書いてきたような学習ループを隠蔽する`Trainer`という機能を提供しています。これを使うと、学習ループを陽に書く必要がなくなり、またいろいろな便利なExtentionを使うことで、学習過程でのロスカーブの可視化や、ログの保存などが楽になります。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "zqGffNzPMq4j"
      },
      "cell_type": "markdown",
      "source": [
        "### データセット・Iterator・ネットワークの準備\n",
        "\n",
        "これらはループを自分で書く場合と同じなので、まとめてしまいます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "LWIQJgmeMq4k",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "train_val, test = mnist.get_mnist()\n",
        "train, valid = split_dataset_random(train_val, 50000, seed=0)\n",
        "\n",
        "batchsize = 128\n",
        "\n",
        "train_iter = iterators.SerialIterator(train, batchsize)\n",
        "valid_iter = iterators.SerialIterator(valid, batchsize, False, False)\n",
        "test_iter = iterators.SerialIterator(test, batchsize, False, False)\n",
        "\n",
        "gpu_id = 0  # CPUを用いたい場合は、-1を指定してください\n",
        "\n",
        "net = MLP()\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    net.to_gpu(gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "qpv-bUQfMq4n"
      },
      "cell_type": "markdown",
      "source": [
        "### Updaterの準備\n",
        "\n",
        "ここからが学習ループを自分で書く場合と異なる部分です。ループを自分で書く場合には、データセットからバッチサイズ分のデータをとってきてミニバッチに束ねて、それをネットワークに入力して予測を作り、それを正解と比較し、ロスを計算してバックワード（誤差逆伝播）をして、`Optimizer`によってパラメータを更新する、というところまでを、以下のように書いていました。\n",
        "\n",
        "```python\n",
        "# ---------- 学習の1イテレーション ----------\n",
        "train_batch = train_iter.next()\n",
        "x, t = concat_examples(train_batch, gpu_id)\n",
        "\n",
        "# 予測値の計算\n",
        "y = net(x)\n",
        "\n",
        "# ロスの計算\n",
        "loss = F.softmax_cross_entropy(y, t)\n",
        "\n",
        "# 勾配の計算\n",
        "net.cleargrads()\n",
        "loss.backward()\n",
        "\n",
        "# パラメータの更新\n",
        "optimizer.update()\n",
        "```\n",
        "\n",
        "これらの処理を、まるっと`Updater`はまとめてくれます。これを行うために、**`Updater`には`Iterator`と`Optimizer`を渡してやります。** `Iterator`はデータセットオブジェクトを持っていて、そこからミニバッチを作り、`Optimizer`は最適化対象のネットワークを持っていて、それを使って前進計算とロスの計算・パラメータのアップデートをすることができます。そのため、この2つを渡しておけば、上記の処理を`Updater`内で全部行ってもらえるというわけです。では、`Updater`オブジェクトを作成してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "NIz8Fj2IMq4o",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import training\n",
        "\n",
        "gpu_id = 0  # CPUを使いたい場合は-1を指定してください\n",
        "\n",
        "# ネットワークをClassifierで包んで、ロスの計算などをモデルに含める\n",
        "net = L.Classifier(net)\n",
        "\n",
        "# 最適化手法の選択\n",
        "optimizer = optimizers.SGD(lr=0.01).setup(net)\n",
        "\n",
        "# UpdaterにIteratorとOptimizerを渡す\n",
        "updater = training.StandardUpdater(train_iter, optimizer, device=gpu_id)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "BywdNhUSMq4s"
      },
      "cell_type": "markdown",
      "source": [
        "##### NOTE\n",
        "\n",
        "ここでは、ネットワークを`L.Classifier`で包んでいます。`L.Classifier`は一種の`Chain`になっていて、渡されたネットワーク自体を`predictor`というattributeに持ち、**ロス計算を行う機能を追加してくれます。**こうすると、`net()`はデータ`x`だけでなくラベル`t`も取るようになり、まず渡されたデータを`predictor`に通して予測を作り、それを`t`と比較して**ロスの`Variable`を返すようになります。**ロス関数として何を用いるかはデフォルトでは`F.softmax_cross_entropy`となっていますが、`L.Classifier`の引数`lossfunc`にロス計算を行う関数を渡してやれば変更することができるため、Classifierという名前ながら回帰問題などのロス計算機能の追加にも使うことができます。（`L.Classifier(net, lossfun=L.mean_squared_error, compute_accuracy=False)`のようにする）\n",
        "\n",
        "`StandardUpdater`は前述のような`Updater`の担当する処理を遂行するための最もシンプルなクラスです。この他にも複数のGPUを用いるための`ParallelUpdater`などが用意されています。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VxnV33vIMq4s"
      },
      "cell_type": "markdown",
      "source": [
        "### Trainerの準備\n",
        "\n",
        "実際に学習ループ部分を隠蔽しているのは`Updater`なので、これがあればもう学習を始められそうですが、`Trainer`はさらに`Updater`を受け取って学習全体の管理を行う機能を提供しています。例えば、**データセットを何周したら学習を終了するか(stop_trigger)** や、**途中のロスの値をどのファイルに保存したいか**、**ロスカーブを可視化した画像ファイルを保存するかどうか**など、学習全体の設定として必須・もしくはあると便利な色々な機能を提供しています。\n",
        "\n",
        "必須なものとしては学習終了のタイミングを指定する`stop_trigger`がありますが、これは`Trainer`オブジェクトを作成するときのコンストラクタで指定します。指定の方法は単純で、`(長さ, 単位)`という形のタプルを与えればよいだけです。「長さ」には数字を、「単位」には`'iteration'`もしくは`'epoch'`のいずれかの文字列を指定します。こうすると、たとえば100 epoch（データセット100周）で学習を終了してください、とか、1000 iteration（1000回更新）で学習を終了してください、といったことが指定できます。`Trainer`を作るときに、`stop_trigger`を指定しないと、学習は自動的には止まりません。\n",
        "\n",
        "では、実際に`Trainer`オブジェクトを作ってみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-K_GXDUVMq4t",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "max_epoch = 10\n",
        "\n",
        "# TrainerにUpdaterを渡す\n",
        "trainer = training.Trainer(\n",
        "    updater, (max_epoch, 'epoch'), out='mnist_result')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "LtZDUXIUMq4v"
      },
      "cell_type": "markdown",
      "source": [
        "`out`引数では、この次に説明する`Extension`を使って、ログファイルやロスの変化の過程を描画したグラフの画像ファイルなどを保存するディレクトリを指定しています。\n",
        "\n",
        "Trainerと、その内側にあるいろいろなオブジェクトの関係は、図にまとめると以下のようになっています。このイメージを持っておくと自分で部分的に改造したりする際に便利だと思います。\n",
        "\n",
        "![image](https://qiita-image-store.s3.amazonaws.com/0/17934/a751df31-b999-f692-d839-488c26b1c48a.png)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WgLOnmhuMq4v"
      },
      "cell_type": "markdown",
      "source": [
        "### TrainerにExtensionを追加する\n",
        "\n",
        "`Trainer`を使う利点として、\n",
        "\n",
        "- ログを自動的にファイルに保存（`LogReport`)\n",
        "- ターミナルに定期的にロスなどの情報を表示（`PrintReport`）\n",
        "- ロスを定期的にグラフで可視化して画像として保存（`PlotReport`)\n",
        "- 定期的にモデルやOptimizerの状態を自動シリアライズ（`snapshot`）\n",
        "- 学習の進捗を示すプログレスバーを表示（`ProgressBar`）\n",
        "- ネットワークの構造をGraphvizのdot形式で保存（`dump_graph`）\n",
        "- ネットワークのパラメータの平均や分散などの統計情報を出力（`ParameterStatistics`）\n",
        "\n",
        "などなどの様々な便利な機能を簡単に利用することができる点があります。これらの機能を利用するには、`Trainer`オブジェクトに対して`extend`メソッドを使って追加したい`Extension`のオブジェクトを渡してやるだけです。では実際に幾つかの`Extension`を追加してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "oAtZtGfWMq4w",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.training import extensions\n",
        "\n",
        "trainer.extend(extensions.LogReport())\n",
        "trainer.extend(extensions.snapshot(filename='snapshot_epoch-{.updater.epoch}'))\n",
        "trainer.extend(extensions.Evaluator(valid_iter, net, device=gpu_id), name='val')\n",
        "trainer.extend(extensions.PrintReport(['epoch', 'main/loss', 'main/accuracy', 'val/main/loss', 'val/main/accuracy', 'l1/W/data/std', 'elapsed_time']))\n",
        "trainer.extend(extensions.ParameterStatistics(net.predictor.l1, {'std': np.std}))\n",
        "trainer.extend(extensions.PlotReport(['l1/W/data/std'], x_key='epoch', file_name='std.png'))\n",
        "trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], x_key='epoch', file_name='loss.png'))\n",
        "trainer.extend(extensions.PlotReport(['main/accuracy', 'val/main/accuracy'], x_key='epoch', file_name='accuracy.png'))\n",
        "trainer.extend(extensions.dump_graph('main/loss'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "D2tRnyVYMq4y"
      },
      "cell_type": "markdown",
      "source": [
        "#### `LogReport`\n",
        "\n",
        "`epoch`や`iteration`ごとの`loss`, `accuracy`などを自動的に集計し、`Trainer`の`out`引数で指定した出力ディレクトリに`log`というファイル名で保存します。\n",
        "\n",
        "#### `snapshot`\n",
        "\n",
        "`Trainer`の`out`引数で指定した出力ディレクトリに`Trainer`オブジェクトを指定されたタイミング（デフォルトでは1エポックごと）に保存します。`Trainer`オブジェクトは上述のように`Updater`を持っており、この中に`Optimizer`とモデルが保持されているため、この`Extension`でスナップショットをとっておけば、学習の復帰や学習済みモデルを使った推論などが学習終了後にも可能になります。\n",
        "\n",
        "#### `dump_graph`\n",
        "\n",
        "指定された`Variable`オブジェクトから辿れる計算グラフをGraphvizのdot形式で保存します。保存先は`Trainer`の`out`引数で指定した出力ディレクトリです。\n",
        "\n",
        "#### `Evaluator`\n",
        "\n",
        "評価用のデータセットの`Iterator`と、学習に使うモデルのオブジェクトを渡しておくことで、学習中のモデルを指定されたタイミングで評価用データセットを用いて評価します。内部では、`chainer.config.using_config('train', False)`が自動的に行われます。`backprop_enable`を`False`にすることは行われないため、メモリ使用効率はデフォルトでは最適ではありませんが、基本的には`Evaluator`を使えば評価を行うという点において問題はありません。\n",
        "\n",
        "#### `PrintReport`\n",
        "\n",
        "`Reporter`によって集計された値を標準出力に出力します。このときどの値を出力するかを、リストの形で与えます。\n",
        "\n",
        "#### `PlotReport`\n",
        "\n",
        "引数のリストで指定された値の変遷を`matplotlib`ライブラリを使ってグラフに描画し、出力ディレクトリに`file_name`引数で指定されたファイル名で画像として保存します。\n",
        "\n",
        "#### `ParameterStatistics`\n",
        "\n",
        "指定したレイヤ（Link）が持つパラメータの平均・分散・最小値・最大値などなどの統計情報を計算して、ログに保存します。パラメータが発散していないかなどをチェックするのに便利です。\n",
        "\n",
        "---\n",
        "\n",
        "これらの`Extension`は、ここで紹介した以外にも、例えば`trigger`によって個別に作動するタイミングを指定できるなどのいくつかのオプションを持っており、より柔軟に組み合わせることができます。詳しくは公式のドキュメントを見てください\n",
        "\n",
        "- [ChainerのTrainer extension一覧](http://docs.chainer.org/en/stable/reference/extensions.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "UENQI-q5Mq4z"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習を開始する\n",
        "\n",
        "学習を開始するには、`Trainer`オブジェクトのメソッド`run`を呼ぶだけです！"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "h92kAz7-Mq4z",
        "outputId": "1ef1cbf7-55a2-4457-96f2-301810a2514f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "cell_type": "code",
      "source": [
        "trainer.run()"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  l1/W/data/std  elapsed_time\n",
            "\u001b[J1           1.66917     0.599884       0.93892        0.806764           0.0359232      9.15971       \n",
            "\u001b[J2           0.673347    0.843211       0.519291       0.86699            0.0366054      17.0865       \n",
            "\u001b[J3           0.459921    0.878686       0.414858       0.887658           0.037035       25.0743       \n",
            "\u001b[J4           0.389535    0.893262       0.370489       0.896855           0.037301       33.087        \n",
            "\u001b[J5           0.353169    0.901255       0.342332       0.904569           0.03749        41.1204       \n",
            "\u001b[J6           0.330151    0.90609        0.32213        0.909711           0.037639       49.1886       \n",
            "\u001b[J7           0.312338    0.910846       0.306804       0.91337            0.0377671      57.2291       \n",
            "\u001b[J8           0.298136    0.914663       0.295119       0.915843           0.0378811      65.2665       \n",
            "\u001b[J9           0.285837    0.917559       0.284161       0.918513           0.0379865      73.3064       \n",
            "\u001b[J10          0.275229    0.921116       0.27476        0.921776           0.0380852      81.3995       \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "4N-T8yJIMq42"
      },
      "cell_type": "markdown",
      "source": [
        "初めに取り組んだ学習ループを自分で書いた場合よりもより短いコードで、リッチなログ情報とともに、下記で表示してみるようなグラフなども作りつつ、同様の結果を得ることができました。1層目の全結合層の重み行列の値の標準偏差が、学習の進行とともに徐々に大きくなっていっているのも見て取れて、面白いですね。\n",
        "\n",
        "では、保存されているロスのグラフを確認してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "vGulNmkgMq43",
        "outputId": "9a300ee0-e6f6-4b24-d129-a06d75924d36",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "from IPython.display import Image\n",
        "Image(filename='mnist_result/loss.png')"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nohvv8kgAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WDR3LRzkMq46"
      },
      "cell_type": "markdown",
      "source": [
        "精度のグラフも見てみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "eJmS70CGMq46",
        "outputId": "06fa29e5-5023-43f1-a316-63a7413f7d38",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='mnist_result/accuracy.png')"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "sAG2GYmwMq48"
      },
      "cell_type": "markdown",
      "source": [
        "もう少し学習を続ければ、まだ多少精度の向上が図れそうな雰囲気がありますね。\n",
        "\n",
        "ついでに、`dump_graph`という`Extension`が出力した計算グラフを、`Graphviz`を使って画像化して見てみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "6cznAWVbMq49",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!dot -Tpng mnist_result/cg.dot -o mnist_result/cg.png"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "Eo0dsPW-Mq4_",
        "outputId": "09c9b4d3-432e-47f5-8673-1012e4393846",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1256
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='mnist_result/cg.png')"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nLBaLZ9vo0aMlSV9//XW7625LfU6nU5999plSUlK8znvttdfK5XLpk08+add+bo888oiKioq0YcOG\ndtctffN3YbV235qZf/rTn1RVVeW1bd26dV6vtyTPnJ3nD0lu6+sLAOh6hIcAAAAAut3GjRvlcrmU\nmpraacc8fvy4/P39NXbsWM+2sWPHqrKy0ms/93yHV111Vaed+3xHjhxRbW2trrzySq/tYWFhkqSS\nkpJ27ecWEhKilJQUbdiwQS6Xq831bN++XbNnz1ZFRYXeffddhYeHX7Jr0uVyaf369frOd76jiIgI\nxcfH67777vPqhJSkjIwMpaamym63KzIyUjfccIO++OILSdIvf/lL/frXv9ZXX32l8PBwzZ49+6Ln\nKysrU3BwsMaMGXPJ38Po9QUAdD3CQwAAAADdbuvWrRo/frwGDhzYKcerr6/Xjh07tHTpUq8VbVet\nWqUTJ05o48aNqq2tVWlpqTZs2KBrrrlGkydP7pRzX8gdTrqHYrv5+fnJ39/fE2a2db/zxcbG6vjx\n4youLm5zPbNmzdK2bds0fPhwLVq0SGVlZSoqKrro/i+++KKeffZZrVq1Sjk5OXrnnXd07Ngx3Xbb\nbV41VVZWasGCBUpPT1dGRoYCAgL08MMPS5KefPJJpaamKiwsTGVlZdq2bZvXOZxOp44fP67XXntN\naWlpeuqppy65EvHFXl8AQNcjPAQAAADQrerq6nTkyBFPh11neOmllzRy5Eg99thjXttTUlL0wAMP\n6Be/+IViY2N1/fXXq7a2ttXqzp3p3LlzktRq2K0kWa1WNTQ0tGu/840bN05S667EztLQ0KD169fr\nxhtv1K233qpBgwYpKipKTz/9tE6ePKlNmzZ59p03b54eeeQRhYSEaPDgwZo7d65OnTqlkydPfut5\npk6dqqlTp+rFF1/UE088oZtvvvmS+1/s9QUAdD3CQwAAAADdqqqqSi6XS/7+/p1yvI8//lgffvih\n3njjjVZdfM8995w2bdqkTZs2qaioSNu3b5fD4dDChQu7bOEN95x+RgubNDU1eX7vtu53PnenplFX\nYmcoLS1VbW2t4uPjvbYnJCTIZrNdcpEZ93yKzc3N33qeXbt2KScnR6tXr9a7776refPmtZof0e1S\nry8AoOsRHgIAAADoVu6OuwsXzuiIDz74QGvWrNHbb7/das68iooKrV27VsuWLdP06dMVEBCgsWPH\n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\n59q6dauefPJJ3XnnnfrLX/7S4eN1RGZmppYuXaqdO3cqKytLP/7xj7VmzRo98MADXvvt2LFDd911\nl9LT05Wbm6vHH39cr776qh588MFurRfd4/3339e0adO65Ng94R7DNcw13Jd19Bpr63vk73//ux5+\n+GHNmzdPu3bt0vr165WRkaG77rpLTqezQzVzD+g47gEA0PsQHgLoVLfccotcLpc+/fTTVo/t3LlT\nO3fu1L59+1o99tlnn2nBggXtPt+aNWv0/vvv66WXXlJgYKAkqbi4WM8++6yWL1+umJiYiz539erV\nGjFihH70ox8pICBAiYmJuv/++/XnP/9ZBw4caPd+bWVWfffcc49iYmJ09913d/jD0ieffKL4+HgF\nBwdr2bJlmjdvXoeO01YNDQ2tOjpsNptWrlypoUOHKjAwUPPnz9cNN9yg7du3q6KiwrNfYGCgli1b\npsGDByswMFALFizQjTfeqG3btunYsWNdWjfMY7FYOvV4PekewzXMNdwXXc411tb3yJtvvqnQ0FB9\n//vf16BBgxQTE6N7771XRUVFys3NbXfN3APajnsAAPQNhIcAOtWNN94om82m//3f/2312Pbt2xUa\nGqrNmzd7bW9oaFBxcbFmz57drnOVlZXp+eef16OPPio/Pz/P9ujoaK1du1bf/e535evra/hcp9Op\nzz77TCkpKV5hw7XXXiuXy6VPPvmkXfu1h5n1PfLIIyoqKurwHHnHjh2T1dp90+X+6U9/UlVVlde2\ndevWeb3ekhQaGipJXkOZNmzY0GrxoSFDhkjSRbtE0PvZbLZOO1ZPvMdwDXMN9yWXc41JbX+PHDt2\nTCNHjvS6xkaPHi1J+vrrr9tdN/eAtuMeAAB9A+EhgE41aNAgzZ49W2lpaWpoaPBsd39DPm/ePH30\n0Udez0lPT9c111zj+dC/bds2xcbG6ve///0lz7Vx40a5XC6lpqa2u84jR46otrZWV155pdf2sLAw\nSVJJSUm79utsXVVfSEiIUlJStGHDBrlcrjbXs337ds2ePVsVFRV69913FR4efsluC5fLpfXr1+s7\n3/mOIiIiFB8fr/vuu69Vp2ZGRoZSU1Nlt9sVGRmpG264QV988YUk6Ze//KV+/etf66uvvlJ4ePgl\nw+WysjIFBwdrzJgxl/w9jh8/Ln9/f40dO7bNvzt6l7KyMs2ZM0fR0dGaOHGibrvtNmVmZnrt05vv\n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\nwcHBevTRRzVw4ED5+fnp/fffv6Vz19TixYt1zz33qG/fvurXr5/uuecevfbaa7p48aLdcbV5fgEA\nAFB7lIcAAKBJeP3117VixQo999xzttu+++47jRs3Tr/73e906dIlh1+3Y8cOPfbYY9q+fbtSU1P1\ny1/+UsuXL9czzzxjd9w//vEPzZo1S/fff7927typZcuWadeuXXrsscdUUVFxU5lrki8nJ0dTpkzR\n0KFDtWfPHi1dulRr167Vyy+/XOvj4uLi5ObmpkmTJqmoqOimMkvS3/72N23ZskWbNm3Sr3/9az36\n6KP66KOPbvp8N2P37t2aOHGivv32WyUnJ+sXv/iFFi9erKefftruuJo+vwAAALg5lIcAAKDRW7x4\nsT799FO9/fbb8vDwkCQdOHBACxYs0OTJkxUSEnLdr/Xw8NCkSZPUoUMHeXh4aPTo0brvvvv09ddf\n68SJE7bj3n//fXXv3l1PPvmk2rZtq5CQEM2YMUOZmZlKTU2tdeaa5lu0aJG6du2qn//853J3d9fA\ngQP11FNPaf369Tp06FCtj5s+fbpCQkI0derUmy49v/zyS0VERKhdu3aaNGmS7r///ps6T02VlZVV\nG5np4uKihIQEderUSR4eHnrggQc0atQobd26VadOnbIdV9PnFwAAADeH8hAAADRqeXl5eu211/TC\nCy/Y7QLdr18/LVmyRA899JBcXV2v+/XvvPOOnJyc7G7r2LGjJNmNBjxx4oS6desmk8lku61Hjx6S\npOPHj9c6d03yVVRUaPPmzRo8eLDd4951112yWq368ssva3VclZ/97GfKzMzUO++8U+vc0pWfhbNz\nwy2N/cEHH+js2bN2ty1durTart/du3eXJLspyTV9fgEAAHBzKA8BAECjtmLFClmtVsXGxtbZOU+e\nPKnWrVvLx8fHdpuPj4/OnDljd1zVeoe9e/eus8e+2vfff6+SkhJ5e3vb3e7r6ytJysrKqtVxVdq3\nb6/BgwfrnXfekdVqrXGerVu3asSIETp16pQ+/PBD+fn53XDUpNVq1bJlyzRy5EgFBgYqIiJCTzzx\nhN1ISEnatWuXYmNjFRYWpqCgII0aNUrffPONJOm3v/2tfv/73+vIkSPy8/PTiBEjrvt4eXl5ateu\nnXr16nXD78PR8wsAAICbQ3kIAAAatU2bNsnf319t2rSpk/NdunRJO3bs0MSJE+Xi4mK7/bnnntPp\n06e1YsUKlZSUKCcnR++8847uvPNODRgwoE4e+1pV5WTVVOwqbm5uat26ta3MrOlxVwsNDdXJkyd1\n4MCBGucZPny4vv76a3Xp0kWPPPKI8vLylJmZed3j33jjDS1YsEDPPfec9uzZo7Vr1+rEiRMaO3as\nXaYzZ85o9OjR2r59u3bt2iV3d3fNmjVL0pVdhWNjY+Xr66u8vDx9/fXXdo9RUVGhkydP6t1339W2\nbdv0m9/8xu55u9b1nl8AAADcHMpDAADQaJWWlur777+3jbCrC2+//ba6deumF1980e72wYMH6+mn\nn9a8efMUGhqqe++9VyUlJdV2d65Lly9flqRq024lydnZWWVlZbU67mp9+vSRVH1UYl0pKyvTsmXL\ndN999+nhhx9W27ZtFRwcrFdffVXnzp3TqlWrbMfef//9+tnPfqb27durQ4cOiouLU2Fhoc6dO/eD\nj3P77bfr9ttv1xtvvKGXXnpJ8fHxNzz+es8vAAAAbg7lIQAAaLTOnj0rq9Wq1q1b18n5vvjiC/3z\nn//UypUrq43i+/Of/6xVq1Zp1apVyszM1NatWxUVFaWf/OQn9bbxRtWafo42NjGbzbbvu6bHXa1q\npKajUYl1IScnRyUlJYqIiLC7vX///nJxcbnhJjNV6ylWVlb+4OPs3LlTe/bs0aJFi/Thhx/q/vvv\nr7Y+YpUbPb8AAAC4OZSHAACg0aoacXftxhk347PPPtPixYu1Zs2aamvmnTp1SkuWLNGkSZM0ZMgQ\nubu7y8fHR/Pnz1dBQYGWLl16y4/vSNeuXSVJFy9etLv90qVLunz5srp161ar465W9TOr+hnWtaKi\nIknVp1JLUrt27eyybtq0SePHj9fAgQMVGBioP/7xjzV+HGdnZ3Xq1EnDhw/Xm2++qZycHL399tvV\njrvR8wsAAICbR3kIAAAaraoRdTUZoXYjK1as0IYNG7Rq1Srbjr1Xy8vLU2VlZbX7PD091aFDB+Xk\n5NzS41+Pj4+PPDw8qu3mfOTIEUlScHBwrY67mtlslqQ6G7V5rXbt2kmqXmhKV4rFqp2q8/PzNXPm\nTHXt2lUff/yxMjIyNHfu3Jt6TD8/Pzk5OVV7Pn7o+QUAAMDNozwEAACNVufOnWUymVRcXHxTX2+1\nWjV//nxlZ2crMTHxulNZvby8JF0ZgXi1kpISnT9/3laE1TVnZ2fdfffd+u9//yuLxWK7ffPmzTKZ\nTIqLi6vVcVer+pl16dKlXrL37dtXHh4eSktLs7s9NTVVZrNZ4eHhkq6suVhRUaGEhAT17t1bbm5u\nMplMNzx3YWGhnn/++Wq3V5W8Vc9HTZ9fAAAA3DzKQwAA0Gi1adNGvXv3vuk1B3Nzc7VkyRKtXr1a\nAQEB8vPzs/uXmJgo6crIvjvuuEOrV6/Wrl27VFZWphMnTuill16SJI0fP952zueee05RUVHKyMi4\n9W9Q0vPPP68zZ87o9ddfV2lpqfbs2aPExESNGTNG/v7+tT6uStXPrGpUYl3ndnNz0xNPPKEvvvhC\nGzZs0MWLF5WVlaWXX35Z3bp106RJkyRJPXv2lCRt27ZNly9f1nfffVdtPcQOHTqooKBAx44dU0lJ\niVxdXbV161bt2LFDFy9eVEVFhfbv368XXnhB7u7umjFjhqSaP78AAAC4eZSHAACgUbvnnnuUk5NT\nbUfhvXv3asyYMRo0aJBSU1N14MABxcTE6JFHHtGuXbskXRmZVhMmk0l//etfFR8fr9mzZysiIkKx\nsbHKz8/XkiVLNGjQINuxZrNZZ8+e1caNG294zprkk6SgoCCtXLlS33zzjSIjI/XUU09p3LhxevXV\nV+3OV9PjqqSlpcnLy8tWHtYk9/Hjx/XAAw/ozJkz+uSTTzR69Gh9/vnnWrZsmcaMGSNJevXVV/XU\nU09JkmbNmqXZs2dr0aJFioyM1Pjx49WrVy998MEHcnd3l3SlvHz66aeVlJSkmJgY/eUvf9Htt98u\nSRozZoxOnDihyZMnq3PnzoqNjdXUqVN16dIlRUdHa86cORo8eLBCQkL0zDPPqFevXtqwYYP69u0r\nqebPLwAAAG6eycpfXQAANHvr/x97dx4eZX3v//+VZJJANkCWoGxJICHJZCOTBUwCVBMXFKsVVFBp\npWqrx1a/Vqs9vb7Wnh6vA8f2qnpqXUr9orbubU9rq1YQBRKBLGQlK4SIEvY1K1lmfn/wm7sZGDCE\nJHcyeT6uK394z2TuNzCfub1f8/58Pu+9p6VLl6q+vl7e3sPru8OGhgZlZ2fr6aef1k033WR2ObLb\n7brtttu0ZMkS3XLLLWaX49axY8c0d+5cPfLII7rnnnskDY+68S9PPPGEGhoatHHjRrNLAQAAI9zw\nunsAAAAjTlhYmB5++GE999xzamlpMbWW7u5uffzxx2pubtbixYtNreV8nnnmGcXGxuquu+6SNHzq\nBgAAwNBDeAgAAIa8+++/X4sWLdIPfvCDPm+e0h+2bt2qDz/8UK+++qpGjx5tWh3ns2bNGlVWVmrt\n2rWyWCyShkfdAAAAGJosZhcAAADQG48++qg2b96s3/72t3rsscdMqSEjI0MZGRmmnLs31q1bp46O\nDr311lvy8fExjg/1ugEAADB0ER4CADCC1NbWKjIy0iVYGk6ysrKUlZVldhlDVk5OjnJycswuAxfp\nyJEjOnjwoNllAAAASCI8BABgRAgODtaoUaN0zTXXKCAgQFarVfHx8YqPj1dCQoLCw8OH3UYqgCc4\nfvy4ysvLVVZWpvLycpWXl2vv3r2SZOxwDQAAYCZ2WwYAYITo6upSTU2NioqKVFRUpMLCQhUXF6ut\nrU2BgYGKjY1VXFyc4uLiFB8fr1mzZhEoAv2opaVFlZWVKi8vV0VFhSoqKlRXVyeHw6HJkycrJSVF\nNptNNptN6enpmjRpktklAwAAEB4CADCSuQsUt2/frvb2dgUHB2v27NmKj483AsXIyEh5eXmZXTYw\n5LkLCnfu3Cm73X5WUJiWlqbQ0FCzSwYAAHCL8BAAALjo7OxUbW2tS6BYWFiojo4OhYSEKCoqikAR\n6KGrq0tVVVUqKChQRUWFysvLtWvXLtntdo0dO1ZWq1U2m02ZmZnKzMzUpZdeanbJAAAAvUZ4CAAA\nvlbPQDEvL0+5ubmqqalRd3e3xowZo8jISJdAMSoqyuySgQHR1dWl+vp6l47CkpISdXZ2KiQkRPHx\n8UZHoc1mk9VqNbtkAACAi0J4CAAA+qS5uVklJSUuHYo1NTWy2+0KDQ01gsS4uDglJiZq4sSJZpcM\nXBB3QWFpaanRhXtmUBgbG0sXLgAA8DiEhwAAoN80NTWptLTUJVCsrq6Ww+E4K1CcM2eOxo8fb3bJ\ngCT3QWFZWZlOnTql4OBgxcfHu6xTGBMTw4ZCAABgRCA8BAAAA+rkyZMqKyvrVaCYnJysSy65xOyS\n4eG6u7u1a9cul6CwvLxc7e3tCgwMVGJiIkEhAADA/4/wEAAADLoTJ06ovLzcJVCsqqqSpLMCRZvN\npnHjxplcMYazAwcOGBv/lJeXq7KyUq2trfL19VVkZKQREmZmZiopKUk+Pj5mlwwAADBkEB4CAIAh\n4fjx46qoqDA2ZCkqKtK+ffsknR0opqamasyYMSZXjKHowIEDRkehM6A+fvy4fH19NWvWLJeOwtTU\nVPn7+5tdMgAAwJBGeAgAAIasxsZGozv6Th5zAAAgAElEQVSxqKhI+fn5OnjwoHx8fDRz5kzFxcW5\nhIqjR482u2QMojODwu3bt+vYsWOyWCyKjIx0CQpTUlI0atQos0sGAAAYdggPAQDAsNIzUCwsLNS2\nbdt0+PBht4FifHw8gZGHODMoLCkp0ZEjR+Tj46OoqCiXoNBmsxEkAwAA9BPCQwAAMOydGShu2bJF\nR48elcViUUREhEugmJCQwFTVIe7MoLCsrEyHDh1yGxQmJycrICDA7JIBAAA8FuEhAADwOA6HQ3V1\ndcYmGUVFRdq+fbuam5vl5+en2NhYI0wMCgoyu9wRz263G7sfl5eX6+DBg/L29jamHjt/5syZo8DA\nQLPLBQAAGFEIDwEAwIhgt9tVXV1tdCcWFBSotLRUra2tZpc24nl5eSkiIkKpqalGV2FycrJCQkLM\nLg0AAGDEIzwEAAAYxoKDg/Xss89q5cqVZpcCAAAAD+RtdgEAAAAAAAAAhibCQwAAAAAAAABuER4C\nAAAAAAAAcIvwEAAAAAAAAIBbhIcAAAAAAAAA3CI8BAAAAAAAAOAW4SEAAAAAAAAAtwgPAQAAAAAA\nALhFeAgAAAAAAADALcJDAAAAAAAAAG4RHgIAAAAAAABwi/AQAAAAAAAAgFuEhwAAAAAAAADcIjwE\nAAAAAAAA4BbhIQAAAAAAAAC3CA8BAAAAAAAAuEV4CAAAAAAAAMAtwkMAAAAAAAAAbhEeAgAAAAAA\nAHCL8BAAAAAAAACAW4SHAAAAAAAAANwiPAQAAAAAAADgFuEhAAAAAAAAALcIDwEAAAAAAAC4RXgI\nAAAAAAAAwC3CQwAAAAAAAABuER4CAAAAAAAAcIvwEAAAAAAAAIBbhIcAAAAAAAAA3CI8BAAAAAAA\nAOAW4SEAAAAAAAAAtwgPAQAAAAAAALhlMbsAAAAA9M6JEydkt9tdjjkcDrW2turYsWMux4OCguTr\n6zuY5QEAAMADeTkcDofZRQAAAODr3XDDDXr//fe/9nleXl7atWuXwsPDB6EqAAAAeDKmLQMAAAwT\ny5Yt+9rneHl5KSUlheAQAAAA/YLwEAAAYJj45je/qVGjRp33OT4+Pvr2t789SBUBAADA0xEeAgAA\nDBMBAQG68cYbz7uWocPh0JIlSwaxKgAAAHgywkMAAIBh5Pbbb1dnZ6fbx7y9vbVw4UKFhoYOclUA\nAADwVISHAAAAw8jVV1+tkJCQcz5+5513DmI1AAAA8HSEhwAAAMOIr6+vli1bJj8/v7Me8/Hx0Y03\n3mhCVQAAAPBUhIcAAADDzLJly9TR0eFyzGKx6Prrr9eYMWNMqgoAAACeiPAQAABgmMnKyjprXcPu\n7m7dcccdJlUEAAAAT0V4CAAAMMx4e3vrzjvvdJm6PHr0aF177bUmVgUAAABPRHgIAAAwDPWcuuzr\n66slS5Zo9OjRJlcFAAAAT0N4CAAAMAwlJycrIiJCktTZ2anly5ebXBEAAAA8EeEhAADAMLVixQpJ\n0rhx43TllVeaXA0AAAA8kcXsAgAAAIaTFStWqK2tzewyJElNTU2SpPHjx2vZsmUmV/Mv999/v77x\njW+YXQYAAAD6AeEhAADABXjvT39W4IRIBY+fbnYpkvzlHzBWrd6XqmhXh9nFSJK+KP2Hrr32WsJD\nAAAAD0F4CAAAcIFi569U1LzbzS5DktRQ8neFJV4neXmZXYok6bUfTTO7BAAAAPQjwkMAAIBhLCzp\nerNLAAAAgAdjwxQAAAAAAAAAbhEeAgAAAAAAAHCL8BAAAAAAAACAW4SHAAAAAAAAANwiPAQAAAAA\nAADgFuEhAAAAAAAAALcIDwEAAAAAAAC4RXgIAAAAAAAAwC3CQwAAAAAAAABuER4CAAAAAAAAcIvw\nEAAAAAAAAIBbhIcAAAAAAAAA3CI8BAAAAAAAAOCWxewCAAAAPN3ukveV/+efqenIFy7HfSz+ChgT\nqkujMjXn2kcUPH5Gn19zdPBETYleqIXfedHt8ys+fUll655V64kDkpeXxkwM1+W3/lJTohcYz/nn\nC8u0f+fn6jzVojGTZmr+Hc8pNCK9D39iAAAAeAovh8PhMLsIAACA4SIgMEip3/ovRc27/YJ/952f\npai95YhW/HK3HA672puPam/VBuW++bB8/QO15P9ukX/gJX1+zd5Y82/jNSnMphse/djt4/vq8lT8\n4S+16Id/uaA6nF770TS98Pz/aOXKlX36fQAAAAwtTFsGAAAwgZeXt0YHT9CstFsUu+AetTUd1t7q\njWaXBQAAALggPAQAADBZyMRwSVLryYMmVwIAAAC4Ys1DAAAAk508WC9JGj81zuW4w96t7R/8t2q3\nvqn25sMaM3Gmkq55WBG2m8woEwAAACMQ4SEAAIBJOtpO6IvSD1W5aY2mxV2lSyMzXB7P/+t/qPKz\n32nhXS9pyuz5Klv3P/r0/92rkInhmjA9yaSqAQAAMJIQHgIAAAyijraTWvNv4/91wMtLKdf/uxJy\nfuDyvO7OU6ra9HuFJV6n8KTFkqSkax9R+Se/Ve2WNwgPAQAAMChY8xAAAGAQ+Y0O0d3PH9Hdzx9R\nQvYPJIdDfqND5O3j6/K8Ewfr1NXRpnGXxRjHLL6jNDpkko4fqB3ssgEAADBC0XkIAABgkjnXPqK6\n/LdV8LdfaEbCtQocN8V4rPNUqySp8P2nVPj+Uy6/FzAm9KLO63DYz/2YvfusIBMAAAAjF+EhAACA\nSXxHBSntmz/Txtf/TXlvPaqr7nvDeGxU0ARJ0twlTynuG9/v0+vv3/m5Du8pVdwV9xnH/APHqfXE\n/nP+TtORLxTUI8QEAADAyMa0ZQAAABNFpt+qSWE27an4p+q3/69xPGjcFPn4+uvIV+V9fu3De0pl\n8QtwOXZZVJZaju/Tgfr8s3/B4VDtljc1MczW53MCAADAsxAeAgAAmMnLS/OWrpK8vLTlncd1qvW4\nJMnH119Rc2/XrsI/q3LT79XZ3iSHvVstxxvVeuLAeV/S3t2ptqZD2leXK4u/a3iYsvin8hs9Rp+s\nuUsNpf9QV0erurtO6ejeCn36/+6Vw96lyLRbBuyPCwAAgOGFacsAAAAD7EB9vja9/oBOHt4tSXrj\n362akXCtMm77pSRpYliyotJvU+3WN/X2E8lKvOqHSrzqIc1b8pT8RgerbN1z2vruv8svYKwunTVP\ntut/ooMNhcr/88+M13TZwbmHyLnLXf57TOgs3fSTz1T6z19r25/+rzac2CdvL28FTZih8Dk3KOuO\nZ+Vt8RvAvw0AAAAMJ14Oh8NhdhEAAADDRUBgkFK/9V+Kmne72aUMSa/9aJpeeP5/tHLlSrNLAQAA\nQD9g2jIAAAAAAAAAtwgPAQAAAAAAALhFeAgAAAAAAADALcJDAAAAAAAAAG4RHgIAAAAAAABwi/AQ\nAAAAAAAAgFuEhwAAAAAAAADcIjwEAAAAAAAA4BbhIQAAAAAAAAC3CA8BAAAAAAAAuEV4CAAAAAAA\nAMAtwkMAAAAAAAAAbhEeAgAAAAAAAHCL8BAAAAAAAACAW4SHAAAAAAAAANwiPAQAAAAAAADgFuEh\nAAAAAAAAALcsZhcAAAAw3FRuekVf7lhvdhlDUlfHKbNLAAAAQD8iPAQAALgAS27+ltra2swuw1BS\nUqJp06Zp/PjxZpciSbLNvEnh4eFmlwEAAIB+4uVwOBxmFwEAAIC+CQ4O1rPPPquVK1eaXQoAAAA8\nEGseAgAAAAAAAHCL8BAAAAAAAACAW4SHAAAAAAAAANwiPAQAAAAAAADgFuEhAAAAAAAAALcIDwEA\nAAAAAAC4RXgIAAAAAAAAwC3CQwAAAAAAAABuER4CAAAAAAAAcIvwEAAAAAAAAIBbhIcAAAAAAAAA\n3CI8BAAAAAAAAOAW4SEAAAAAAAAAtwgPAQAAAAAAALhFeAgAAAAAAADALcJDAAAAAAAAAG4RHgIA\nAAAAAABwi/AQAAAAAAAAgFuEhwAAAAAAAADcIjwEAAAAAAAA4BbhIQAAAAAAAAC3CA8BAAAAAAAA\nuEV4CAAAAAAAAMAtwkMAAAAAAAAAbhEeAgAAAAAAAHCL8BAAAAAAAACAW4SHAAAAAAAAANwiPAQA\nAAAAAADgFuEhAAAAAAAAALcIDwEAAAAAAAC4RXgIAAAAAAAAwC3CQwAAAAAAAABuWcwuAAAAAL3z\n3nvv6ejRoy7HOjs7tXHjRnV1dbkcv/7663XZZZcNZnkAAADwQF4Oh8NhdhEAAAD4eg888ICef/55\n+fr6Gsec/yvn5eUlSeru7pafn58OHTqkoKAgU+oEAACA52DaMgAAwDCxbNkySae7DZ0/XV1d6urq\nMv7b29tb3/zmNwkOAQAA0C8IDwEAAIaJyy+/XFOmTDnvc7q7u3X77bcPUkUAAADwdISHAAAAw4SX\nl5fuvPNOl2nLZwoKCtJVV101iFUBAADAkxEeAgAADCPLli1TZ2en28d8fX116623yt/ff5CrAgAA\ngKciPAQAABhGEhISNHv2bLePdXZ2avny5YNcEQAAADwZ4SEAAMAwc66pyxMmTND8+fNNqAgAAACe\nivAQAABgmFm2bJm6urpcjvn6+mrFihXy8fExqSoAAAB4IsJDAACAYSYiIkLJycny8vIyjnV2dmrZ\nsmUmVgUAAABPRHgIAAAwDJ3ZZTht2jTZbDYTKwIAAIAnIjwEAAAYhm677TbZ7XZJp6cs33XXXS6d\niAAAAEB/IDwEAAAYhiZNmqQFCxbIy8tLnZ2duu2228wuCQAAAB6I8BAAAGCYuvPOO+VwOBQXF6eY\nmBizywEAAIAH8nI4HA6zixhOWltbVVFRodLSUpWUlKi0tFTl5eU6efKk2aWhl3x8fDRz5kwlJSUp\nKSlJiYmJSkxM1JQpU8wuDR5k7969+uyzz7Rp0yZt3LhRNTU1Zpc07I0ZM0ZZWVmaP3++5s+fL5vN\nJovFYnZZGEbsdruqq6tVVFSkwsJCFRQUqLS0VK2trWaXNuJ5eXkpIiJCqampSklJkc1mU3JyskJC\nQswuDQAAYMQjPDyPvXv3qrS0VGVlZSouLlZpaal27typ7u5uBQYGKjo6WtHR0bJarRozZozZ5aKX\nurq6tHPnTlVVVam6ulpfffWVJOmSSy45K1CMjY2Vr6+vyRVjOGhoaNDGjRuNn/r6evn6+iohIUFp\naWmKjY2VtzfN3hfj0KFDys/PV35+vg4fPqygoCBdfvnlWrBggRYsWKDU1FT5+fmZXSaGCIfDobq6\nOhUWFqqwsFBFRUXavn27mpub5efnp9jYWMXFxSk+Pl5BQUFml3tRfve73+nmm2/WJZdcYnYpfWa3\n27Vr1y6Vl5ervLxcBw8elLe3tyIjI5WSkmL8zJkzR4GBgWaXCwAAMKIQHup0mFRTU6PKykrt2LHD\nuNE4cOCAJCk0NFSRkZGKjIw0bjRmzZpFEOAhmpqaVF1drbq6OtXV1amiokIVFRVqa2uTxWIx/t1j\nY2Nls9mUlpam0NBQs8uGyerr65Wbm6u8vDx9/PHHamhokMViUUxMjDIzM2Wz2ZSenq7g4GCzS/VI\ne/bsUUFBgYqKirRp0yZ99dVXGj16tJKTk5WZmans7GxlZGRo9OjRZpeKQdLY2KiioiKjq3DLli06\nevSoLBaLIiIiFBcXZ1zDExIS5O/vb3bJ/aahoUFhYWFml9GvDhw4oPLyclVUVKi8vFxlZWU6dOiQ\nfHx8FBUVZXQnOjsUAwICzC4ZAADAY4248PD48eOqqKhQUVGRKisrVVFRoeLiYrW1tcnX11fh4eGK\ni4szwsI5c+Zo/PjxZpeNQdbV1aXGxkbV1tYaNy4VFRVGoDxu3DgjTHT+REdHy8fHx+TKMVB6hoUf\nffSR9uzZo9GjR8tqtSo1NVUZGRlKSUnRqFGjzC51ROoZJubm5mrPnj2yWCxKTEw0gsT58+fTJe4h\nzgwKt23bpsOHDxvLUvQMCuPj4xmXHuLMQLGkpERHjhxxGyjabDa+PAAAAOgnHh0e9ry5cAaF1dXV\ncjgcGjNmjCIjIxUfH6+4uDhFRUUpKirKozoR0P9OnDih2tpa4+alrq5ONTU16ujokJ+fn2bOnGnc\nvFitVsLnYay+vl7r169Xbm6uNmzYoL179yogIEDJycnG9Lm0tDSmyQ5RBw4cUGFhofLy8lRYWKja\n2lpZLBYlJCQoMzPT6E4cN26c2aXia/S8lhcVFSk/P18HDx50GxTGxcURGI0wZwaK27dv17Fjx4yZ\nAz0DRb7gAQAA6BuPCA+bmppUW1urHTt2GDcXJSUlamlpkY+Pj6ZOnapZs2a5BIXTp083u2x4iK6u\nLtXX16u8vFw7d+5UbW2t0Q0hSZMnT1ZKSoqsVqvRrRgTE8O09yGku7tb1dXVysvL0/r167VhwwYd\nOXJEgYGBmjNnjhEWpqenswbmMOVcL9G59l15ebm8vb0VFRWlrKwsZWdn64orriDsN5lzdkBeXp5y\nc3NVVFSkffv2STq9hEjPkDA1NZVOUrh1ZqBYVFSk48ePy9fXV7NmzXIJFFNTU/niGAAA4GsMu/DQ\n2YHQc33Cmpoa2e12BQcHKzo6WpGRkS5hIV0IMIPz5qXnWoo7d+6U3W5XSEiI0S3jDBRZs2nwdHd3\nq6SkxJiG/Mknn+jo0aMKCgpSUlKSMQV5zpw57ObroY4cOaLi4mJjmvOOHTtkt9sVHh6unJwcZWdn\na+HChZo4caLZpXqsEydOGMGOc/pxVVWVpLODQpvNRpcoLoqzG7mwsFDl5eWqrKxUa2urfH19FRkZ\naYSJmZmZSkpKYhkSAACAHoZseNjZ2ana2lqXKcfONY2kf91YREVFGUEhm5hgqGtpaVF9fb3LWorO\nGxgfHx9Nnz5dVqvVuImxWq2KiIgwu+xhr6urS6WlpcY05M2bN+vEiROaMGGCEhMTlZKSoszMTFmt\nVj5DRqiWlhYVFxcb05xLSkrU2dlphIkZGRlauHAhXet9dPLkSZWVlbkEhc5lRM4MCpOTk4f1rsEY\nHrq7u43dnZ0bpZWXl6u9vV2BgYHGtcF5PWbGAAAAGMmGRHh47NgxlynHO3bs0I4dO3Tq1CmXTUyc\nYaHVaqUDAR6l5xQrZ6diXV2dHA6Hxo4de1agaLVaWbfpPDo7O1VWVmaEhZs2bdLJkyc1adIkpaam\nGlPV4uLi5OXlZXa5GILODBNLS0vV0dGh8PBwY83EnJwchYeHm13qkNPU1KTS0tJeBYWsC4uhpOcy\nJM5AsaysTKdOnVJwcLDi4+MJFAEAwIg0qOFhV1eX9uzZYwSFzrWn9u/fL0lnbWISHx+vmTNnMnUE\nI9LJkydVU1NjrKVYV1dndEX0XLfJuZZienq6Jk2aZHbZpmhtbdX27duVl5endevWKS8vT+3t7QoN\nDVVKSooxDTkyMpKwEH3ifI85r1vbtm1TR0eHJk+ebKyZmJGRIavVanapg6q5uVklJSUuQaFzKZEz\ng8LExESmgWPYcRcoOr9MCAkJUXx8vMsOz7GxsVxnAACAxxmw8NC5llHPtQlLSkrU2toqi8WiiIgI\nRUZGKjIyUnFxcUpKStKECRMGohTAYzhvYpydieXl5SovL9fBgwclnd6cpec6ip7aGdHc3KytW7cq\nNzfX+Dl16pRLWJiZmckUUwyYtrY2VVRUGDs6FxQU6NSpU0aY6HwPJicne0yQ0HM5EeeGJjU1Neru\n7nb75V9UVJTZJQMDwl2g6FzqwF2gONK+VAAAAJ6nX8JD5yYmPdcndE5RGjNmjKKiohQXF2eEhQkJ\nCexsB/SjEydOqLa21uVGZteuXeru7pafn59mzpzpMtUqKSlJQUFBZpfda01NTdq2bZvWr1+vzZs3\nq6CgQJ2dnZoxY4ZsNptSUlK0YMECTZkyxexSMUJ1dXWpqqpKubm5KiwsVEFBgTFVPi0tTZmZmcrO\nzh42YWLPoNDZUVhYWGh0W0VFRbkEhXT1YqRzfgYUFBQY6yfu2rVLdrvdZfkR57IHl156qdklAwAA\n9NoFhYcdHR2qq6szbiaKiopUWlqq5uZmSWfvjhgVFaVp06ZxQwGYoLOzU7t373ZZS7GyslJHjx6V\ndLpL0RkoOqc+D5XpVocOHdLWrVuNacglJSWy2+2aMWOGMjIyZLPZdPnll3PzhSGrZ5Dg3NHZuUnP\n3LlzjTBxzpw5pncGd3V1qaamxiUo3L59u9rb2xUcHKzZs2cTFAJ90NLSosrKSpcv9nbu3Cm73e5y\nDbbZbEpLS1NoaKjZJQMAALh1zvCwsbHRmHLsvJmora1Vd3e3goKCFB4ebkw5jo+Pl9VqVUBAwGDX\nD+ACOTdncU597nkzExISYmxO1HPq8+jRowe8pvz8fCMsLC4ulre3t9ExmZGRoXnz5rEDK4Yt586u\nzmnOeXl5On78uIKDg5Wenm6smZiWliY/P78Bq8NdUFhcXKy2tjYFBgYqNjbW+AyIj4/XrFmzTA83\nAU/iLlB0bpB2ZqA4ktcyBgAAQ8tZ4WFLS4umT59udCdNnz5dMTExio6OVkxMjGJjY+kmBDxMU1OT\nqqqqjJ/KykrV1tYam7M888wzuv/++wfk3Hfeeaf+8Ic/yGKxKD4+XmlpacZPcHDwgJwTMJvdbld1\ndbW2bt2qbdu2qaCgQEePHlVISIjKyso0Y8aMfj/nP//5T914441qb29XQECArFar4uPjFR8fr4SE\nBIWHhxMUAiY4fvy4ysvLVVZWZqxlvHfvXknSkiVL9O6775pcIQAAGOksZx6w2+06evSonnjiCS1d\nupSbd2AECA4ONgI7p66uLu3evVt33HGHjh8/PmDnPnjwoHJycvTMM88oMDBwwM4DDCXe3t7GUgEr\nV66Uw+HQ+vXrdc8996i9vX1AztnU1KT29nZ99NFHioyMlI+Pz4CcB8CFGTt2rLKyspSVlWUcO3Lk\niH76058aG6IBAACY6ZwtBhEREQSHwAhmsVgUGRk54FOWJemSSy4hOMSI5uXlpalTpw7KuaKioggO\ngSFu/PjxTFkGAABDhsfOT7ruuusUFhamsLAwpaam6uc///nX/s7u3bt1ww03KDY2VuHh4VqxYkWf\nzp2bm6vVq1e7HLPb7fr973+vb33rW+f8vYKCAt18882Kjo5WamqqVq1apY6Ojj7VMBDn/brnrVu3\nTi+88IK6u7svquaOjg79/Oc/V0pKiqKjo3X77bcrOTlZYWFh+uMf/3hRr91bL7zwgq644grNnj1b\nMTExuuKKK/SrX/3K2BzI6dlnn1V2drasVqsiIyO1YMEC/dd//ZdaWloGpU4MvBtuuEERERG69tpr\nB+T1B+rzgvHIePRUfRkzF/Le+Otf/6obbrhBVqtVl19+uR555BEdOnToomrmWtw3jH0AAIChwWPD\nw3/84x/KysqSl5eXPvjgA/3sZz9zeby7u1vLli1zORYeHq6//e1vevTRR/XNb35Tr7322gWf99e/\n/rXWrl2rBx54wDi2e/du3XLLLfrFL36htrY2t79XW1urO++8UxkZGdq+fbteeuklvfPOO/rpT396\nwTUMxHl787ycnBz5+/tr+fLlOnnyZJ/r/t3vfqfPPvtMGzZs0BNPPKHbb79df/7zn/v8en1RUFCg\nZcuWacuWLSosLNSPfvQjvfDCC7rvvvtcnvf555/r29/+tvLy8lRSUqJHH31Uv//97wdsfUAMvr/9\n7W+aN2/egLz2QH5eMB4Zj56or2Omt++Nv//973rwwQe1aNEibd26VWvWrFF+fr6+/e1vq6urq081\ncy3uO8Y+AADA0OCx4aF0umPI4XDok08+OeuxLVu2aMuWLaqrqzvrsU8//VTXX3/9BZ/vhRde0N/+\n9jc9//zzxhTMqqoqrV69WnfccYdiY2PP+bvPPfecJk6cqP/zf/6PAgIClJycrO9///t67733tGvX\nrguupb/P29vnrVy5UrGxsfrOd77T5xutjz/+WAkJCQoJCdHy5cu1aNGiPr1Ob7W3t5/VDeLr66sV\nK1YY02mvu+46XX311dq8ebPL+kOBgYFavny5xo4dq8DAQF1//fW65pprtHHjRu3bt29A68bg6u9N\nogbj84LxyHj0JBczZnr73vjjH/+o0NBQfe9731NwcLBiY2N19913q7KyUiUlJRdcM9fi3mPsAwAA\nDF0eHR5ec8018vX11fr16896bPPmzQoNDdUHH3zgcry9vV1VVVVasGDBBZ2roaFBv/rVr/Twww/L\n39/fOB4TE6MXX3xRN954o/z8/Nz+bldXlz799FOlp6e7BBQLFy6Uw+HQxx9/fEG19Pd5L7S+hx56\nSJWVlXrllVcuuG5J2rdvnyyWs/byGTBvv/22jhw54nLspZdecvl3lKTQ0FBJcpkG9corr5y1dti4\nceMk6ZwdJhiefH19++21BvPzgvHIePQEFzNmpN6/N/bt26dJkya5jK1LL71Ukozdby8E1+LeY+wD\nAAAMXR4dHgYHB2vBggXKzc112b3S+S38okWL9OGHH7r8Tl5enubPn28EBRs3bpTVatVvfvOb855r\n7dq1cjgcys7OvuA6v/zyS7W0tGjKlCkux2fMmCFJqq6uvuDX7M/zXmh9Y8aMUXp6ul555RU5HI5e\n17N582YtWLBABw8e1J/+9CeFhYWdt1PD4XBozZo1uvLKKxUZGamEhATdc889Z3Vq5ufnKzs7W3Fx\ncYqKitLVV1+tTZs2SZL+4z/+Q//5n/+pL774QmFhYecNjRsaGhQSEvK1mxrs379fo0aN0rRp03r9\nZ8fQ19DQoCuuuEIxMTGaPXu2li5dqoKCApfnDMXPC8Yj49ETXMyYORd3741p06bp8OHDLs9zrnc4\nffr0fjt3T1yLGfsAAABDnUeHh5K0ePFitbe3Kzc31zi2efNmZWZmatGiRaqurtbu3buNxz799FMt\nXrzY+G/nguN2u/2859mwYYMiIiL6tDOt88bkzN1m/f39NWrUqLNuZPpLb8/bl/qsVqv279+vqqqq\nXteTlZWljRs3asKECbr55pvV0GU3PRQAACAASURBVNCgysrKcz7/mWee0erVq/XAAw9o+/bteued\nd7Rv3z4tXbrUpabDhw/r+uuvV15envLz8xUQEKAHH3xQkvTEE08oOztbM2bMUENDgzZu3Ohyjq6u\nLu3fv1+vvvqqcnNz9fOf//y8HWhtbW36/PPPtWzZsn7tVIP5xowZo9dee03l5eV6//331dnZqTvu\nuMPl82Oofl4wHhmPw93FjBl3zvXeeOCBB3To0CGtXbtWLS0tqq2t1SuvvKL58+drzpw5/XLuM3Et\nZuwDAAAMdR4fHmZnZ2vUqFEuU5c///xzzZs3TykpKQoNDdU//vEP47GSkhJlZmYa/33FFVdox44d\n+uEPf3jOc7S2turLL780vv2/UKdOnZKks6bcSJLFYnHpmuxPvT1vX+oLDw+XNHBdk+3t7VqzZo2u\nueYa3XTTTQoODlZ0dLSeeuopHT16VG+88Ybx3EWLFumhhx7SmDFjNHbsWOXk5OjYsWM6evTo155n\n7ty5mjt3rp555hn95Cc/cQmW3Xn++ec1adIkPfLIIxf9Z8TQEhgYqKlTp8pisSgqKkqrVq3SqVOn\n9OabbxrPGaqfF4xHxuNwdrFjxp1zvTfS09N133336cknn5TVatVVV12llpaWs3Z37k9cixn7AAAA\nQ53Hh4eBgYG64oor9Mknn8jhcKijo0MWi0UWi0VeXl669tprjXUP6+rqZLVaL3iNnyNHjsjhcGjU\nqFF9qtG5no+7Rc07Ozv7/Lr9dd6+1OfsDhmorsna2lq1tLQoISHB5XhiYqJ8fX3Pu7C989/X2SV2\nPlu3btX27dv13HPP6U9/+pMWLVp01ppMTh999JH+8Y9/6PXXXz+rMwSeJzo6WsHBwRfU0SOZ83nB\neGQ8DmcXO2bOdL73xtNPP6033nhDb7zxhiorK7V582bZbDZ961vfGrCNN7gWM/YBAACGusFbCdtE\nixcv1gcffKCysjLt37/fZS2dRYsWae3atfriiy/6vMuysxvgzEW9e2vixImSpObmZpfjbW1tOnXq\nlCZNmtSn1+2v8/alPuffhfPvpr+dPHlS0tnTtyQpJCTEpdYNGzbopZdeUl1dnZqami5o50mLxaJL\nLrlEWVlZmjp1qr7xjW/o+eef1xNPPOHyvPfff19r1qzRW2+9ZSzmDs/n6+t7wTuZmvF5wXjEcHax\nY6an8703Dh48qBdffFH333+/Lr/8cklSQECAVq1apYSEBL300kt68sknL7qGM3Et/nqMfQAAAHN5\nfOehdHoqYWBgoNatW6dt27YpLS3NeCwlJUWTJk0ywsV58+Zd8Os7v+3vzbfn7kybNk2BgYFn7eT4\nxRdfSDrd4TQQenvevtTX2dkpSQPWNRkSEiLp7Jso6fTNjHN3zMbGRt17772aOHGi/vd//1cVFRV6\n/PHH+3TOsLAw+fj4qLa21uX42rVr9Ze//EVvvPEGNysjSFdXl44fP67LLrvsgn7PjM8LxiOGs4sd\nM05f995oaGhQd3f3WY8FBQVp7NixZ73X+gvX4gvD2AcAABh8IyI89Pf3V05Ojj744AONGjVK3t7/\n+mN7e3vrmmuu0Z///GdNmDDhgqcsS9L48ePl5eWlpqamPtVnsVj0jW98Q9u2bXPZaOHTTz+Vl5eX\ncnJy+vS6/XXevtTn/LuYMGHCgNQ+e/ZsBQYGqqyszOV4SUmJOjs7FR8fL+n0Ok9dXV1asWKFpk+f\nLn9/f3l5eZ33tY8dO+Z2zTrnjaXzZsjhcGjVqlWqqanRyy+/zPSoEWbLli2y2+2Ki4u7oN8z4/OC\n8Yjh7GLHTG/fG5MnT5Z0ugOxp5aWFh0/ftx4r/U3rsXuMfYBAACGjhERHkqnpy7X19fryiuvPOux\n6667TnV1dbr66qvPeuyzzz6T1WrVb37zm3O+9ujRozV9+vSLWg/phz/8oQ4fPqxf//rXam1t1fbt\n2/Xyyy9ryZIlioiIMJ73wAMPyGazqaKios/n6st5e/s8J+ffhbMTor/r9vf31z333KOPPvpIf/nL\nX9Tc3Kzq6mr99Kc/1aRJk7R8+XJJMrrCcnNzderUKe3evfusNZjGjh2rAwcO6KuvvlJLS4v8/Py0\nefNmff7552publZXV5d27Nihhx9+WAEBAbr77rslnV4j88UXX9Sbb76pWbNmKSwszOXn5Zdf7pc/\nK4aGzs5OY6pdRUWFnnzySU2ZMkVLly41njPUPi+cGI+Mx+HsYsdMb98b06ZN07x58/Tmm28qPz9f\n7e3t2rdvn37yk59Ikm699VbjNbkWn8bYBwAAGBlGTHi4YMECxcTEKDk5+azHUlNTFRMTo/T09D6/\n/hVXXKHa2tqzdjssLi7WkiVLlJaWppKSElVVVSk1NVU333yz8vPzjedFRUXp9ddf16ZNm5SUlKTv\nf//7uuWWW/TUU0+5vF5nZ6eOHDmidevWnbee/j5vb5/nVFZWpsmTJxs3LL2pe+/evbruuut0+PBh\n/fWvf9X111+vDz/8UGvWrNGSJUskSU899ZS+//3vS5IefPBB/fjHP9Zzzz2npKQk3XrrrZo6dare\nfvttBQQESDp9w3TffffptddeU2pqqn75y19q7ty5kqQlS5Zo3759uuOOOzR+/HhlZ2frO9/5jtra\n2pSSkqLHHntM6enpio2N1f3336+pU6fqL3/5i2bPni3pdLcDRoabbrpJEydO1MKFCxUdHa0777xT\nVqtV7777roKCgi749Qbr88KJ8Yjh7mLGTG/fG15eXvrtb3+rxYsX68c//rESEhKUnZ2txsZGvfji\niy5LnnAtZuwDAACMJF6OM/6vq6mpSSEhIVq7dq0WLlxoUlnDT0NDg7Kzs/X000/rpptuGrDz2O12\n3XbbbVqyZIluueWWATvPxTh27Jjmzp2rRx55RPfcc4+k4VE33Fu4cKHuuece/fu///uAvP7VV1+t\ncePGafXq1QPy+kPRYH1eSIzH4aSqqkrXXnutqqurjWCkP7333ntaunSp6uvrXZbvGA4Gc8z0xnAY\nQ4z94e+JJ55QQ0ODNm7caHYpAABghBtedw9DWFhYmB5++GE999xzamlpGZBzdHd36+OPP1Zzc7MW\nL148IOfoD88884xiY2N11113SRo+dQODZTA+L5wYj/AEgzlmvs5wGUOMfQAAAPQXwsN+dP/992vR\nokX6wQ9+0OeF3c9n69at+vDDD/Xqq69q9OjR/f76/WHNmjWqrKzU2rVrjc1nhkPdwGAb6M8LifEI\nzzIYY6Y3hsMYYuwDAACgP1341sI4r0cffVSbN2/Wb3/7Wz322GP9+toZGRnKyMjo19fsT+vWrVNH\nR4feeust+fj4GMeHet2AWQby84LxCE80kGOmt4b6GGLsAwAAoL+dc83DCRMmKDY2VrGxsYqJiVFM\nTIwiIiKMb7ABeJ7Dhw+rqqpKO3bsUHV1taqrq1VbW6tf/OIXA7bm4TXXXKO8vDzNnTtX6enpSktL\nU1xcnMtNL+CpDhw4oPz8fG3dulVbt27Vrl27BnzNw6ioKMXHxysuLk4JCQmKjY2lEw0YAhoaGlRe\nXm78lJaWKjU1VZ999pnZpQEAgBHurPDQbrdrw4YNKi0tVWlpqUpKSlRdXa3Ozk75+/tr9uzZiomJ\n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\nEhISjGUhUlJSFBsby5cvAAAAJiI8vEiNjY0qKytTU1OT2aWgl7y9vRUZGamYmBj5+vqe9fj+/fv1\n9ttv65VXXlFZWZliY2O1YsUKrVy5ko4mXDC73a6KigrV1NSYXcp53XfffVq+fLmysrLMLuWcxowZ\no3nz5ik4ONjsUjDEVFVV6dVXX9Xvfvc7tbS06IYbbtC9996rK6+88rxrke7du1clJSVqbW0dxGpx\nLrNmzVJcXJzbazMAAADMQ3gInEdRUZFefvllvfnmm+ro6FBOTo5WrFihm266iS4IeJTg4GA9++yz\nWrlypdmlAL1yZpdhVFSUVq5cqe9+97ssJQIAAAD0I1aVBs7DZrPppZde0sGDB/X666+rvb1dt956\nq8LCwvT4449r165dZpcIACNKdXW1Hn/8cU2dOlV33HGHxo0bp3Xr1qm6ulqPPfYYwSEAAADQzwgP\ngV4YNWqUli5datyg3n333Xrrrbc0a9YspaSk6OWXX1ZLS4vZZQKARzp16pTeffdd5eTkKDY2Vn/6\n05/06KOP6ssvv9Q777yj7Ozs805PBgAAANB3hIfABYqKitKTTz6p+vp6rVu3ThEREfrBD36gyy67\nTN/73veUm5trdokA4BFqa2uNLsNly5Zp1KhR+vjjj1VbW6vHHntMkyZNMrtEAAAAwOMRHgJ95O3t\nrezsbL3zzjvav3+/nn76aeXn5ysrK0uxsbFavXq1Dh48aHaZADCsdHR0GF2G0dHR+uMf/6jvfve7\n2r17t95//326DAEAAIBBRngI9INx48bp3nvvVXFxsQoLC5WTk6P//u//1rRp07R48WK9++676urq\nMrtMABiy6urqXLoMJentt99WQ0ODVq1apWnTpplcIQAAADAyER4C/cxms+nZZ5/V3r179Yc//MHY\nZGX69Ol6/PHHVVdXZ3aJADAk9OwynD17tl5//XWtXLnSWBZi6dKl8vHxMbtMAAAAYEQjPAQGSM9N\nVr744gs9+OCDevvttxUVFWVsstLc3Gx2mQAw6L766is9+eSTmjZtmm677TZJp7sMv/jiC61atUrT\np083uUIAAAAAToSHwCCYNm2aHnvsMe3atUvr1q1TbGysHnroIU2ZMkUrVqzQ+vXr5XA4zC4TAAZM\nd3e31q9fr1tuuUVhYWF6+eWXddddd7l0GVosFrPLBAAAAHAGwkNgEDk3WXnttdfU2Niop59+WhUV\n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\nmDEqLCy0+FqtWrXUv39/NWzYsJJTAQAAAACsDeUhANRA4eHhcnd3v+3r48aNq8Q0AAAAAABrRXkI\nADWQvb29HnvsMTk4ONzymq2trYYNG2ZAKgAAAACAtaE8BIAa6rHHHlNBQUGpY3Z2doqMjFSdOnUM\nSgUAAAAAsCaUhwBQQ/Xp0+eW5xoWFxdr7NixBiUCAAAAAFgbykMAqKFq1aqlcePGlVq67OzsrMGD\nBxuYCgAAAABgTSgPAaAG+/XSZXt7e40cOVLOzs4GpwIAAAAAWAvKQwCowbp37y5vb29JUmFhoUaP\nHm1wIgAAAACANaE8BIAabvz48ZIkDw8PhYSEGJwGAAAAAGBN7IwOAABV3aVLl7Rt2zZt375dGRkZ\nKikpMTrSXcnOzpYk1a9fv0rOPPT09FRAQIB69uyp9u3bq1Yt/l4MUkZGhmJjY5WamiqTyWR0HKvg\n5eWliIgIDRgwQE5OTkbHAQAAQBVhY+JP1ABQZgUFBUpLSzOXhVu3btWRI0ckSS1atFCHDh1kZ1f1\n/l4mOTlZnTt3loeHh9FR7trZs2e1f/9+5efny93dXT179lRAQIC5UPztjtKongoKCpSYmKi1a9cq\nJiZGR48elYeHh3r06CF7e3uj41mFEydOKD09Xc7OzgoNDVVkZKQiIiLUpEkTo6MBAADAilEeAsAd\nZGZmaufOnUpJSVFSUpJ2796tGzduyM3NTR06dJCPj4/8/f0VGBio+vXrGx33nq1bt07h4eGysbEx\nOso9KSoq0tGjR7Vv3z7t3LlTqampOnLkiEpKStSoUSP5+/vLz89PvXv3Vq9eveTi4mJ0ZJSDrKws\nbdy4UTExMVqzZo2uXr2qFi1aKDg4WCEhIQoMDKySZX5FunjxojZt2qSEhAQlJiYqJydHHTt21NCh\nQxUZGalevXoxexcAAAClUB4CwH9cu3ZNe/fuVUpKipKTk7Vt2zZduHBBdnZ28vb2VpcuXeTv7y9/\nf3+1adOG/8C2crm5uTpw4IC5UNy2bZuysrJkZ2entm3byt/fX71791ZQUJA6duzI71lFpKenKzY2\nVnFxcUpMTJQk+fr6KiQkROHh4eYNgPD78vPztWPHDsXHx+v7779XZmamPD09NXjwYEVFRSk8PFzu\n7u5GxwQAAIDBKA8B1EhFRUU6dOhQqVmFhw4dUklJiRo2bFiqKPTx8eH5YNXEuXPnSs1O3Ldvn/Ly\n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\nM8/Iz89P+/fvv/8PKOnZZ59VVlaW3n77bV2/fl27du1SdHS0Ro4cKW9v71vOv/ld3JyVWN55HB0d\n9eSTT2rdunX6+uuvlZOTo4MHD+qvf/2rvLy8NHr0aElSkyZNJEnJycnKz8/XsWPHbnkeYt26dXXu\n3Dn9/PPPys3NlYODg5KSkvTDDz8oJydHRUVFSk9P1/Tp0+Xi4qJJkyZJKvvvButkjeP2pooeP5Yw\nDgAAAFAZKA8B1FjBwcE6fPjwLTsP7969WyNHjlTPnj2VlpamjIwM9ejRQyNGjND27dsl/TJzpyxs\nbGz0/vvvKyoqSi+//LK6du2q0NBQZWZmauHCherZs6f53MLCQl28eFFxcXF3vGZZ8klSu3bttHz5\ncm3evFm+vr566qmnNGrUKL3xxhsWr7t37141atTIXH6UJc/p06cVERGhrKwsrV69WpGRkfruu++0\nePFijRw5UpL0xhtv6KmnnpIkPffcc3r55Zf17rvvytfXV3/4wx/0wAMP6LPPPpOLi4ukX8qXqVOn\natmyZerRo4f+93//V4GBgZKkkSNH6syZMxo7dqzq16+v0NBQTZgwQTdu3JC/v79mzJihgIAAderU\nSdOmTdMDDzygr7/+Wu3bt5dU9t8N1svaxu1N9zJ+PvroIw0dOlSSNHv2bD355JNavny5lixZIkka\nNGiQTp48qZUrV+qf//ynJGn8+PE6duyYJDEOAAAAUClsTPwJEkA5aN26tUaOHKlp06YZHaXMjh8/\nrtDQUP3rX//SI488YnQclZSU6L/+6780cuRIjRo1qlLvffnyZQUGBurFF1/Uk08+aXgelF1ubq46\nd+6stWvXasiQIeV+/YkTJ+rYsWNaunRpuV/7XljbuJUYPxVt06ZNmjBhgq5du6batWsbHQcAAKDG\nYeYhgBqrZcuWmj59ut59913l5uYamqW4uFjr169XTk6OoqKiKv3+77zzjjp16qQ//vGPVpEHuB1r\nGrc3MX4AAABQnVEeAqjRpk2bpiFDhuhPf/rTPW/CUB62bt2q7777Th999JGcnZ0r9d6LFy/WgQMH\ntHTpUtnZ2RmeB/g91jJuJcYPAAAAqj87owMAgNFeeuklJSUl6f3339eMGTMMyRAUFKSgoKBKv29c\nXJwKCgr06aefytbW1vA8QFlZw7hl/AAAAKAmoDwEUG42bdokLy8vdevWTa1bt1atWlVncnOfPn3U\n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\nbnRUl9zcTTJbisnTN0j+wZXuaB9362cDAAAA4OYoDwEA+S497ZJs15KVkXYpx7i72UN/fWrhHe83\n7fJpuZtyLqI/vO1jpadcuON95pcfVo+X05GlRp1flru764X/ITVaq2aLgQWc7Pa1e/LjO3rd3frZ\nAAAAALg5LlsGAOS7khXq6dd9a7Vq0sOKePQdlQpvcvPJTqf2xk3Toa3zlJx0QmaLp8pUeUCNHn5F\nAaWqSJJOHdygrYtG6eqVszqyfbGObF8ss4eXqkf01YHNs+XItGnm0BLyC6qomi0H6vuVrynTnq6g\nkNpKu3xaGWmX5W62yL9UFVk8vJSS9IvSU5NkslhVPaK/Gnf9Z3acMz9/qy2LRijtcqIcmTb5BYer\nSbdXFVKjtQ5vX6RtS55Xpu2qPDz91aLvFHkHltU3H/ZX2qXTCm/QVa2iZ8iRadPpQxtl9S6ukmH1\nb+mc7fl6snateltu7ib1GrtLe76epKPff6YOMZ/LP7jSH54jSUo8slU7lr+iS6d/kpvJLJ/ioeo8\n8itZivnmuu12HNj0kXYsf0VyOtXq8Zn6afNsnT32nTyK+apx17Gq1LC7JGn7J/+44bOp3qzfn3qP\n+zfM0I7l/5SlmK/C6nbUiT3/lu3qFZUIraOmPV5XcFgDSdLmBTE6tO23wtM3KExtB85WidA62jR/\nmI7tXC43k0Ut+09XhTqsigQAAAD+F+UhACDf1Wk3XL/sXaMLv+zWF+MjFVCmmqo2eVTVHugrq3dg\njrk7//22flw7SQ/2maTytdsr9dJJbZo3VF9O6KDuL22Vp29JlaveUr3Gfq8FL1RXSK02atH3g+zX\np106raST+9Rr7PfZY7arV7Tr3+8o4tHxCixbQ1n2a1o/Z4hOHlinh55erJIV6svs4aX4z1/Vnm/e\nV+XGPVS83H2SpGsp5xXeoKtqtRwsOZ1aM+1RrZ/9pPq+c0RVm/ZWcFgDrXi7tSrc/zdVuD9SklSp\nUQ/5BVVUtQcekySlXDypLHuGSoTUvq1zZktP0e7VE/TjmgnyKxmu4IoN5ZTzls5Rpu2q1k7vo3rt\nR6jjc6tkS0/W1sWjlJVpk1su2yy5ZNr+yT9U7YG+CixbI3us5oNP6OqVM9q9eoIsVh+1eeIjZWVm\n6JsPB2jzgmdVsV5nuZssatrjDdefzZ94j7VaDtalxEP6ecdS3dfqSf2l5xtKOZ+gjfOH6qv3u6nH\n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\nQmCC\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "afca_9ZgMq5B"
      },
      "cell_type": "markdown",
      "source": [
        "上から下へ向かって、データやパラメータがどのような`Function`に渡されて計算が行われ、ロスを表す`Variable`が出力されたかが分かります。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VKGpB55MMq5B"
      },
      "cell_type": "markdown",
      "source": [
        "### テストデータで評価する\n",
        "\n",
        "上でもValidationデータに対しての評価を学習中に行うために使用されているTrainer Extensionの一つであるEvaluatorは、Trainerと関係なく独立して使うこともできます。以下のようにして`Iterator`とネットワークのオブジェクト（`net`）、使用するデバイスIDを渡してEvaluatorオブジェクトを作成し、これを関数として実行するだけです。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "0VPMBv5uMq5C",
        "outputId": "4c1153ef-19b9-4f89-aee6-e583f5c85c24",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "test_evaluator = extensions.Evaluator(test_iter, net, device=gpu_id)\n",
        "results = test_evaluator()\n",
        "print('Test accuracy:', results['main/accuracy'])"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test accuracy: 0.92494065\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "S3wF6tp-Mq5F"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みモデルで推論する\n",
        "\n",
        "それでは、Trainer Extensionのsnapshotが自動的に保存したネットワークのスナップショットから学習済みパラメータを読み込んで、学習ループを書いて学習したときと同様に1番目のテストデータで推論を行ってみましょう。\n",
        "\n",
        "ここで注意すべきは、snapshotが保存するnpzファイルはTrainer全体のスナップショットであるため、extensionの内部のパラメータなども一緒に保存されています。これは、学習自体を再開するために必要だからです。しかし、今回はネットワークのパラメータだけを読み込めば良いので、`serializers.load_npz()`のpath引数にネットワーク部分までのパス（`updater/model:main/predictor/`）を指定しています。こうすることで、ネットワークのオブジェクトにパラメータだけを読み込むことができます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "c75UL_8XMq5H",
        "outputId": "9cd338a9-7bf4-40f4-d45f-75e2b8778845",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "infer_net = MLP()\n",
        "serializers.load_npz(\n",
        "    'mnist_result/snapshot_epoch-10',\n",
        "    infer_net, path='updater/model:main/predictor/')\n",
        "\n",
        "if gpu_id >= 0:\n",
        "    infer_net.to_gpu(gpu_id)\n",
        "\n",
        "x, t = test[0]\n",
        "plt.imshow(x.reshape(28, 28), cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "x = infer_net.xp.asarray(x[None, ...])\n",
        "with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "    y = infer_net(x)\n",
        "y = to_cpu(y.array)\n",
        "\n",
        "print('予測ラベル:', y.argmax(axis=1)[0])"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAD4CAYAAADFJPs2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAADppJREFUeJzt3X2oXPWdx/H3bFQa4rarVhubVYOm\nfLFMgpoVmjXZXjdpdeO6/pGIf6iIii6LSkEMGPuHDxC7KOriA4J0txa1YKKg0QaxiYv5w0g1rHqv\n6M9Gi6hRosa2xq4xcWf/uJP0znjnzNxz5yn+3i8Izvn9zsOXc/l4nubMr1Kr1ZD09fZXgy5AUu8Z\ndCkDBl3KgEGXMmDQpRzUarWe/wNqE/+Njo7WmtuG5Z+1WduBWldRBitlH69FxB3AD+ob+UlK6YVW\n81YqlYaN1Go1KpVKqe32mrWVY21T1+26arVay5WVOnWPiB8C30spLQIuBe4sWZukPih7jb4UeAwg\npfQacFhEfLNrVUnqqoNKLjcb2Dph+sN6258mm3l0dJRqtdrQNszfyLO2cqxt6vpVV9mgNyu80Jg/\nf37D9LBeM4G1lWVtU9eDa/SWfWVP3bczfgTf57vA+yXXJanHygb9aWAlQEScAmxPKX3ataokdVWp\noKeUngO2RsRzjN9xv6KrVUnqqtLP0ae0EZ+jd4W1lTOstQ39c3RJBxaDLmXAoEsZMOhSBgy6lAGD\nLmXAoEsZMOhSBgy6lAGDLmXAoEsZMOhSBgy6lAGDLmXAoEsZMOhSBgy6lAGDLmXAoEsZMOhSBgy6\nlAGDLmXAoEsZMOhSBgy6lAGDLmXAoEsZMOhSBgy6lAGDLmXgoDILRcQIsA54td40mlK6qltFSequ\nUkGvezaltLJrlUjqGU/dpQxM54j+/YhYDxwO3JhS+k2rGUdHR6lWqw1ttVptGpvuLWsrx9qmrl91\nVcpsKCLmAIuBtcDxwH8D81JKX0y6kUqlYSO1Wo1KpTL1avvA2sqxtqnrdl21Wq3lykoFvVlE/BY4\nL6X0+0k3YtC7wtrKGdba+hn0UtfoEXF+RFxT/zwb+A7wXrnyJPVa2Wv09cCvIuIc4BDg31qdtksa\nvK6curfdiKfuXWFt5QxrbUN/6i7pwGLQpQwYdCkDBl3KgEGXMjCdr8BmYeXK1u/tXHbZZYXLbt++\nvbD/888/L+x/6KGHvtK2ePHi/Z8/+OCDlstu27atcN3Ki0d0KQMGXcqAQZcyYNClDBh0KQMGXcqA\nQZcy4NtrTZpre+utt1rOO3fu3D5U9BeVSqXhp4c+/fTTlvO++uqrLft6YdGiRWzZsqWv22zl3Xff\nbZg+99xzWbduHQC33HJL4bIvvvhiz+pq5ttrkrrKoEsZMOhSBgy6lAGDLmXAoEsZMOhSBnyO3qS5\ntqVLl7acd8GCBYXreu211wr7TzzxxML+U045pWH6ggsu4MEHH9w/PTIy0nLZOXPmFK77nXfeKew/\n5phjCvubNT/jL7J3797C/g8//LCw/+ijj+64Lmis7fbbby+c95prrpnSuqfD5+iSusqgSxkw6FIG\nDLqUAYMuZcCgSxkw6FIGfI7e5ECq7bDDDms570knnVS4rq1btxb2n3rqqVOqbePGjSxbtqyjedv9\nnv0bb7xR2N/u+wmHH354w/TE5+hXXHFF4bL33ntvYX839fM5ekcDOEREFXgcuCOldHdEHAM8AMwA\n3gcuTCnt7kaxkrqv7al7RMwC7gI2TWi+CbgnpbQE2AZc0pvyJHVDJ9fou4HlwMTxhUaA9fXPTwCd\nnbNJGoiOr9Ej4gbgo/qp+46U0lH19hOAB1JKf99q2bGxsVq1Wu1GvZJam941etmV7zN//vyG6QPp\nhtcw8WbcOG/GtV5fK2Ufr+2KiJn1z3NoPK2XNGTKBn0jsKL+eQXwVHfKkdQLba/RI2IhcBswF9gD\nvAecD9wPfAN4G7g4pbSn5UZ8jt4VudS2YsWKwv61a9cW9o+NjTVML1iwgFdeeQWA008/vXDZnTt3\ndlBhdwzVc/SU0lbG77I3+9E0apLUR34FVsqAQZcyYNClDBh0KQMGXcqAr6k2sbZyplLbUUcdVdg/\nOjo6reVXrlzZMP3II4/sb3v00Uc7qLA//LlnSV1l0KUMGHQpAwZdyoBBlzJg0KUMGHQpA934hRlp\nStr9ysuRRx5Z2P/JJ58U9qeUOmrLiUd0KQMGXcqAQZcyYNClDBh0KQMGXcqAQZcy4PvoTaytnOba\nTjvttJbzPvPMM4XrOvjggwv7R0ZGCvs3b95cWNuw8H10SV1l0KUMGHQpAwZdyoBBlzJg0KUMGHQp\nA76Prp5Yvnx5y752z8k3bdpU2L9ly5ZSNeWso6BHRBV4HLgjpXR3RNwPLAQ+rs9ya0rp170pUdJ0\ntQ16RMwC7gKa/ze7OqX0ZE+qktRVnVyj7waWA9t7XIukHun4u+4RcQPw0YRT99nAIcAO4MqU0ket\nlh0bG6tVq9XpVyupSMvvupe9GfcA8HFK6aWIuBa4Abiy1czz589vmB7WlwzA2spqrm3NmjUt5129\nenXhutrdjCu60QewZ8+ewtqGRQ9eamnZVyroKaWJf4n1wL1l1iOpP0o9R4+IRyPi+PrkCDDWtYok\ndV0nd90XArcBc4E9EbGS8bvwD0fEn4FdwMW9LFLDZ+bMmYVtZ555Zstlv/jii8J1X3/99YX9zafm\naq9t0FNKWxk/ajcbnhHlJRXyK7BSBgy6lAGDLmXAoEsZMOhSBnxNVaWsWrWqsO3kk09uuexTTz1V\nuO7nnnuufGGalEd0KQMGXcqAQZcyYNClDBh0KQMGXcqAQZcy4LDJTaxt3FlnnVXY/9hjjzVMH3TQ\nQezdu3f/9GeffdZy2aJXWAGef/75Dirs3LD+TR02WVJXGXQpAwZdyoBBlzJg0KUMGHQpAwZdyoDv\no2fqiCOOKOy/8847C/tnzJhR2LZhw4aWy3b7Obna84guZcCgSxkw6FIGDLqUAYMuZcCgSxkw6FIG\nfB+9ydeltsmec0/U7ln2woULC/vffPPNhul58+axbdu2/dNF75w3L9trw/o37ef76B19YSYibgGW\n1Of/GfAC8AAwA3gfuDCltHv6pUrqhban7hFxOlBNKS0CzgT+A7gJuCeltATYBlzS0yolTUsn1+ib\ngXPrn/8AzAJGgPX1tieAZV2vTFLXtD11Tyl9Cez7AbBLgQ3AGRNO1XcARxetY3R0lGq12tDWj3sD\nZVlbe/PmzStsm3i9PgyGZb8161ddHb/UEhHnMB70HwO/m9DV9m7C/PnzG6aH9eYIfH1q82bcXwzr\n37QHN+Na9nX0eC0izgB+CvxTSumPwK6ImFnvngNsn26Rknqn7RE9Ir4F3AosSyntrDdvBFYAD9b/\nWzwOrvruhBNOKOxvd8Ru5+qrr26YXr9+fUNbv4/aKtbJqft5wLeBtRGxr+0i4OcR8a/A28Ave1Oe\npG7o5GbcfcB9k3T9qPvlSOoFvwIrZcCgSxkw6FIGDLqUAYMuZcCfez6AHXfccS37nn766Wmte9Wq\nVYX9Tz75ZEdtGg4e0aUMGHQpAwZdyoBBlzJg0KUMGHQpAwZdyoDP0Q9gl19+ecu+Y489dlrrfvbZ\nZwv7J/s1k2H9uSZ5RJeyYNClDBh0KQMGXcqAQZcyYNClDBh0KQM+Rx9iixcvLmy76qqr+lmODmAe\n0aUMGHQpAwZdyoBBlzJg0KUMGHQpAwZdykBHz9Ej4hZgSX3+nwH/AiwEPq7PcmtK6dc9qTBjS5Ys\nKWw79NBDS6+73fjlu3btKr1uDZ+2QY+I04FqSmlRRBwB/A/wDLA6peQv9ksHgE6O6JuB39Y//wGY\nBczoWUWSuq4ylZ//iYjLGT+F/xKYDRwC7ACuTCl91Gq5sbGxWrVanWapktqotOzoNOgRcQ5wHfBj\n4O+Aj1NKL0XEtcDfppSubLmRSqVhI7VajUqlZU0DNUy1rV69umH65ptv5rrrrts/vWbNmtLrbneN\nfvbZZxf2v/766w3Tw7Tfmg1rbd2uq1artVxZpzfjzgB+CpyZUvojsGlC93rg3mlVKKmn2j5ei4hv\nAbcC/5xS2llvezQijq/PMgKM9axCSdPWyRH9PODbwNqI2Nf2C+DhiPgzsAu4uDflqayXX365sH/p\n0qWF/Tt37uxmORqwtkFPKd0H3DdJ1y+7X46kXvCbcVIGDLqUAYMuZcCgSxkw6FIGDLqUgSl91730\nRvwKbFdYWznDWls/vwLrEV3KgEGXMmDQpQwYdCkDBl3KgEGXMmDQpQz05Tm6pMHyiC5lwKBLGTDo\nUgYMupQBgy5lwKBLGTDoUgY6GqmlmyLiDuAHQA34SUrphX7XMJmIGAHWAa/Wm0ZTSlcNriKIiCrw\nOHBHSunuiDgGeIDxQS7fBy5MKe0ektruZ0iG0p5kmO8XGIL9Nsjhx/sa9Ij4IfC9+hDMJwL/BSzq\nZw1tPJtSWjnoIgAiYhZwF43DX90E3JNSWhcRNwOXMIDhsFrUBkMwlHaLYb43MeD9Nujhx/t96r4U\neAwgpfQacFhEfLPPNRwodgPLge0T2kYYH+sO4AlgWZ9r2mey2obFZuDc+ud9w3yPMPj9NlldfRt+\nvN+n7rOBrROmP6y3/anPdbTy/YhYDxwO3JhS+s2gCkkp7QX2ThgGC2DWhFPOHcDRfS+MlrUBXBkR\nV9PBUNo9rO1L4LP65KXABuCMQe+3FnV9SZ/22aBvxg3TD3n9DrgROAe4CPjPiDhksCUVGqZ9B+PX\nwNemlP4ReAm4YZDF1If5vhRoHs57oPutqa6+7bN+H9G3M34E3+e7jN8cGbiU0nvAw/XJNyPiA2AO\n8PvBVfUVuyJiZkrpfxmvbWhOnVNKQzOUdvMw3xExFPttkMOP9/uI/jSwEiAiTgG2p5Q+7XMNk4qI\n8yPimvrn2cB3gPcGW9VXbARW1D+vAJ4aYC0NhmUo7cmG+WYI9tughx/v+2uqEfHvwD8A/wdckVIq\nHt+3TyLir4FfAX8DHML4NfqGAdazELgNmAvsYfx/OucD9wPfAN4GLk4p7RmS2u4CrgX2D6WdUtox\ngNouZ/wU+I0JzRcBP2eA+61FXb9g/BS+5/vM99GlDAz6ZpykPjDoUgYMupQBgy5lwKBLGTDoUgYM\nupSB/wclp6FycBcGXAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f32b5c1b198>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "予測ラベル: 7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "z0KB6IURMq5J"
      },
      "cell_type": "markdown",
      "source": [
        "無事正解できていますね。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "aNGmM0_eMq5K"
      },
      "cell_type": "markdown",
      "source": [
        "## 新しいネットワークを書いてみよう\n",
        "\n",
        "ここでは、MNISTデータセットではなくCIFAR10という32x32サイズの小さなカラー画像に10クラスのいずれかのラベルがついたデータセットを用いて、いろいろなモデルを自分で書いて試行錯誤する流れを体験してみます。\n",
        "\n",
        "| airplane | automobile | bird | cat | deer | dog | frog | horse | ship | truck |\n",
        "|:--------:|:----------:|:----:|:---:|:----:|:---:|:----:|:-----:|:----:|:-----:|\n",
        "| ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship4.png) | ![](https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck4.png) |\n",
        "\n",
        "### ネットワークの定義\n",
        "\n",
        "ここでは、さきほど試した全結合層だけからなるネットワークではなく、畳込み層を持つネットワークを定義してみます。3つの畳み込み層を持ち、2つの全結合層がそのあとに続いています。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "iabj0L8sMq5L",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class MyNet(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, n_out):\n",
        "        super(MyNet, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.conv1 = L.Convolution2D(None, 32, 3, 3, 1)\n",
        "            self.conv2 = L.Convolution2D(32, 64, 3, 3, 1)\n",
        "            self.conv3 = L.Convolution2D(64, 128, 3, 3, 1)\n",
        "            self.fc4 = L.Linear(None, 1000)\n",
        "            self.fc5 = L.Linear(1000, n_out)\n",
        "        \n",
        "    def __call__(self, x):\n",
        "        h = F.relu(self.conv1(x))\n",
        "        h = F.relu(self.conv2(h))\n",
        "        h = F.relu(self.conv3(h))\n",
        "        h = F.relu(self.fc4(h))\n",
        "        h = self.fc5(h)\n",
        "        return h"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kExP3QgLMq5O"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習\n",
        "\n",
        "ここで、あとから別のネットワークも簡単に同じ設定で訓練できるよう、`train`関数を作っておきます。これは、\n",
        "\n",
        "- ネットワークのオブジェクト\n",
        "- バッチサイズ\n",
        "- 使用するGPU ID\n",
        "- 学習を終了するエポック数\n",
        "- データセットオブジェクト\n",
        "- 学習率の初期値\n",
        "- 学習率減衰のタイミング\n",
        "\n",
        "などを渡すと、内部で`Trainer`を用いて渡されたデータセットを使ってネットワークを訓練し、学習が終了した状態のネットワークを返してくれる関数です。`Trainer.run()`が終了した後に、テストデータセットを使って評価まで行ってくれます。先程のMNISTでの例と違い、最適化手法にはMomentumSGDを用い、ExponentialShiftというExtentionを使って、指定したタイミングごとに学習率を減衰させるようにしてみます。\n",
        "\n",
        "また、ここでは`cifar.get_cifar10()`が返す学習用データセットのうち9割のデータを`train`、残りの1割を`valid`として使うようにしています。\n",
        "\n",
        "この`train`関数を用いて、上で定義した`MyModel`モデルを訓練してみます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "NEvyuq1TMq5O",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import cifar\n",
        "\n",
        "\n",
        "def train(network_object, batchsize=128, gpu_id=0, max_epoch=20, train_dataset=None, valid_dataset=None, test_dataset=None, postfix='', base_lr=0.01, lr_decay=None):\n",
        "\n",
        "    # 1. Dataset\n",
        "    if train_dataset is None and valid_dataset is None and test_dataset is None:\n",
        "        train_val, test = cifar.get_cifar10()\n",
        "        train_size = int(len(train_val) * 0.9)\n",
        "        train, valid = split_dataset_random(train_val, train_size, seed=0)\n",
        "    else:\n",
        "        train, valid, test = train_dataset, valid_dataset, test_dataset\n",
        "\n",
        "    # 2. Iterator\n",
        "    train_iter = iterators.MultiprocessIterator(train, batchsize)\n",
        "    valid_iter = iterators.MultiprocessIterator(valid, batchsize, False, False)\n",
        "\n",
        "    # 3. Model\n",
        "    net = L.Classifier(network_object)\n",
        "\n",
        "    # 4. Optimizer\n",
        "    optimizer = optimizers.MomentumSGD(lr=base_lr).setup(net)\n",
        "    optimizer.add_hook(chainer.optimizer.WeightDecay(0.0005))\n",
        "\n",
        "    # 5. Updater\n",
        "    updater = training.StandardUpdater(train_iter, optimizer, device=gpu_id)\n",
        "\n",
        "    # 6. Trainer\n",
        "    trainer = training.Trainer(updater, (max_epoch, 'epoch'), out='{}_cifar10_{}result'.format(network_object.__class__.__name__, postfix))\n",
        "    \n",
        "    # 7. Trainer extensions\n",
        "    trainer.extend(extensions.LogReport())\n",
        "    trainer.extend(extensions.observe_lr())\n",
        "    trainer.extend(extensions.Evaluator(valid_iter, net, device=gpu_id), name='val')\n",
        "    trainer.extend(extensions.PrintReport(['epoch', 'main/loss', 'main/accuracy', 'val/main/loss', 'val/main/accuracy', 'elapsed_time', 'lr']))\n",
        "    trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], x_key='epoch', file_name='loss.png'))\n",
        "    trainer.extend(extensions.PlotReport(['main/accuracy', 'val/main/accuracy'], x_key='epoch', file_name='accuracy.png'))\n",
        "    if lr_decay is not None:\n",
        "        trainer.extend(extensions.ExponentialShift('lr', 0.1), trigger=lr_decay)\n",
        "    trainer.run()\n",
        "    del trainer\n",
        "    \n",
        "    # 8. Evaluation\n",
        "    test_iter = iterators.MultiprocessIterator(test, batchsize, False, False)\n",
        "    test_evaluator = extensions.Evaluator(test_iter, net, device=gpu_id)\n",
        "    results = test_evaluator()\n",
        "    print('Test accuracy:', results['main/accuracy'])\n",
        "    \n",
        "    return net"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kURPNSFjMq5S",
        "outputId": "d23b6866-46de-4864-bf86-1b658897aad3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        }
      },
      "cell_type": "code",
      "source": [
        "net = train(MyNet(10), gpu_id=0)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz...\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           1.92573     0.304932       1.72192        0.398633           10.125        0.01        \n",
            "\u001b[J2           1.60849     0.42314        1.5291         0.461328           19.6319       0.01        \n",
            "\u001b[J3           1.47232     0.470553       1.47034        0.480664           28.9358       0.01        \n",
            "\u001b[J4           1.39247     0.499445       1.39101        0.498047           38.6087       0.01        \n",
            "\u001b[J5           1.32885     0.526108       1.37906        0.507812           47.9753       0.01        \n",
            "\u001b[J6           1.26878     0.546564       1.35942        0.516797           57.4018       0.01        \n",
            "\u001b[J7           1.21489     0.566239       1.25896        0.561328           66.783        0.01        \n",
            "\u001b[J8           1.16632     0.583141       1.23951        0.562305           76.1565       0.01        \n",
            "\u001b[J9           1.12348     0.600963       1.24492        0.562695           85.7787       0.01        \n",
            "\u001b[J10          1.07204     0.619346       1.21256        0.569141           95.191        0.01        \n",
            "\u001b[J11          1.02991     0.63643        1.18124        0.580664           104.553       0.01        \n",
            "\u001b[J12          0.982722    0.651286       1.20387        0.573438           113.922       0.01        \n",
            "\u001b[J13          0.938406    0.667125       1.1575         0.596484           123.376       0.01        \n",
            "\u001b[J14          0.899804    0.681802       1.2115         0.57793            132.89        0.01        \n",
            "\u001b[J15          0.857709    0.695978       1.19967        0.583203           142.33        0.01        \n",
            "\u001b[J16          0.809218    0.713653       1.1955         0.589648           151.748       0.01        \n",
            "\u001b[J17          0.764581    0.730824       1.19622        0.591016           161.299       0.01        \n",
            "\u001b[J18          0.719728    0.746183       1.20772        0.584766           170.731       0.01        \n",
            "\u001b[J19          0.665787    0.766026       1.21677        0.600781           180.132       0.01        \n",
            "\u001b[J20          0.617204    0.784846       1.22176        0.600586           189.628       0.01        \n",
            "Test accuracy: 0.60739714\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "cXSoxEcvMq5W"
      },
      "cell_type": "markdown",
      "source": [
        "学習が20エポックまで終わりました。ロスと精度のプロットを見てみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "LsjyDJSPMq5Y",
        "outputId": "77146942-c0cb-4b08-d757-73f08bdbaf85",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='MyNet_cifar10_result/loss.png')"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xHuqlhrUMq5b",
        "outputId": "6ea38738-c123-41f0-8736-05da60f144b7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='MyNet_cifar10_result/accuracy.png')"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nhV//+tcdVt8Pf1cSEhK61fdPegmjF0pJSTF++ctfGoZhGKWlpcbll1/ebP2MGTOMqqqqLqisydat\nW43f/OY3Z11/5ZVXGrm5uYbdbjduueUW4/Dhw51YXXPbtm0zHn300WbLJk6c2CW1VFdXGwsXLjQe\nfvhh48033zQMwzCWLFlirFmzxjAMw3j++eeNt99+u9k+27ZtM+666y7DMAzjyJEjxk033dSp9T34\n4IPGZ599ZhiGYbz11lvG008/3Wyftr4LHV3fH/7wB+Prr78+6z5d/fmdacmSJUZqamqzZR9++KHx\n1FNPdVhNZ2rtd6U7ff+k9+iVTfETJkzghRdeAMDPz4/a2lrsdnsXV3V+srKy8Pf3JyIiArPZzOWX\nX05KSkqX1fPXv/6Ve+65p8te/0zu7u6sXLmS0NBQ57Jt27Y5ZxycMWNGi88qJSWFpKQkAOLi4qio\nqKCqqqrT6lu2bBlz5swBICAggPLy8g557fPRWn1t6erP77SjR49SWVnZpWe7rf2udKfvn/QevTLY\nLRYLXl5eAHzwwQdMmzatRVPxsmXLuOWWW3juuecwumBwviNHjvCrX/2KW265hc2bNzuXFxUVERgY\n6HweGBhIUVFRp9cHkJaWRkRERLOmY4CGhgbuv/9+FixYwOuvv95p9VitVvr06dNsWW1trbPpMygo\nqMVnVVxcTEBAgPN5R36erdXn5eWFxWLBbrfzzjvvcM0117TY72zfhc6oD+Ctt97i9ttv57777qO0\ntLTZuq7+/E77v//7PxYuXNjquu3bt3PHHXfw05/+lP3793dIbdD670p3+v5J79Frr7EDfPXVV3zw\nwQe89tprzZYvXryYqVOn4u/vz6JFi1i7di1z587ttLr69+/Pvffey5VXXklWVha33347X3zxRYtr\nc13tgw8+4Lrrrmux/MEHH+RHP/oRJpOJhQsXMn78eBISErqgwubO5w+0rvgjzm638+CDDzJp0iQm\nT57cbF1Xfxfmz59P3759GT58OK+88govvfQS//Ef/3HW7bvi82toaGDXrl08+uijLdaNHj2awMBA\npk+fzp49e/jDH/7Ap59+2qH1nPm7cmbfne76/RPX0yvP2AE2btzI3/72N1auXImvb/N5jq+99lqC\ngoKwWq1MmzaNQ4cOdWptYWFhzJs3D5PJRL9+/QgODqagoACA0NBQiouLndsWFBRcUNNpe9q2bRtj\nx45tsfyWW27B29sbLy8vJk2a1Omf35m8vLyoq6sDWv+sfvh5FhYWtmiB6GgPPfQQsbGx3HvvvS3W\nneu70BkmT57M8OHDgaZOpT/8d9kdPr8dO3actQk+Li7O2dlv7NixlJaWduhltx/+rvSE75+4nl4Z\n7JWVlTzzzDO8/PLLzt6+Z6674447aGhoAJp+NE73SO4sn3zyCa+++irQ1PReUlLi7JUfHR1NVVUV\n2dnZ2Gw21q9fT2JiYqfWB00/Ut7e3i3OHI8ePcr999+PYRjYbDZ2797d6Z/fmaZMmcLatWsB+OKL\nL5g6dWqz9YmJic716enphIaG4uPj02n1ffLJJ7i5ubF48eKzrj/bd6Ez/OY3vyErKwto+kPuh/8u\nu/rzA9i7dy/Dhg1rdd3KlStZvXo10NSjPjAwsMPu0Gjtd6W7f//ENfXKpvg1a9ZQVlbGb3/7W+ey\nSy+9lKFDhzJr1iymTZvGzTffjIeHByNGjOjUZnhoOjN64IEHWLduHY2NjTz66KOsXr0aX19fZs2a\nxaOPPsr9998PwLx58xgwYECn1gctr/W/8sorTJgwgbFjxxIeHs6Pf/xjzGYzM2fO7LQOTfv27ePp\np58mJycHq9XK2rVree6551iyZAmrVq0iMjKSa6+9FoD77ruPJ598knHjxhEfH8+CBQswmUwsW7as\nU+srKSnBw8OD2267DWg6w3z00Ued9bX2XeioZvjW6lu4cCG//e1v8fT0xMvLiyeffBLoPp/fiy++\nSFFRkfN2ttN+/etf89///d9cc801/P73v+fdd9/FZrOxfPnyDquvtd+Vp556iocffrhbfP+k99C0\nrSIiIi6kVzbFi4iIuCoFu4iIiAtRsIuIiLgQBbuIiIgLUbCLiIi4EAW7yAVITk7mgQce6OoyRETO\nSsEuIiLiQnrlADXi+t58803++c9/YrfbGThwIL/85S+5++67mTZtGgcOHADgz3/+M2FhYWzYsIG/\n/vWv9OnTB09PT5544gnCwsJITU1lxYoVuLm54e/vz9NPPw1AVVUVDzzwABkZGURGRvLSSy9hMpm6\n8u2KiDjpjF1cTlpaGl9++SVvv/02q1atwtfXly1btpCVlcX111/PO++8w8SJE3nttdeora3l4Ycf\n5sUXX+TNN99k2rRp/Od//icAv//973niiSd46623mDBhAt988w3QNNvaE088QXJyMocPHyY9Pb0r\n366ISDM6YxeXs23bNk6cOMHtt98OQE1NDQUFBfTt25eRI0cCMG7cON544w2OHz9OUFAQ4eHhAEyc\nOJF3332X0tJSTp48yZAhQwD42c9+BjRdY09ISMDT0xNomqSlsrKyk9+hiMjZKdjF5bi7uzNz5sxm\n04tmZ2dz/fXXO58bhoHJZGrRhH7m8rONtvzDSUQ0KrOIdCdqiheXM27cOL799luqq6sBePvttykq\nKqKiooL9+/cDsHv3boYOHUr//v0pKSkhNzcXgJSUFEaPHk1AQAB9+/YlLS0NgNdee4233367a96Q\niMgF0Bm7uJyEhARuvfVWbrvtNjw8PAgNDeXSSy8lLCyM5ORknnrqKQzD4E9/+hN9+vRh+fLl3Hff\nfbi7u+Pl5eWcAezZZ59lxYoVWK1WfH19efbZZ/niiy+6+N2JiJybZneTXiE7O5uf/OQnfPvtt11d\niohIh1JTvIiIiAvRGbuIiIgL0Rm7iIiIC1Gwi4iIuBAFu4iIiAtRsIuIiLgQBbuIiIgLUbCLiIi4\nkP8P9QfzDKo1jhAAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Wpz2mcvpMq5g"
      },
      "cell_type": "markdown",
      "source": [
        "学習データでの精度（`main/accuracy`)は77%程度まで到達していますが、テストデータでのロス（`val/main/loss`）は途中から下げ止まり、精度（`val/main/accuracy`）も60%前後で頭打ちになってしまっています。表示されたログの最後の行を見ると、テストデータでの精度も同様に60%程度だったようです。学習データでは良い精度が出ているが、 テストデータでは精度が良くないということなので、**モデルが学習データにオーバーフィッティングしている**と思われます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "sSB6NmM_Mq5h"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習済みネットワークを使った予測\n",
        "\n",
        "テスト精度は60%程度でしたが、試しにこの学習済みネットワークを使っていくつかのテスト画像を分類させてみましょう。あとで使いまわせるように`predict`関数を作っておきます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "cZVANymqMq5h",
        "outputId": "f8e41b6b-d982-4106-c139-134094ee6f1a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1432
        }
      },
      "cell_type": "code",
      "source": [
        "cls_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',\n",
        "             'dog', 'frog', 'horse', 'ship', 'truck']\n",
        "\n",
        "def predict(net, image_id):\n",
        "    _, test = cifar.get_cifar10()\n",
        "    x, t = test[image_id]\n",
        "    net.to_cpu()\n",
        "    with chainer.using_config('train', False), chainer.using_config('enable_backprop', False):\n",
        "        y = net.predictor(x[None, ...]).data.argmax(axis=1)[0]\n",
        "    print('predicted_label:', cls_names[y])\n",
        "    print('answer:', cls_names[t])\n",
        "\n",
        "    plt.imshow(x.transpose(1, 2, 0))\n",
        "    plt.show()\n",
        "\n",
        "for i in range(10, 15):\n",
        "    predict(net, i)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "predicted_label: airplane\n",
            "answer: airplane\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f32b0ff56a0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: automobile\n",
            "answer: truck\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAFV0RYkA/w9P2kwTH2qvqAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f32b10002e8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: dog\n",
            "answer: dog\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRVeUGPD/AEp0BJLEAuA/AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f32b0f94320>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: horse\n",
            "answer: horse\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nxID/D74/bcoGU5g9AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f32b0dab780>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "predicted_label: truck\n",
            "answer: truck\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nQBVdUSLA/wPjOFvUs4XLvQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f32b0d976a0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "X1IJmNiHMq5l"
      },
      "cell_type": "markdown",
      "source": [
        "うまく分類できているものもあれば、そうでないものもありました。ネットワークの学習に使用したデータセット上ではほぼ百発百中で正解できるとしても、未知のデータ、すなわちテストデータセットにある画像に対して高精度な予測ができなければ、意味がありません[^NN]。テストデータでの精度は、モデルの**汎化性能**に関係していると言われます。\n",
        "\n",
        "どうすれば高い汎化性能を持つネットワークを設計し、学習することができるでしょうか？（そんなことが簡単に分かったら苦労しない。）"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "l6-aXDxhMq5l"
      },
      "cell_type": "markdown",
      "source": [
        "### もっと深いネットワークを定義してみよう\n",
        "\n",
        "では、上のネットワークよりもよりたくさんの層を持つネットワークを定義してみましょう。ここでは、1層の畳み込みネットワークを`ConvBlock`、1層の全結合ネットワークを`LinearBlock`として定義し、これをたくさんシーケンシャルに積み重ねる方法で大きなネットワークを定義してみます。\n",
        "\n",
        "#### 構成要素を定義する\n",
        "\n",
        "まず、今目指している大きなネットワークの構成要素となる`ConvBlock`と`LinearBlock`を定義してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kokxUuBUMq5m",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class ConvBlock(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, n_ch, pool_drop=False):\n",
        "        w = chainer.initializers.HeNormal()\n",
        "        super(ConvBlock, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.conv = L.Convolution2D(None, n_ch, 3, 1, 1, nobias=True, initialW=w)\n",
        "            self.bn = L.BatchNormalization(n_ch)\n",
        "        self.pool_drop = pool_drop\n",
        "        \n",
        "    def __call__(self, x):\n",
        "        h = F.relu(self.bn(self.conv(x)))\n",
        "        if self.pool_drop:\n",
        "            h = F.max_pooling_2d(h, 2, 2)\n",
        "            h = F.dropout(h, ratio=0.25)\n",
        "        return h\n",
        "    \n",
        "class LinearBlock(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, drop=False):\n",
        "        w = chainer.initializers.HeNormal()\n",
        "        super(LinearBlock, self).__init__()\n",
        "        with self.init_scope():\n",
        "            self.fc = L.Linear(None, 1024, initialW=w)\n",
        "        self.drop = drop\n",
        "        \n",
        "    def __call__(self, x):\n",
        "        h = F.relu(self.fc(x))\n",
        "        if self.drop:\n",
        "            h = F.dropout(h)\n",
        "        return h"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7PWQmRE4Mq5o"
      },
      "cell_type": "markdown",
      "source": [
        "`ConvBlock`は`Chain`を継承した小さなネットワークとして定義されています。これは一つの畳み込み層とBatch Normalization層をパラメータありで持っているので、コンストラクタ内でこれらの登録を行っています。`__call__`メソッドでは、これらにデータを渡しつつ、活性化関数ReLUを適用して、さらに`pool_drop`がコンストラクタに`True`で渡されているときはMax PoolingとDropoutという関数を適用するようになっています。\n",
        "\n",
        "Chainerでは、Pythonを使って書いたforward計算のコード自体がネットワークの構造を表します。すなわち、実行時にデータがどのような層をくぐっていったか、ということがネットワークそのものを定義します。これによって、上記のような分岐などを含むネットワークも簡単に書け、柔軟かつシンプルで可読性の高いネットワーク定義が可能になります。これが**Define-by-Run**と呼ばれる特徴です。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7KpJgoXQMq5p"
      },
      "cell_type": "markdown",
      "source": [
        "#### 大きなネットワークの定義\n",
        "\n",
        "次に、これらの小さなネットワークを構成要素として積み重ねて、大きなネットワークを定義してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "2lMV0pumMq5q",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class DeepCNN(chainer.ChainList):\n",
        "\n",
        "    def __init__(self, n_output):\n",
        "        super(DeepCNN, self).__init__(\n",
        "            ConvBlock(64),\n",
        "            ConvBlock(64, True),\n",
        "            ConvBlock(128),\n",
        "            ConvBlock(128, True),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256),\n",
        "            ConvBlock(256, True),\n",
        "            LinearBlock(),\n",
        "            LinearBlock(),\n",
        "            L.Linear(None, n_output)\n",
        "        )\n",
        "\n",
        "    def __call__(self, x):\n",
        "        for f in self:\n",
        "            x = f(x)\n",
        "        return x"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Wywy-_DVMq5s"
      },
      "cell_type": "markdown",
      "source": [
        "ここで利用しているのが、`ChainList`というクラスです。このクラスは`Chain`を継承したクラスで、いくつもの`Link`や`Chain`を順次呼び出していくようなネットワークを定義するときに便利です。`ChainList`を継承して定義されるモデルは、親クラスのコンストラクタを呼び出す際に**キーワード引数ではなく普通の引数として**`Link`もしくは`Chain`オブジェクトを渡すことができます。そしてこれらは、`self.children()`メソッドによって**登録した順番に**取り出すことができます。`ChainList`自体もPythonのイテレータとして機能するので、例えば`ChainList`を継承したクラスの中で`for f in self:...`といったことも可能です。\n",
        "\n",
        "この特徴を使うと、forward計算の記述が簡単になります。`self.children()`が返す構成要素のリストから、for文で構成要素を順番に取り出していき、そもそもの入力である`x`に取り出してきた部分ネットワークの計算を適用して、この出力で`x`を置き換えるということを順番に行っていけば、一連の`Link`または`Chain`を、コンストラクタで親クラスに登録した順番と同じ順番で適用していくことができます。そのため、シーケンシャルな部分ネットワークの適用によって表される大きなネットワークを定義するのに重宝します。\n",
        "\n",
        "それでは、学習を回してみます。今回はパラメータ数も多いので、学習を停止するエポック数を100に設定します。また、学習率を0.1から始めて、30エポックごとに10分の1にするように設定してみます。\n",
        "\n",
        "#### TIPS\n",
        "\n",
        "今回は多くの畳込み層を使う大きなネットワークを使うので、Chainerが用意してくれているcuDNNのautotune機能を有効にしてみます。やり方は簡単で、以下の二行を事前に実行しておくだけです。\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "jI4IbE9WMq5t",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "chainer.cuda.set_max_workspace_size(512 * 1024 * 1024)\n",
        "chainer.config.autotune = True"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "GLFm2waBMq5x"
      },
      "cell_type": "markdown",
      "source": [
        "それでは、今度こそ学習を開始してみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "kAiXcG8jMq5y",
        "outputId": "3504f726-72b8-4f1f-a144-5eb5a2875a9e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1751
        }
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, base_lr=0.1, lr_decay=(30, 'epoch'))"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           2.62197     0.14573        2.21733        0.169922           27.7069       0.1         \n",
            "\u001b[J2           2.10617     0.212979       2.00481        0.261328           54.0449       0.1         \n",
            "\u001b[J3           1.88634     0.284054       1.78054        0.31582            80.3558       0.1         \n",
            "\u001b[J4           1.7315      0.346302       1.65524        0.382422           106.743       0.1         \n",
            "\u001b[J5           1.57412     0.418692       1.54102        0.434961           133.252       0.1         \n",
            "\u001b[J6           1.36374     0.501221       1.389          0.492969           159.601       0.1         \n",
            "\u001b[J7           1.17911     0.577123       1.21575        0.58125            185.889       0.1         \n",
            "\u001b[J8           1.06179     0.624556       1.23324        0.575391           212.312       0.1         \n",
            "\u001b[J9           0.953693    0.664173       1.0595         0.63457            238.75        0.1         \n",
            "\u001b[J10          0.876401    0.693554       1.04007        0.660742           265.13        0.1         \n",
            "\u001b[J11          0.810982    0.721857       0.724226       0.748242           291.606       0.1         \n",
            "\u001b[J12          0.76701     0.737291       1.3969         0.578125           317.98        0.1         \n",
            "\u001b[J13          0.721205    0.752441       0.805076       0.735352           344.453       0.1         \n",
            "\u001b[J14          0.69059     0.765491       0.708149       0.753906           370.849       0.1         \n",
            "\u001b[J15          0.657838    0.774769       0.732216       0.750391           397.31        0.1         \n",
            "\u001b[J16          0.635093    0.785345       0.694625       0.766211           423.689       0.1         \n",
            "\u001b[J17          0.608348    0.790416       0.784326       0.745313           450.166       0.1         \n",
            "\u001b[J18          0.59125     0.799605       1.25434        0.605859           476.579       0.1         \n",
            "\u001b[J19          0.574865    0.803998       0.714913       0.766406           503.058       0.1         \n",
            "\u001b[J20          0.55925     0.811124       0.656349       0.780273           529.513       0.1         \n",
            "\u001b[J21          0.544051    0.817575       1.1551         0.648242           555.949       0.1         \n",
            "\u001b[J22          0.53717     0.817427       0.666152       0.780469           582.429       0.1         \n",
            "\u001b[J23          0.52614     0.82265        2.13534        0.50957            608.774       0.1         \n",
            "\u001b[J24          0.509146    0.827748       0.855398       0.737109           635.217       0.1         \n",
            "\u001b[J25          0.492269    0.832697       0.612051       0.792578           661.678       0.1         \n",
            "\u001b[J26          0.484122    0.83665        2.05363        0.497461           688.071       0.1         \n",
            "\u001b[J27          0.482076    0.838357       0.704507       0.783008           714.542       0.1         \n",
            "\u001b[J28          0.482861    0.838275       0.691148       0.77832            740.947       0.1         \n",
            "\u001b[J29          0.469916    0.841486       0.762406       0.750781           767.506       0.1         \n",
            "\u001b[J30          0.461287    0.843082       0.908583       0.719922           793.827       0.1         \n",
            "\u001b[J31          0.295321    0.899725       0.385955       0.871289           820.292       0.01        \n",
            "\u001b[J32          0.211532    0.927684       0.376522       0.87832            846.687       0.01        \n",
            "\u001b[J33          0.179586    0.937411       0.378527       0.880664           873.159       0.01        \n",
            "\u001b[J34          0.162789    0.942605       0.365282       0.885547           899.619       0.01        \n",
            "\u001b[J35          0.143878    0.949519       0.38214        0.885156           926.008       0.01        \n",
            "\u001b[J36          0.129639    0.955012       0.399251       0.887695           952.458       0.01        \n",
            "\u001b[J37          0.122178    0.957933       0.373664       0.892187           978.862       0.01        \n",
            "\u001b[J38          0.112851    0.960272       0.379896       0.896289           1005.33       0.01        \n",
            "\u001b[J39          0.101425    0.963408       0.40355        0.886328           1031.7        0.01        \n",
            "\u001b[J40          0.09716     0.96582        0.430833       0.886719           1058.16       0.01        \n",
            "\u001b[J41          0.0915584   0.967219       0.424853       0.889258           1084.75       0.01        \n",
            "\u001b[J42          0.0835843   0.970664       0.427704       0.89082            1111.06       0.01        \n",
            "\u001b[J43          0.080927    0.971569       0.490179       0.877148           1137.5        0.01        \n",
            "\u001b[J44          0.074437    0.974114       0.456981       0.888477           1163.85       0.01        \n",
            "\u001b[J45          0.0741897   0.975186       0.446546       0.881641           1190.24       0.01        \n",
            "\u001b[J46          0.0698716   0.975205       0.437825       0.890039           1216.59       0.01        \n",
            "\u001b[J47          0.0682615   0.976474       0.472265       0.88125            1242.99       0.01        \n",
            "\u001b[J48          0.0675032   0.976785       0.451363       0.883203           1269.34       0.01        \n",
            "\u001b[J49          0.0635829   0.978205       0.471126       0.880859           1295.78       0.01        \n",
            "\u001b[J50          0.0602762   0.979559       0.511736       0.878516           1322.2        0.01        \n",
            "\u001b[J51          0.0616193   0.978989       0.478706       0.885938           1348.54       0.01        \n",
            "\u001b[J52          0.0598845   0.978937       0.483767       0.880273           1374.95       0.01        \n",
            "\u001b[J53          0.0581857   0.980369       0.489204       0.884961           1401.27       0.01        \n",
            "\u001b[J54          0.0555974   0.980935       0.498003       0.881836           1427.66       0.01        \n",
            "\u001b[J55          0.0588859   0.980057       0.4864         0.880469           1454.2        0.01        \n",
            "\u001b[J56          0.0548843   0.981112       0.486644       0.882031           1480.62       0.01        \n",
            "\u001b[J57          0.0584556   0.979759       0.516933       0.870703           1507.02       0.01        \n",
            "\u001b[J58          0.0576701   0.98088        0.534598       0.87832            1533.36       0.01        \n",
            "\u001b[J59          0.0542698   0.981623       0.467223       0.886328           1559.8        0.01        \n",
            "\u001b[J60          0.0571885   0.980836       0.48413        0.875781           1586.15       0.01        \n",
            "\u001b[J61          0.0372654   0.987948       0.431431       0.893945           1612.57       0.001       \n",
            "\u001b[J62          0.0224688   0.993367       0.43882        0.894336           1638.94       0.001       \n",
            "\u001b[J63          0.0193304   0.994984       0.442938       0.895898           1665.36       0.001       \n",
            "\u001b[J64          0.0161223   0.995749       0.446272       0.896484           1691.73       0.001       \n",
            "\u001b[J65          0.0145515   0.996116       0.455866       0.895703           1718.11       0.001       \n",
            "\u001b[J66          0.0140637   0.996205       0.457365       0.899414           1744.95       0.001       \n",
            "\u001b[J67          0.0135737   0.99606        0.45892        0.897656           1772.22       0.001       \n",
            "\u001b[J68          0.0124771   0.996293       0.459063       0.896484           1799.45       0.001       \n",
            "\u001b[J69          0.0105605   0.997285       0.468828       0.896875           1825.83       0.001       \n",
            "\u001b[J70          0.0111601   0.997115       0.473455       0.896875           1852.27       0.001       \n",
            "\u001b[J71          0.010745    0.996862       0.47303        0.898438           1878.65       0.001       \n",
            "\u001b[J72          0.0102816   0.997248       0.473869       0.898633           1905.09       0.001       \n",
            "\u001b[J73          0.0101893   0.997004       0.476754       0.898242           1931.78       0.001       \n",
            "\u001b[J74          0.00944511  0.997418       0.476484       0.898438           1958.15       0.001       \n",
            "\u001b[J75          0.00828196  0.997803       0.477065       0.901563           1984.57       0.001       \n",
            "\u001b[J76          0.00857228  0.997663       0.477133       0.899414           2010.94       0.001       \n",
            "\u001b[J77          0.00846836  0.997758       0.486379       0.897266           2037.3        0.001       \n",
            "\u001b[J78          0.00763384  0.998108       0.482611       0.901563           2063.69       0.001       \n",
            "\u001b[J79          0.00811885  0.997781       0.480579       0.901953           2090.13       0.001       \n",
            "\u001b[J80          0.00749258  0.998041       0.486507       0.900977           2116.49       0.001       \n",
            "\u001b[J81          0.00756322  0.997803       0.49213        0.900586           2142.93       0.001       \n",
            "\u001b[J82          0.00742481  0.998091       0.483113       0.901563           2169.38       0.001       \n",
            "\u001b[J83          0.00696963  0.998153       0.488844       0.899414           2195.74       0.001       \n",
            "\u001b[J84          0.00666804  0.99818        0.491779       0.902539           2222.17       0.001       \n",
            "\u001b[J85          0.00673255  0.998242       0.490899       0.900391           2248.51       0.001       \n",
            "\u001b[J86          0.00631279  0.998624       0.490123       0.901172           2274.93       0.001       \n",
            "\u001b[J87          0.00739336  0.998175       0.493166       0.900391           2301.28       0.001       \n",
            "\u001b[J88          0.00705347  0.997847       0.493653       0.901367           2327.7        0.001       \n",
            "\u001b[J89          0.00665648  0.998491       0.497778       0.901172           2354.04       0.001       \n",
            "\u001b[J90          0.00600651  0.998442       0.499631       0.900977           2380.39       0.001       \n",
            "\u001b[J91          0.00624798  0.998202       0.496736       0.902734           2422.4        0.0001      \n",
            "\u001b[J92          0.00582731  0.998709       0.496134       0.901758           2451.4        0.0001      \n",
            "\u001b[J93          0.00609582  0.998469       0.497172       0.901758           2477.8        0.0001      \n",
            "\u001b[J94          0.00595012  0.998442       0.496889       0.901563           2504.4        0.0001      \n",
            "\u001b[J95          0.00573971  0.998469       0.494115       0.90293            2530.82       0.0001      \n",
            "\u001b[J96          0.00557446  0.998576       0.496487       0.902148           2557.18       0.0001      \n",
            "\u001b[J97          0.00551239  0.998713       0.495388       0.90293            2583.59       0.0001      \n",
            "\u001b[J98          0.00519373  0.998779       0.49366        0.902539           2610.02       0.0001      \n",
            "\u001b[J99          0.00596793  0.998531       0.498531       0.902539           2636.39       0.0001      \n",
            "\u001b[J100         0.00537741  0.99858        0.498359       0.902539           2662.73       0.0001      \n",
            "Test accuracy: 0.89685524\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "OK1P287rMq51"
      },
      "cell_type": "markdown",
      "source": [
        "学習が終了しました。ロスカーブと精度のグラフを見てみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "W67QavgIMq52",
        "outputId": "247c6c9c-bdbe-4e49-fed1-f746a298ae29",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='DeepCNN_cifar10_result/loss.png')"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nHjlyJLt37wagpKQEh8PB2LFj+fDDD4HkvOeW4v35Tps2jU8//ZT6+nq8Xi+7du3ivPPOS3BLxZnW\nr48jXL16NR9++CGKorBy5UomTpyY6Cb1ifXr1/PII48wevTo2GO/+93vuPvuu2lsbGTo0KH89re/\nxWw2J7CVfeeRRx6hoDa8t9YAAAM2SURBVKCACy64gJ///OdJf89//etf2bBhAwD/9V//xZQpU5L6\nvr1eL3fddRfV1dWEQiH++7//m+zsbH75y1+i6zrTpk3jzjvvTHQze8XevXu5//77KSkpwWQykZub\ny+rVq7njjjva/fm+8cYbrF27FkVRWL58OZdffnmimy/OsH4dwEIIIUSy6rdd0EIIIUQykwAWQggh\nEkACWAghhEgACWAhhBAiASSAhRBCiASQABbiFLzwwgv85Cc/SXQzhBBJQAJYCCGESIB+uxWlEKdj\n3bp1vP7664TDYcaMGcN3vvMdbr75ZubPn8+BAwcA+P3vf09ubi7vvPMOjz76KFarFZvNxqpVq8jN\nzWX37t3cd999mM1m0tLSuP/++wHweDz85Cc/obCwkKFDh/LHP/4RRVESebtCiAFIKmCRdPbs2cO/\n/vUvnn32WdavX4/L5WLLli0UFRVx5ZVX8pe//IXzzz+fp556Cr/fz913380jjzzCunXrmD9/Pn/4\nwx8A+OlPf8qqVat45plnmDVrFu+++y4Ahw8fZtWqVbzwwgscOnSIffv2JfJ2hRADlFTAIuls376d\n48ePc8MNNwDg8/koLy8nPT2dyZMnAzBz5kyefvppjh49SlZWFnl5eQCcf/75/PWvf+XkyZPU19dz\n1llnAfDtb38biIwBT5kyBZvNBkBubi5ut/sM36EQIhlIAIukY7FYWLhwIb/85S9jjxUXF3PllVfG\nvjYMA0VR2nUdt3y8o11aNU1r9xohhDhV0gUtks7MmTN577338Hq9ADz77LNUVlZSV1fH/v37gcgR\neRMmTGDUqFFUV1dTWloKwNatW5k2bRoZGRmkp6ezZ88eAJ566imeffbZxNyQECIpSQUsks6UKVO4\n/vrrWbFiBSkpKeTk5DB79mxyc3N54YUX+N3vfodhGDz00ENYrVZ+85vfcNttt8XOJP7Nb34DwIMP\nPsh9992HyWTC5XLx4IMP8uabbyb47oQQyUJOQxKDQnFxMd/61rd47733Et0UIYQApAtaCCGESAip\ngIUQQogEkApYCCGESAAJYCGEECIBJICFEEKIBJAAFkIIIRJAAlgIIYRIgP8fO6mDIYxzhsUAAAAA\nSUVORK5CYII=\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "FnEM3DmzMq56",
        "outputId": "b4535016-f9c0-40b7-af56-ed3786a013ab",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image(filename='DeepCNN_cifar10_result/accuracy.png')"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nQmCC\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "FJ9K1MtIMq5-"
      },
      "cell_type": "markdown",
      "source": [
        "先程よりも大幅にValidationデータに対する精度が向上したことが分かります。学習率を10分の1に下げるタイミングでロスががくっと減り、精度がガクッと上がっているのが分かります。最終的に、先程60%前後だったValidationデータでの精度が、90%程度まで上がりました。また、テストデータを用いた精度も、およそ90%程度となっています。しかし最新の研究成果では97%以上まで達成されています。さらに精度を上げるには、今回行ったようなネットワークの構造自体の改良ももちろんのこと、学習データを擬似的に増やす操作（Data augmentation）や、複数のモデルの出力を一つの出力に統合する操作（Ensemble）などなど、いろいろな工夫が考えられます。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "IyOFHCvrMq5_"
      },
      "cell_type": "markdown",
      "source": [
        "## データセットクラスを書いてみよう\n",
        "\n",
        "ここでは、Chainerにすでに用意されているCIFAR10のデータを取得する機能を使って、データセットクラスを自分で書いてみます。Chainerでは、データセットを表すクラスは以下の機能を持っていることが必要とされます。\n",
        "\n",
        "- データセット内のデータ数を返す`__len__`メソッド\n",
        "- 引数として渡される`i`に対応したデータもしくはデータとラベルの組を返す`get_example`メソッド\n",
        "\n",
        "その他のデータセットに必要な機能は、`chainer.dataset.DatasetMixin`クラスを継承することで用意できます。ここでは、`DatasetMixin`クラスを継承し、Data augmentation機能のついたデータセットクラスを作成してみましょう。\n",
        "\n",
        "### NOTE\n",
        "\n",
        "自前で用意した、もしくはどこからから調達したラベル付き画像データセットを使う場合は、[`LabeledImageDataset`](https://docs.chainer.org/en/stable/reference/generated/chainer.datasets.LabeledImageDataset.html?highlight=LabeledImageDataset)というクラスが非常に便利です。雹災はドキュメントを参照してください：[`LabeledImageDataset`](https://docs.chainer.org/en/stable/reference/generated/chainer.datasets.LabeledImageDataset.html?highlight=LabeledImageDataset)。こちらでも使っています：[Chainerでアニメキャラクターの顔画像を分類する](https://qiita.com/mitmul/items/5502ecdd2f0b444c427f)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "b-11jjDiMq6B"
      },
      "cell_type": "markdown",
      "source": [
        "### CIFAR10データセットクラスを書く"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "csErjCCTMq6C",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class CIFAR10Augmented(chainer.dataset.DatasetMixin):\n",
        "\n",
        "    def __init__(self, split='train', train_ratio=0.9):\n",
        "        train_val, test_data = cifar.get_cifar10()\n",
        "        train_size = int(len(train_val) * train_ratio)\n",
        "        train_data, valid_data = split_dataset_random(train_val, train_size, seed=0)\n",
        "        if split == 'train':\n",
        "            self.data = train_data\n",
        "        elif split == 'valid':\n",
        "            self.data = valid_data\n",
        "        elif split == 'test':\n",
        "            self.data = test_data\n",
        "        else:\n",
        "            raise ValueError(\"'split' argument should be either 'train', 'valid', or 'test'. But {} was given.\".format(split))\n",
        "\n",
        "        self.split = split\n",
        "        self.random_crop = 4\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "\n",
        "    def get_example(self, i):\n",
        "        x, t = self.data[i]\n",
        "        if self.split == 'train':\n",
        "            x = x.transpose(1, 2, 0)\n",
        "            h, w, _ = x.shape\n",
        "            x_offset = np.random.randint(self.random_crop)\n",
        "            y_offset = np.random.randint(self.random_crop)\n",
        "            x = x[y_offset:y_offset + h - self.random_crop,\n",
        "                  x_offset:x_offset + w - self.random_crop]\n",
        "            if np.random.rand() > 0.5:\n",
        "                x = np.fliplr(x)\n",
        "            x = x.transpose(2, 0, 1)\n",
        "\n",
        "        return x, t"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "x3UPCe0RMq6F"
      },
      "cell_type": "markdown",
      "source": [
        "このクラスは、CIFAR10のデータのそれぞれに対し、\n",
        "\n",
        "- 32x32の大きさの中からランダムに28x28の領域をクロップ\n",
        "- 1/2の確率で左右を反転させる\n",
        "\n",
        "という加工を行っています。こういった操作を加えることで擬似的に学習データのバリエーションを増やすと、オーバーフィッティングを抑制することに役に立つということが知られています。これらの操作以外にも、画像の色味を変化させるような変換やランダムな回転、アフィン変換など、さまざまな加工によって学習データ数を擬似的に増やす方法が提案されています。\n",
        "\n",
        "自分でデータの取得部分も書く場合は、コンストラクタに画像フォルダのパスとファイル名に対応したラベルの書かれたテキストファイルへのパスなどを渡してプロパティとして保持しておき、`get_example`メソッド内でそれぞれの画像を読み込んで対応するラベルとともに返す、という風にすれば良いことが分かります。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "vmvsVsTMMq6G"
      },
      "cell_type": "markdown",
      "source": [
        "### 作成したデータセットクラスを使って学習を行う\n",
        "\n",
        "それではさっそくこの`CIFAR10`クラスを使って学習を行ってみましょう。先程使ったのと同じ大きなネットワークを使うことで、Data augmentationの効果がどの程度あるのかを調べてみましょう。`train`関数も含め、データセットクラス以外は先程とすべて同様です。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "upvteI1eMq6G",
        "outputId": "bdadce14-66ec-465c-b71c-ed72dc5c6545",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        }
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, train_dataset=CIFAR10Augmented(), valid_dataset=CIFAR10Augmented('valid'), test_dataset=CIFAR10Augmented('test'), postfix='augmented_', base_lr=0.1, lr_decay=(30, 'epoch'))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy  elapsed_time  lr        \n",
            "\u001b[J1           2.56682     0.153187       2.13359        0.196289           24.0632       0.1         \n",
            "\u001b[J2           2.05138     0.230025       1.90262        0.281836           47.5623       0.1         \n",
            "\u001b[J3           1.79218     0.309139       1.96712        0.277148           71.081        0.1         \n",
            "\u001b[J4           1.60914     0.3926         1.88917        0.338867           94.7414       0.1         \n",
            "\u001b[J5           1.39613     0.488292       1.62739        0.42168            118.321       0.1         \n",
            "\u001b[J6           1.22909     0.559526       1.47142        0.486719           141.999       0.1         \n",
            "\u001b[J7           1.11303     0.606949       1.23411        0.564844           165.604       0.1         \n",
            "\u001b[J8           1.01412     0.64442        1.18462        0.594727           189.26        0.1         \n",
            "\u001b[J9           0.948386    0.666282       0.975078       0.667383           212.917       0.1         \n",
            "\u001b[J10          0.884442    0.697115       1.07651        0.639844           236.552       0.1         \n",
            "\u001b[J11          0.829418    0.72017        1.05697        0.640234           260.197       0.1         \n",
            "\u001b[J12          0.780194    0.736801       0.768351       0.758789           283.731       0.1         \n",
            "\u001b[J13          0.7547      0.747891       1.0645         0.672266           307.373       0.1         \n",
            "\u001b[J14          0.734805    0.754385       0.813245       0.737305           330.982       0.1         \n",
            "\u001b[J15          0.699766    0.7676         1.08377        0.650977           354.689       0.1         \n",
            "\u001b[J16          0.688398    0.769387       0.930851       0.707812           378.311       0.1         \n",
            "\u001b[J17          0.671117    0.775235       0.830368       0.726758           402.008       0.1         \n",
            "\u001b[J18          0.650716    0.781183       0.721548       0.768945           426.538       0.1         \n",
            "\u001b[J19          0.625595    0.791489       0.778948       0.759961           450.173       0.1         \n",
            "\u001b[J20          0.631865    0.789484       0.813221       0.746289           473.884       0.1         \n",
            "\u001b[J21          0.622224    0.793625       0.660799       0.787305           497.53        0.1         \n",
            "\u001b[J22          0.604823    0.799805       1.00611        0.685742           521.228       0.1         \n",
            "\u001b[J23          0.603083    0.79692        0.915312       0.708203           546.367       0.1         \n",
            "\u001b[J24          0.586976    0.804998       0.770607       0.755859           588.271       0.1         \n",
            "\u001b[J25          0.594346    0.802024       0.631696       0.778906           639.591       0.1         \n",
            "\u001b[J26          0.570544    0.810853       0.683034       0.77207            705.092       0.1         \n",
            "\u001b[J27          0.571491    0.811879       0.576799       0.814844           769.682       0.1         \n",
            "\u001b[J28          0.563136    0.81368        0.641172       0.78457            793.909       0.1         \n",
            "\u001b[J29          0.559631    0.813676       0.632602       0.789062           817.709       0.1         \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "YkL06bZDMq6I"
      },
      "cell_type": "markdown",
      "source": [
        "先程のData augmentationなしの場合は90%程度だったテスト精度が、学習データにaugmentationを施すことで92%程度まで向上させられることが分かりました。およそ2%の改善です。\n",
        "\n",
        "ロスと精度のグラフを見てみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "-ckf3ncLMq6J",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "Image(filename='DeepCNN_cifar10_augmented_result/loss.png')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "H8mCPbI5Mq6L",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "Image(filename='DeepCNN_cifar10_augmented_result/accuracy.png')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Xz4qiWP2Mq6N"
      },
      "cell_type": "markdown",
      "source": [
        "## もっと簡単にData Augmentationしよう\n",
        "\n",
        "前述のようにデータセット内の各画像についていろいろな変換を行って擬似的にデータを増やすような操作をData Augmentationといいます。上では、オリジナルのデータセットクラスを作る方法を示すために変換の操作も`get_example()`内に書くという実装を行いましたが、実はもっと簡単にいろいろな変換をデータに対して行う方法があります。\n",
        "\n",
        "それは、`TransformDataset`クラスを使う方法です。`TransformDataset`は、元になるデータセットオブジェクトと、そこからサンプルしてきた各データ点に対して行いたい変換を関数の形で与えると、変換済みのデータを返してくれるようなデータセットオブジェクトに加工してくれる便利なクラスです。かんたんな使い方は以下です。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "nBly8lfhMq6N",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer.datasets import TransformDataset\n",
        "\n",
        "train_val, test_dataset = cifar.get_cifar10()\n",
        "train_size = int(len(train_val) * 0.9)\n",
        "train_dataset, valid_dataset = split_dataset_random(train_val, train_size, seed=0)\n",
        "\n",
        "\n",
        "# 行いたい変換を関数の形で書く\n",
        "def transform(inputs):\n",
        "    x, t = inputs\n",
        "    x = x.transpose(1, 2, 0)\n",
        "    h, w, _ = x.shape\n",
        "    x_offset = np.random.randint(4)\n",
        "    y_offset = np.random.randint(4)\n",
        "    x = x[y_offset:y_offset + h - 4,\n",
        "          x_offset:x_offset + w - 4]\n",
        "    if np.random.rand() > 0.5:\n",
        "        x = np.fliplr(x)\n",
        "    x = x.transpose(2, 0, 1)\n",
        "    \n",
        "    return x, t\n",
        "\n",
        "\n",
        "# 各データをtransformにくぐらせたものを返すデータセットオブジェクト\n",
        "train_dataset = TransformDataset(train_dataset, transform)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "6Q0dLAW6Mq6O"
      },
      "cell_type": "markdown",
      "source": [
        "このようにすると、この新しい`train_dataset`は、上で自分でデータセットクラスごと書いたときと同じような変換を行った上でデータを返してくれるデータセットオブジェクトになります。\n",
        "\n",
        "### ChainerCVでいろいろな変換を簡単に行おう\n",
        "\n",
        "さて、上では画像に対してランダムクロップと、ランダムに左右反転というのをやりました。もっと色々な変換を行いたい場合、上記の`transform`関数に色々な処理を追加していけばよいことになりますが、毎回使いまわすような変換処理をそのたびに書くのは面倒です。何かいいライブラリとか無いのかな、となります。そこで[ChainerCV](http://chainercv.readthedocs.io/en/stable)[[Niitani 2017]](https://arxiv.org/abs/1708.08169)です！今年のACM MultimediaのOpen Source Software CompetitionにWebDNN[[Hidaka 2017]](https://dl.acm.org/citation.cfm?id=3129394)とともに出場していたChainerにComputer Vision向けの便利な機能を色々追加する補助パッケージ的なオープンソース・ソフトウェアです。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "_dJ1-rCrMq6P",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!pip install chainercv"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "jsdEfeirMq6R"
      },
      "cell_type": "markdown",
      "source": [
        "[ChainerCV](http://chainercv.readthedocs.io/en/stable)には、画像に対する様々な変換があらかじめ用意されています。\n",
        "\n",
        "- [ChainerCVで使える画像変換一覧](http://chainercv.readthedocs.io/en/stable/reference/transforms.html#image)\n",
        "\n",
        "そのため、上でNumPyを使ってごにょごにょ書いていたランダムクロップやランダム左右反転は、`chainercv.transforms`モジュールを使うと、それぞれ以下のように1行で書くことができます：\n",
        "\n",
        "```python\n",
        "x = transforms.random_crop(x, (28, 28))  # ランダムクロップ\n",
        "x = chainercv.transforms.random_flip(x)  # ランダム左右反転\n",
        "```\n",
        "\n",
        "`chainercv.transforms`モジュールを使って、`transform`関数をアップデートしてみましょう。ちなみに、`get_cifar10()`で得られるデータセットでは、デフォルトで画像の画素値の範囲が`[0, 1]`にスケールされています。しかし、`get_cifar10()`に`scale=255.`を渡しておくと、値の範囲をもともとの`[0, 255]`のままにできます。今回`transform`の中で行う処理は、以下の5つです：\n",
        "\n",
        "1. PCA lighting: これは大雑把に言えば、少しだけ色味を変えるような変換です\n",
        "2. Standardization: 訓練用データセット全体からチャンネルごとの画素値の平均・標準偏差を求めて標準化をします\n",
        "3. Random flip: ランダムに画像の左右を反転します\n",
        "4. Random expand: `[1, 1.5]`からランダムに決めた大きさの黒いキャンバスを作り、その中のランダムな位置へ画像を配置します\n",
        "5. Random crop: `(28, 28)`の大きさの領域をランダムにクロップします"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "TbDNke8ZMq6S",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from functools import partial\n",
        "from chainercv import transforms\n",
        "\n",
        "train_val, test_dataset = cifar.get_cifar10(scale=255.)\n",
        "train_size = int(len(train_val) * 0.9)\n",
        "train_dataset, valid_dataset = split_dataset_random(train_val, train_size, seed=0)\n",
        "\n",
        "mean = np.mean([x for x, _ in train_dataset], axis=(0, 2, 3))\n",
        "std = np.std([x for x, _ in train_dataset], axis=(0, 2, 3))\n",
        "\n",
        "\n",
        "def transform(inputs, train=True):\n",
        "    img, label = inputs\n",
        "    img = img.copy()\n",
        "    \n",
        "    # Color augmentation\n",
        "    if train:\n",
        "        img = transforms.pca_lighting(img, 76.5)\n",
        "        \n",
        "    # Standardization\n",
        "    img -= mean[:, None, None]\n",
        "    img /= std[:, None, None]\n",
        "    \n",
        "    # Random flip & crop\n",
        "    if train:\n",
        "        img = transforms.random_flip(img, x_random=True)\n",
        "        img = transforms.random_expand(img, max_ratio=1.5)\n",
        "        img = transforms.random_crop(img, (28, 28))\n",
        "        \n",
        "    return img, label\n",
        "\n",
        "train_dataset = TransformDataset(train_dataset, partial(transform, train=True))\n",
        "valid_dataset = TransformDataset(valid_dataset, partial(transform, train=False))\n",
        "test_dataset = TransformDataset(test_dataset, partial(transform, train=False))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "iNQZOwbAMq6S"
      },
      "cell_type": "markdown",
      "source": [
        "ちなみに、`pca_lighting`は、大雑把にいうと色味を微妙に変えた画像を作ってくれる関数です。\n",
        "\n",
        "では、standardizationとChainerCVによるPCA Lightingを追加した`TransformDataset`を使って学習をしてみましょう。"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "jh6J1f48Mq6T",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "reset_seed(0)\n",
        "\n",
        "model = train(DeepCNN(10), max_epoch=100, train_dataset=train_dataset, valid_dataset=valid_dataset, test_dataset=test_dataset, postfix='augmented2_', base_lr=0.1, lr_decay=(30, 'epoch'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "HsuPDoGsMq6V"
      },
      "cell_type": "markdown",
      "source": [
        "わずかに精度が向上しました。他にもネットワークにResNetと呼ばれる有名なアーキテクチャを採用するなど、簡単に試せる改善方法がいくつかあります。ぜひご自分で色々と試してみてください。"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "WD1oaVYTMq6Z"
      },
      "cell_type": "markdown",
      "source": [
        "#### 参考文献\n",
        "\n",
        "[Tokui 2015] Tokui, S., Oono, K., Hido, S. and Clayton, J., Chainer: a Next-Generation Open Source Framework for Deep Learning, Proceedings of Workshop on Machine Learning Systems(LearningSys) in The Twenty-ninth Annual Conference on Neural Information Processing Systems (NIPS), (2015)\n",
        "\n",
        "[Niitani 2017] Yusuke Niitani, Toru Ogawa, Shunta Saito, Masaki Saito, \"ChainerCV: a Library for Deep Learning in Computer Vision\", ACM Multimedia (ACMMM), Open Source Software Competition, 2017\n",
        "\n",
        "[Hidaka 2017] Masatoshi Hidaka, Yuichiro Kikura, Yoshitaka Ushiku, Tatsuya Harada. WebDNN: Fastest DNN Execution Framework on Web Browser. ACM International Conference on Multimedia (ACMMM), Open Source Software Competition, pp.1213-1216, 2017."
      ]
    }
  ]
}