{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "7je53AV_Spq9"
   },
   "source": [
    "# 実践編: CT/MRI画像のセグメンテーション\n",
    "\n",
    "[Open with Colab](https://colab.research.google.com/github/mitmul/medical-ai-course-materials/blob/master/docs/source/notebooks/Image_Segmentation_with_Chainer.ipynb)\n",
    "\n",
    "画像を対象とした深層学習の応用技術には様々なものがあります．例えば，画像の中の個別の物体の周りを矩形で囲むようにして検出する**物体検出**や，画像内で個別物体が占める領域を認識する**画像セグメンテーション**などがあります．\n",
    "\n",
    "**物体検出**は，対象物体の**「種類」と「位置」を認識する技術**であるといえます．\n",
    "\n",
    "![](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/FasterRCNN-result.png)\n",
    "物体検出の例．矩形で対象物体を囲い，そのクラスを答えるタスク．\n",
    "\n",
    "**画像セグメンテーション**には2種類あります．1つは，個別の物体を区別するInstance-aware Segmentationです．もう一つは，同一クラスの物体であれば個を区別しないSemantic Segmentationです．今回は，後者を扱います．\n",
    "\n",
    "![](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/PSPNet-result.png)\n",
    "Semantic Segmentationの例．ピクセル単位でクラス分類を行うタスク．画像を，予め決められた数の色で塗り絵をするようなイメージ．\n",
    "\n",
    "画像セグメンテーションは，画像全体に対して一つのクラスを割り当てる分類問題とは異なり，画像内の全ピクセルを，ピクセルごとに分類していきます．そのため，Pixel labeling タスクとも呼ばれます．これは，対象物体の**「種類」と「位置」と「形」を認識する技術**であるといえるでしょう．\n",
    "\n",
    "今回は，深層学習フレームワークChainerを用いて，このSemantic Segmentationタスクに取り組んでみましょう．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hvW0-s0mSpq-"
   },
   "source": [
    "## 環境構築\n",
    "\n",
    "ここで用いるライブラリは，\n",
    "\n",
    "- Chainer\n",
    "- CuPy\n",
    "- ChainerCV\n",
    "- matplotlib\n",
    "\n",
    "です．Google Colab上では，以下のようにしてインストールすることができます．以下のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "QbU-na_HWMpR"
   },
   "outputs": [],
   "source": [
    "# !apt -y install libcusparse8.0 libnvrtc8.0 libnvtoolsext1\n",
    "# !ln -snf /usr/lib/x86_64-linux-gnu/libnvrtc-builtins.so.8.0 /usr/lib/x86_64-linux-gnu/libnvrtc-builtins.so\n",
    "# !pip install chainer cupy-cuda80 chainercv matplotlib"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xQivMLFwXta7"
   },
   "source": [
    "インストールが完了したら，以下のセルを実行して，各ライブラリのバージョンなどを確認します．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 238
    },
    "colab_type": "code",
    "id": "4dJCchkmSpq-",
    "outputId": "efa91500-6e75-4d6d-8396-6c17bb4dac9b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Platform: Linux-4.4.0-116-generic-x86_64-with-debian-stretch-sid\n",
      "Chainer: 5.0.0rc1\n",
      "NumPy: 1.15.2\n",
      "CuPy:\n",
      "  CuPy Version          : 5.0.0rc1\n",
      "  CUDA Root             : /usr/local/cuda\n",
      "  CUDA Build Version    : 9020\n",
      "  CUDA Driver Version   : 9020\n",
      "  CUDA Runtime Version  : 9020\n",
      "  cuDNN Build Version   : 7201\n",
      "  cuDNN Version         : 7201\n",
      "  NCCL Build Version    : 2213\n",
      "ChainerCV: 0.10.0\n",
      "matplotlib: 3.0.0\n"
     ]
    }
   ],
   "source": [
    "import chainer\n",
    "import cupy\n",
    "import chainercv\n",
    "import matplotlib\n",
    "\n",
    "chainer.print_runtime_info()\n",
    "print('ChainerCV:', chainercv.__version__)\n",
    "print('matplotlib:', matplotlib.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "N6-p0PhOSprA"
   },
   "source": [
    "## Semantic Segmentationについて\n",
    "\n",
    "Semantic Segmentationは，Computer Visionの分野で現在も活発に研究が行われているタスクの一つで，入力画像の画素ひとつひとつに対して，なんらかのクラスを与えていくという問題です．しかし，**人間でもあるピクセルひとつだけを見てそれが何かを推測するのは不可能です**．そのため，いかにして周囲のピクセルの情報を加味しながら，ひとつひとつのピクセルの分類を行うか，が重要となります．\n",
    "\n",
    "ニューラルネットワークを用いてこの問題を解く場合は，**「画像を入力して，画像を出力するネットワーク」**を作って学習することになります．そのため，入力画像とペアになる正解ラベル画像は，同じ大きさを持つ，各ピクセルの所属クラス番号が入ったシングルチャンネルの画像とすることが一般的です．\n",
    "\n",
    "ネットワークの出力は，$C$クラス分類をする場合は$C$チャンネルの画像になります．それを各ピクセルごとにチャンネル方向にSoftmaxを取って確率ベクトルにし，正解のクラスの値が大きくなるよう（高い確信をもって正解クラスを予測できるよう）学習を進めます．画像分類（Classification）の際のロス計算を，**ピクセルごとに行っている**と考えると分かりやすいかと思います．ピクセルごとの分類誤差を，画像サイズ分だけ足し合わせたものがSemantic Segmentationタスクにおいて最小化したいロス関数となります．\n",
    "\n",
    "ここで，$C=2$の場合だけは，ネットワークの出力を$C-1 = 1$チャネル画像にし，ロス関数をSigmoid Cross Entropyとします．$C \\geq 2$の場合は，ネットワークの出力を$C$チャンネル画像にし，チャンネル方向にSoftmaxを取った上で正解ラベル画像とのCross entropyを計算するSoftmax Cross Entropyをロス関数とします．2クラスの場合に出力の1チャネル画像を閾値 $0.5$ で二値化し，予測ラベル画像として出力するのは，$C \\geq 2$クラスの場合において$C$個のクラスそれぞれに確率が与えられたあとそれが最大になるチャンネル番号を予測クラスとして出力するのと同じことです．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "brsImW2ySprB"
   },
   "source": [
    "## 使用するデータセット\n",
    "\n",
    "これから使用するデータセットは，心臓MRI画像（短軸像）と，それに専門家がラベルを付けたものです．データについて詳しくはこちらをご参照ください[[1](#1), [2](#2), [3](#3)]．\n",
    "\n",
    "下記にこのデータセットから抜き出した画像ペアの例を示します．下のセルを実行してみてください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "BMtGEZWIY0EW"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train:\r\n",
      "total 48\r\n",
      "drwxr-xr-x  4 shunta shunta  4096 Sep  6  2017 .\r\n",
      "drwxr-xr-x 10 shunta shunta  4096 Oct 17 13:50 ..\r\n",
      "drwxr-xr-x  2 shunta shunta 20480 Oct 17 11:40 image\r\n",
      "drwxr-xr-x  2 shunta shunta 20480 Oct 17 11:40 label\r\n",
      "\r\n",
      "val:\r\n",
      "total 16\r\n",
      "drwxr-xr-x  4 shunta shunta 4096 Sep  6  2017 .\r\n",
      "drwxr-xr-x 10 shunta shunta 4096 Oct 17 13:50 ..\r\n",
      "drwxr-xr-x  2 shunta shunta 4096 Oct 17 11:40 image\r\n",
      "drwxr-xr-x  2 shunta shunta 4096 Oct 17 11:40 label\r\n"
     ]
    }
   ],
   "source": [
    "!if [ ! -d train ]; then curl -L -O https://github.com/mitmul/chainer-handson/releases/download/SegmentationDataset/train.zip && unzip train.zip && rm -rf train.zip; fi\n",
    "!if [ ! -d val ]; then curl -L -O https://github.com/mitmul/chainer-handson/releases/download/SegmentationDataset/val.zip && unzip val.zip && rm -rf val.zip; fi\n",
    "!ls -la train val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "id": "fYrsnyUNSprC",
    "outputId": "677e071d-f38b-437e-e709-57fde97c1b8b"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from PIL import Image\n",
    "\n",
    "# PILライブラリで画像を読み込む\n",
    "img = np.asarray(Image.open('train/image/000.png'))\n",
    "label = np.asarray(Image.open('train/label/000.png'))\n",
    "\n",
    "# matplotlibライブラリを使って2つの画像を並べて表示\n",
    "fig, axes = plt.subplots(1, 2)\n",
    "axes[0].set_axis_off()\n",
    "axes[0].imshow(img, cmap='gray')\n",
    "axes[1].set_axis_off()\n",
    "axes[1].imshow(label, cmap='gray')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "GGUIUVdmSprE"
   },
   "source": [
    "左側がMRI画像，右側がそれに対し専門家が作成した左心室の部分のマスク画像となっています．右側のマスク画像のうち，**白く塗りつぶされている領域が，今回見つけ出したい左心室の領域となっています**．左心室の大きさは，画像ごとに異なっており，形もまた様々です．ただし，**画像全体に対して左心室が占める領域は比較的小さい**ということは共通しています．\n",
    "\n",
    "今回は，MRI画像データを，提供元が配布している形式（DICOM形式）から扱いやすいよう一般的な画像フォーマット（PNG）に変換して用いますが，そのための作業については説明しません．こういったデータの整形や前処理が，機械学習においては非常に重要となることがあるのは確かですが，今回はその部分に関する解説はスコープを大きくはずれるため，割愛します．（もし今回用いるMRI画像群のデータ整形の方法について興味をお持ちの方は，以前行われたKaggleのコンペティションに関連して提供されているこちらのチュートリアルをご参照ください：[Kaggle competition: Second Annual Data Science Bowl](https://www.kaggle.com/c/second-annual-data-science-bowl/details/deep-learning-tutorial)）\n",
    "\n",
    "今回用いるデータセットの元となったデータは，医療画像では一般的な画像フォーマットである [DICOM](https://en.wikipedia.org/wiki/DICOM) 形式の 256 x 256 サイズのグレースケール画像で配布されているものです．今回は，これをあらかじめPNG画像に変換しておきました．ラベル画像は，同じ大きさの二値画像となっており，**左心室の領域内部のピクセルは画素値として1を持ち，それ以外のピクセルは0で埋められています**．今回用いる学習用データセットは234枚の画像ペア（グレースケールのMRI画像と，対応する二値のラベル画像のペア）を持ちます．検証用データとしては，26枚の画像を学習用データとは別に用意してあります．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "HMrqUDzzSprE"
   },
   "source": [
    "## Chainerの概要\n",
    "\n",
    "Chainerは**Define-by-Run**を特徴とするDeep Learningフレームワークです．**Define-by-Run**とは，CaffeやTensorFlowなどのように，**モデルアーキテクチャを定義して確定（define）**\n",
    "させてから**データを流し込んで実行（run）**する，という**Define-and-Run**と異なり，**「データに対する計算を実行（run）することによってモデルが定義される（define）」**というものです．\n",
    "\n",
    "![](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/define-by-run.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "jgzsg0xTSprF"
   },
   "source": [
    "このため，データの内容によって処理を分けるようなモデルが作りやすく，またRNNのように可変回数のループ処理が含まれるような構造を記述しやすくなります．今回は，Semantic Segmentationに取り組みますので，画像から画像を出力するシングルパスのネットワークを記述します．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "rvpjNb9uSprG"
   },
   "source": [
    "### Chainerを用いた学習の流れ\n",
    "\n",
    "Chainerには，学習ループ抽象化のためのクラスである`Trainer`が用意されています．これを用いて，2クラスのSemantic Segmentationタスクに取り組みます．`Trainer`を使って学習を行う際にユーザが準備することは，以下のようになります．\n",
    "\n",
    "1. Datasetオブジェクトの準備（学習に使うデータを一つ一つ返す）\n",
    "2. DatasetオブジェクトをIteratorにくるむ（Dataset内のデータをバッチサイズ分束ねて返す）\n",
    "3. モデルの定義（学習対象になるニューラルネットワーク．`chainer.Chain`クラスを継承して書く）\n",
    "4. 最適化手法の選択（`chainer.optimizers`以下にある最適化手法から選ぶ）\n",
    "5. `Updater`オブジェクトの準備（`Iterator`と`Optimizer`をとり，実際の学習部分（パラメータアップデート）を行うもの）\n",
    "6. `Trainer`オブジェクトの作成（学習ループの管理）\n",
    "\n",
    "`Trainer`に含まれるコンポーネントは，以下のような関係になっています．\n",
    "\n",
    "![](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/trainer.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8MwXJDwvSprG"
   },
   "source": [
    "- `Updater`は，`Iterator`から`Dataset`にあるデータを指定したバッチサイズ数だけ取り出し，`Model`に与えてロスを計算し，`Optimizer`によってパラメータを更新する，という一連の作業（これが1 iterationになります）を隠蔽しています．\n",
    "- `Trainer`は`Extension`という拡張機能を使うことができ，指定したタイミング（毎iterationや，毎epoch）でログを取る，ロスや精度のプロットを描画して保存，などを自動的に行うことができます．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "v_Fv_HaoSprH"
   },
   "source": [
    "Chainerを用いてネットワークの学習を記述する場合は，上の図の**内側から順に定義していき**，最後にすべてを持った`Trainer`オブジェクトを作成し，`trainer.run()`のようにして学習を開始することになります．\n",
    "\n",
    "（`Trainer`を使わず，自分で学習ループを記述することもできますが，今回は`Trainer`を使用することを前提とします．自分で学習ループを記述する方法を知りたい場合は，こちらの公式チュートリアルが参考になります：[How to write a training loop in Chainer](https://docs.chainer.org/en/latest/tutorial/train_loop.html)）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-5yuQ_VBSprI"
   },
   "source": [
    "## 三層パーセプトロンによるセグメンテーション\n",
    "\n",
    "まずはシンプルなモデルから学習を開始します．全結合層3つからなる三層パーセプトロンを使って，MRI画像を入力にとり，左心室らしさのグレースケール画像を出力するモデルを学習しましょう．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "FScZCHDrSprJ"
   },
   "source": [
    "### データセットの準備\n",
    "\n",
    "まずはデータセットの準備をします．Chainerにはいくつかの便利なデータセットまわりのクラスが用意されています．`ImageDataset`は，画像ファイルへのファイルパスのリストを渡して初期化してやると，そのパスにある画像を**学習時に**ディスクから読み込み，返してくれるようなデータセットクラスです．`TupleDataset`は，複数のデータセットオブジェクトを渡して初期化してやると，それらから同じインデックスを持つデータをタプルに束ねて返してくれるようなデータセットオブジェクトを作成するクラスです．（Pythonの`zip`のようなイメージです）\n",
    "\n",
    "今回はSemantic Segmentationなので，入力も出力も画像です．なので，2つの`ImageDataset`オブジェクトを作成します．以下のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wL7MAXtNSprK"
   },
   "outputs": [],
   "source": [
    "import glob\n",
    "from chainer import datasets\n",
    "\n",
    "def create_dataset(img_filenames, label_filenames):\n",
    "    img = datasets.ImageDataset(img_filenames)\n",
    "    img = datasets.TransformDataset(img, lambda x: x / 255.)  # 0-1に正規化\n",
    "    label = datasets.ImageDataset(label_filenames, dtype=np.int32)\n",
    "    dataset = datasets.TupleDataset(img, label)\n",
    "    return dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Xucn9Z1LSprN"
   },
   "source": [
    "上の関数は，入力画像のファイルパスのリスト`img_filenames`と，正解ラベル画像（0 or 1の画素値を持つ二値画像）のファイルパスのリスト`label_filenames`を与えて，2つのデータセットオブジェクトを`TupleDataset`で束ねて返すものになっています．\n",
    "\n",
    "`img`は入力画像のデータセットですが，まるで入力画像が入ったリストのようになっています．そのため，`img[i]`のようにすれば`i`番目の画像が返ってきます（`[i]`でアクセスしたときに初めてディスクから画像が読み込まれます）．\n",
    "\n",
    "`label`も同様に，ラベル画像のリストです．これらを`TupleDataset`で束ねて作った`dataset`は，`dataset[i]`でアクセスすると`(img[i], label[i])`というタプルを返すものになります．（`img`と`label`が同じ長さのリストだとすると，`zip(img, label)`を行っているようなイメージです．）\n",
    "\n",
    "ここで，この関数内の2行目では，はじめに`ImageDataset`で作った入力データセットを，`TransformDataset`でくるんでいます．`TransformDataset`は，第1引数に与えられたデータセットにアクセスする際に**第2引数に与えた関数をくぐらせてから返す**ようにできるクラスで，任意の関数を与えてデータを変換させる処理をはさむことができます．これを使うと，内部で乱数によって様々な変換（画像の場合，ランダムに左右反転を行ったり，ランダムな角度で回転をしたり，などがよく行われます）を施す関数を渡すことでData augmentationを簡単に実装することができます．ここでは，変換を行う関数を`lambda`関数を使って与え，単純に値域を$[0, 1]$に変換するだけの処理を行っています．\n",
    "\n",
    "この`create_dataset`関数を使って学習用・検証用それぞれのデータセットオブジェクトを作成しましょう．下のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gLwVX846SprN"
   },
   "outputs": [],
   "source": [
    "def create_datasets():\n",
    "    # Python標準のglobを使ってMRI画像ファイル名/ラベル画像ファイル名の一覧を取得\n",
    "    train_img_filenames = sorted(glob.glob('train/image/*.png'))\n",
    "    train_label_filenames = sorted(glob.glob('train/label/*.png'))\n",
    "\n",
    "    # リストを渡して，データセットオブジェクト train を作成\n",
    "    train = create_dataset(train_img_filenames, train_label_filenames)\n",
    "\n",
    "    # 同様のことをvalidationデータに対しても行う\n",
    "    val_img_filenames = sorted(glob.glob('val/image/*.png'))\n",
    "    val_label_filenames = sorted(glob.glob('val/label/*.png'))\n",
    "    val = create_dataset(val_img_filenames, val_label_filenames)\n",
    "    \n",
    "    return train, val"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "7fMFbheJSprR"
   },
   "source": [
    "こちらの関数では，まずPython標準に備わっている`glob`を使って，`.png`の拡張子を持つ画像ファイルを指定したディレクトリ以下から探してきて，ファイルパスリストを作っています．次に，入力画像とラベル画像のファイルリストが同じインデックスで対応したデータをそれぞれ指すように，`sorted`を使ってファイル名をソートしています．そのあと，それらのファイル名リストを先程の`create_dataset`関数に渡して，データセットオブジェクトを作成しています．同様のことをvalidation用の画像ファイルに対しても行い，`train`と`val`2つのデータセットオブジェクトを作成して返します．\n",
    "\n",
    "ではこの関数を呼んでみましょう．下のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 68
    },
    "colab_type": "code",
    "id": "L44uqOHXSprR",
    "outputId": "5d73b88f-595f-49c9-e087-bf8784d34c49"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset size:\n",
      "\ttrain:\t234\n",
      "\tvalid:\t26\n"
     ]
    }
   ],
   "source": [
    "train, val = create_datasets()\n",
    "\n",
    "print('Dataset size:\\n\\ttrain:\\t{}\\n\\tvalid:\\t{}'.format(len(train), len(val)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "p8d5DHntSprU"
   },
   "source": [
    "この関数を呼べば，訓練用データセットオブジェクトと検証用データセットオブジェクトを作成できます．データセットオブジェクトは基本的にはリストとして扱うことができるので，組み込み関数の`len()`を使っていくつのデータ点が含まれているかを知ることができます．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "EawmNqfnSprU"
   },
   "source": [
    "### モデルの定義\n",
    "\n",
    "次に，訓練するモデルの定義です．まずはじめは，最もシンプルな全結合型ネットワークを定義してみます．以下のコードを実行してみましょう．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "2tO-E0NGSprW"
   },
   "outputs": [],
   "source": [
    "import chainer\n",
    "import chainer.functions as F\n",
    "import chainer.links as L\n",
    "\n",
    "class MultiLayerPerceptron(chainer.Chain):\n",
    "    \n",
    "    def __init__(self, out_h, out_w):\n",
    "        super().__init__()\n",
    "        with self.init_scope():\n",
    "            self.l1 = L.Linear(None, 100)\n",
    "            self.l2 = L.Linear(100, 100)\n",
    "            self.l3 = L.Linear(100, out_h * out_w)\n",
    "        self.out_h = out_h\n",
    "        self.out_w = out_w\n",
    "    \n",
    "    def __call__(self, x):\n",
    "        h = F.relu(self.l1(x))\n",
    "        h = F.relu(self.l2(h))\n",
    "        h = self.l3(h)\n",
    "        n = x.shape[0]\n",
    "        \n",
    "        return h.reshape((n, 1, self.out_h, self.out_w))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "aYdKpLRHSprY"
   },
   "source": [
    "全結合層（`Linear`レイヤ）で終わるネットワークは，出力が1次元のベクトルになるので，それを画像の形にreshapeするためのサイズ情報（`out_h`, `out_w`）をコンストラクタに渡しています．\n",
    "\n",
    "Chainerでは，`Chain`クラスを継承したクラスを書いてモデルの定義を行うのが一般的です．コンストラクタで学習対象になるパラメータを持つレイヤ（`Link`と呼ばれます）のオブジェクトを登録していきます．この際，`init_scope`を用いて作ったコンテキストの中で行う必要があります．こうすると，自動的に最適化の対象にしてくれます．\n",
    "\n",
    "`__call__`では，実際に行いたいforward計算を記述しています．ここでは3つの全結合層を，活性化関数にReLUを用いる形で繋げています．最後に，正解のマスク画像とそのまま比較しやすいように，画像の形にreshapeして返しています．\n",
    "\n",
    "ここで，出力のチャンネル数を1にしているのは，今回対象とするデータは**左心室か左心室でないか，というニクラス分類**になるので，「左心室である確率」を与える一つの値を考えれば良いことになるからです．通常，$C$個のクラスがある場合は$C$次元の予測ベクトルを各ピクセルごとに作成し，そのピクセルにおいて最も大きな値を持つチャンネルのインデックスを予測として返すようにしますが，2クラス分類の場合では，これは予測確率が0.5より大きければpositive，0.5以下ならnegativeとすれば同じことになります．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "usGCNgiRSprY"
   },
   "source": [
    "### Trainerの定義\n",
    "\n",
    "Chainerには，学習ループを抽象化する`Trainer`というクラスが用意されており，これを用いて色々なExtensionを活用することで，ログをとったりsnapshotを保存したり，epochごとにvalidationデータで検証したりといったことを簡単に実装することができます．代表的なExtensionには，以下のようなものがあります．\n",
    "\n",
    "- ログを自動的にファイルに保存（LogReport)\n",
    "- 標準出力に定期的にロスなどの情報を出力（PrintReport）\n",
    "- ロスを定期的にグラフで可視化して画像として保存（PlotReport)\n",
    "- 定期的にモデルやOptimizerの状態を自動シリアライズ（snapshot/snapshot_object）\n",
    "- 学習の進捗を示すプログレスバーを表示（ProgressBar）\n",
    "- モデルの構造をGraphvizのdot形式で保存（dump_graph）\n",
    "\n",
    "それでは，\n",
    "\n",
    "- ミニバッチサイズ（batchsize）\n",
    "- 学習用データセット（train）\n",
    "- 検証用データセット（val）\n",
    "- 学習を停止するタイミング（stop）\n",
    "- 使用するデバイス（device）← `-1`にするとCPU，`>=0`の場合はそのIDを持つGPU\n",
    "\n",
    "を与えると，それに基づいて`Trainer`オブジェクトを作成して返してくれる`create_trainer`関数を定義しましょう．以下のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "tnzh7wZySpra"
   },
   "outputs": [],
   "source": [
    "from chainer import iterators\n",
    "from chainer import training\n",
    "from chainer import optimizers\n",
    "from chainer.training import extensions\n",
    "\n",
    "def create_trainer(batchsize, train, val, stop, device=-1):\n",
    "    # 先程定義したモデルを使用\n",
    "    model = MultiLayerPerceptron(out_h=256, out_w=256)\n",
    "    \n",
    "    # ピクセルごとの二値分類なので，ロス関数にSigmoid cross entropyを，\n",
    "    # 精度をはかる関数としてBinary accuracyを指定しています\n",
    "    train_model = L.Classifier(\n",
    "        model, lossfun=F.sigmoid_cross_entropy, accfun=F.binary_accuracy)\n",
    "\n",
    "    # 最適化手法にAdamを使います\n",
    "    optimizer = optimizers.Adam()\n",
    "    optimizer.setup(train_model)\n",
    "\n",
    "    # データセットから，指定したバッチサイズ数のデータ点をまとめて取り出して返すイテレータを定義します\n",
    "    train_iter = iterators.MultiprocessIterator(train, batchsize)\n",
    "    val_iter = iterators.MultiprocessIterator(val, batchsize, repeat=False, shuffle=False)\n",
    "    \n",
    "    # イテレータからデータを引き出し，モデルに渡して，ロスを計算し，backwardしてパラメータを更新，\n",
    "    # までの一連の処理を行う updater を定義します\n",
    "    updater = training.StandardUpdater(train_iter, optimizer, device=device)\n",
    "    \n",
    "    # 様々な付加機能をExtensionとして与えられるTrainerを使います\n",
    "    trainer = training.trainer.Trainer(updater, stop)\n",
    "    \n",
    "    logging_attributes = [\n",
    "        'epoch', 'main/loss', 'main/accuracy', 'val/main/loss', 'val/main/accuracy']\n",
    "    trainer.extend(extensions.LogReport(logging_attributes))\n",
    "    trainer.extend(extensions.PrintReport(logging_attributes))\n",
    "    trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], 'epoch', file_name='loss.png'))\n",
    "    trainer.extend(extensions.PlotReport(['main/accuracy', 'val/main/accuracy'], 'epoch', file_name='accuracy.png'))\n",
    "    trainer.extend(extensions.Evaluator(val_iter, optimizer.target, device=device), name='val')\n",
    "    \n",
    "    return trainer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Zw7vdytqSpre"
   },
   "source": [
    "この関数定義の中の最後の方では，**複数の`Extension`を追加しています**．これはログのファイルへの自動保存（`LogReport`）やその標準出力への表示（`PrintReport`），ロスや精度のプロットの自動作成（`PlotReport`），指定したタイミングおきにvalidationデータで評価（`Evaluator`），などをしてくれる拡張機能の定義です．\n",
    "\n",
    "詳しくは，こちらにある`Extension`の一覧から，使い方やできることを調べることができます： [Trainer extensions](https://docs.chainer.org/en/v2.0.2/reference/extensions.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5nyc3T7jSprf"
   },
   "source": [
    "### 学習開始\n",
    "\n",
    "それでは，さっそく学習を開始してみましょう！\n",
    "\n",
    "たった今作成した`Trainer`オブジェクトを使って，学習を開始してみます．`Trainer`オブジェクトはすでに学習に関する全ての設定・情報を持っているので，`run()`メソッドを呼ぶだけで学習が開始されます．\n",
    "\n",
    "下のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 408
    },
    "colab_type": "code",
    "id": "fHzNmtxXSprg",
    "outputId": "a7e7ab5e-4b7c-4a75-c1a1-6a65910071e7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy\n",
      "\u001b[J1           1.04765     0.512336       0.773205       0.538657           \n",
      "\u001b[J2           0.708193    0.568865       0.675132       0.609255           \n",
      "\u001b[J3           0.666114    0.599717       0.647412       0.622323           \n",
      "\u001b[J4           0.629755    0.643196       0.594569       0.678999           \n",
      "\u001b[J5           0.566142    0.704299       0.513822       0.745347           \n",
      "\u001b[J6           0.489457    0.762423       0.438465       0.795608           \n",
      "\u001b[J7           0.397227    0.820602       0.327637       0.858828           \n",
      "\u001b[J8           0.286042    0.880215       0.221025       0.911631           \n",
      "\u001b[J9           0.196816    0.923334       0.155463       0.941455           \n",
      "\u001b[J10          0.128674    0.952424       0.0930471      0.966265           \n",
      "\u001b[J11          0.0770548   0.972445       0.0580262      0.979047           \n",
      "\u001b[J12          0.0532083   0.981115       0.0443707      0.983565           \n",
      "\u001b[J13          0.0393351   0.985288       0.0355182      0.986161           \n",
      "\u001b[J14          0.035082    0.986523       0.0318217      0.987035           \n",
      "\u001b[J15          0.0311886   0.987204       0.0305368      0.987265           \n",
      "\u001b[J16          0.0293203   0.987851       0.0294078      0.987433           \n",
      "\u001b[J17          0.0293747   0.987487       0.0287202      0.987559           \n",
      "\u001b[J18          0.0289441   0.987652       0.0282911      0.987682           \n",
      "\u001b[J19          0.0279163   0.987915       0.0279189      0.987712           \n",
      "\u001b[J20          0.027562    0.988037       0.0275501      0.987835           \n",
      "CPU times: user 53.2 s, sys: 11.2 s, total: 1min 4s\n",
      "Wall time: 1min 42s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "trainer = create_trainer(64, train, val, (20, 'epoch'), device=0)\n",
    "trainer.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "BQY_JoQsSprj"
   },
   "source": [
    "学習に15秒程度かかったと思います．表示されたのは`PrintReport`というExtensionが出力したログの情報です．現在のエポック数，ロス，精度（学習データセットに対してのものは`main/loss`, `main/accuracy`，検証データセットに対してのものは`val/main/loss`, `val/main/accuracy`）が表示されています．\n",
    "\n",
    "それでは次に，`PlotReport`拡張が出力したグラフを見てみましょう．学習が終了したら，以下の2つのセルを実行してみてください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "colab_type": "code",
    "id": "gSe9PO7DSprk",
    "outputId": "9936ddf0-18c8-44f8-d9c0-8d564b276a3a"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "Image('result/loss.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "colab_type": "code",
    "id": "lvnccpd5Sprl",
    "outputId": "2e137e1c-4ff3-4959-8689-419bb6676f8f"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image('result/accuracy.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "2RPUAqyqSpro"
   },
   "source": [
    "うまく学習が進んでいるようです．Training loss, Validation lossともにほぼ0近くまで下がっており，また両者のデータセットに対するAccuracyも最大の1に近づいていっています．\n",
    "\n",
    "これらのプロットは，Trainerの初期化の際に渡す`out`という引数で指定された場所に画像として保存されています．これは逐次更新されているので，実際には学習の途中でもその時点でのプロットを確認することができます．学習の進み具合を視覚的に確認するのに便利です．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "W5xg70FaSpro"
   },
   "source": [
    "### 評価\n",
    "\n",
    "さて，学習結果は一見良好でした．Accuracyは最大値の1にほぼ漸近していました．しかし，この指標はどういう指標なのでしょうか？何をもって「精度（Accuracy）」と言っていたのでしょうか．\n",
    "\n",
    "一般的にSemantic Segmentationの結果は上で「accuracy」と表示されていた**Pixel accuracy**や，それとは異なる指標である**Mean Intersection over Union (mIoU)**といった値で評価が行われます．それぞれの定義は以下のようになっています．\n",
    "\n",
    "正解クラスが$i$であるピクセルをモデルがクラス$j$に分類した数を$N_{ij}$とすると，\n",
    "\n",
    "$$\n",
    "{\\rm Pixel\\ Accuracy} = \\frac{\\sum_{i=1}^k N_{ii}}{\\sum_{i=1}^k \\sum_{j=1}^k N_{ij}}\n",
    "$$\n",
    "\n",
    "$$\n",
    "{\\rm mIoU} = \\frac{1}{k} \\sum_{i=1}^k \\frac{N_{ii}}{\\sum_{j=1}^k N_{ij} + \\sum_{j=1}^k N_{ji} - N_{ii}}\n",
    "$$\n",
    "\n",
    "です．では，改めてこの2つの値をValidationデータセットに対して，**今学習したモデルを使って計算してみましょう．**\n",
    "\n",
    "今回は，これらの値を計算するために，[ChainerCV](https://github.com/chainer/chainercv) [[11]](#11)を用います．ChainerCVはコンピュータビジョンタスクで頻出する計算やモデル・データ等の扱いを統一的に行えるChainerの追加パッケージです．上の2つの指標をあらためて計算するために，ChainerCVが提供するSemantic Segmentationタスク用の評価指標計算のための関数を用いてみましょう．\n",
    "\n",
    "以下のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 51
    },
    "colab_type": "code",
    "id": "2weVbMguSpro",
    "outputId": "75428eba-ce62-4f90-8118-7f6386b7b5c2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pixel Accuracy: 0.9878352238581731\n",
      "mIou: 0.7014019690842325\n"
     ]
    }
   ],
   "source": [
    "from chainer import cuda\n",
    "from chainercv import evaluations\n",
    "\n",
    "def evaluate(trainer, val, device=-1):\n",
    "    # Trainerオブジェクトから学習済みモデルを取り出す\n",
    "    model = trainer.updater.get_optimizer('main').target.predictor\n",
    "\n",
    "    # validationデータ全部に対して予測を行う\n",
    "    preds = []\n",
    "    for img, label in val:\n",
    "        img = cuda.to_gpu(img[np.newaxis], device)\n",
    "        pred = model(img)\n",
    "        pred = cuda.to_cpu(pred.data[0, 0] > 0)\n",
    "        preds.append((pred, label[0]))\n",
    "    pred_labels, gt_labels = zip(*preds)\n",
    "\n",
    "    # 評価をして結果を表示\n",
    "    evals = evaluations.eval_semantic_segmentation(pred_labels, gt_labels)\n",
    "    print('Pixel Accuracy:', evals['pixel_accuracy'])\n",
    "    print('mIou:', evals['miou'])\n",
    "    \n",
    "evaluate(trainer, val, device=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ca5XvESYSprq"
   },
   "source": [
    "2つの数字が表示されました．\n",
    "\n",
    "Pixel Accuracyの値は`PrintReport`が表示した val/main/accuracy と同じ値になっています．学習中に\"accuracy\"として表示していたものは，Pixel Accuracyと同じものでした．こちらは，とても高い値を示しています．最大値が1に対して，0.98以上の値が出ます．\n",
    "\n",
    "一方で，同じ最大値1の指標であるmean IoU（`miou`）が思ったより低いことが分かります．なぜでしょうか．\n",
    "\n",
    "Pixel Accuracyは画像全体の画素数に対して，true positive + true negative（つまり，黒を黒，白を白と当てられた合計数） の割合を見るため，画像全体に対して negative (\n",
    "黒）が多い場合は true positive （白を当てられた数）が小さくてもtrue negativeが大きければ結果としてPixel Accuracyは高い値になります．つまり，**class imbalance（白と黒の数が大きく違う）が起きている際に，少ないクラスへの予測誤差が相対的に小さくなる**ということです．\n",
    "\n",
    "一方，mean IoU の場合は，予測と正解の両画像における「positiveとtrueの和領域」（白と予測した部分と，白が正解である領域の和）に対する「true positive」（白という予測が正解していた領域）の割合を見るので，画像全体の大きさに影響されません．わかりやすく図にすると，以下のようになります．\n",
    "\n",
    "![](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/miou.png)\n",
    "\n",
    "この図の言葉で書くと，IoUは，\n",
    "\n",
    "$$IoU = \\frac{\\rm true\\_positive}{{\\rm positive} + {\\rm true} - {\\rm true\\_positive}}$$\n",
    "\n",
    "となります．\n",
    "\n",
    "では，実際に得られたモデルを使って validation データに予測を行った結果を可視化して，**「Pixel Accuracy は高いが mIoU が低い」ことの問題を確認してみましょう**．以下のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 578
    },
    "colab_type": "code",
    "id": "atA-a3U2Sprr",
    "outputId": "b59cec36-11a3-48d0-a05c-aba6da001b0d"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAC7CAYAAACend6FAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAA7NJREFUeJzt3MtyolAUQFHoyv//8u2RlZdRY5DHZq1psMLgsD2FFPMYYwKg5d/WJwDA8sQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSDobesTmKZpmufZOxB4qTHGvMX/Ndu82k+zbXMHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4Cgt61PAGCapmmMcfeYeZ5XOJMGmzuwqTHGQ2G/HMtjbO7AJp4N9eVztvjbbO7A6pbYwG3xt4k7sCpRXoe4A4f1m/v1ZyPuwGpeFWKB/07cD+wy0D8NtoGH8/K0zMF8Dfa1wF+eIvA0AZyXzf0A7m3o1453L5KzMe+fiftB/PWZYNiaWVyXuAMZvkDeiTtAkLjv3F83kXmebTPsgh/41yXucWMMFxWnYdbfifuOLbVx29zZi1fGV9g/E/cdM6zwGNfKd+K+Y0tu3LZ39kKI1yHuO7bUReBiYm+WnG3zfZ24n4QLgL35a5jN9G3iDmxKpF/Di8N2znPqnMGtwF97KR73ifsBXAb6N5F/5jOwR4L+HLdlDuLZSLsw4JzE/SAuPz799K72W38DzkfcD+hjxL/efhF2YJrcc08QdOArmztAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEzWOMrc8BgIXZ3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYL+A3ZPjX2BdCtKAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAC7CAYAAACend6FAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAABBVJREFUeJzt3EFy2kAUQEGU8v2vPFmRIgSQMHIYPbp3pgBrMTy+JXmWMcYJgJZf7z4AAPYn7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQV/vPoDT6XRalsUeCPyoMcbyjt9rbfPT7q1tkztAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJ+0GMMd59CMCBiPtBLMvy7kMADkTcD8T0Dmwl7hO7jrnpHdhK3Ce2FnOTPHCPuB/I1kle9AFxn9R1oMcY/8T8/Jwxxl/Pv/c84HN8vfsAeOwc5mVZbkb68rF7EXeuHj6PyX1yy7L8CfvWSJvcAZP75LZM5o9eczqdnv5ygHfx1+d+TO6TeiXI52n/+jGY2aPh5fq6EuvEfUJr59m3vP7yPS7f0weE2TwTbut3O3Gf1F6TyvUXhQmemXx3eGGduE/ofFrl1RBfXow9/wyzeCXSAr9O3Ce119T+nQuywPGJ+8T2jLGww2cR9wndCvFep2hgBnteT+I2cZ/QZYSv73b5LreSwWcR94msbS/wjFtfECZ3ZmEt/jxxn8itIH+XC6nw2cR9UnsG2ZREkXX9mLhPau8LoD4I8FnE/SCejbO7Y5jdK+vT2l4n7pN79m4ZG4ZxJNbnz7Hl7wHc2p/9elOxvW6ZhP/tmQ3yfBlsZ3Kf2Nre1penXi73j/EB4GjW1qx1/TyT+8S2LOZbUzwc0eV6t9nd68T94PyDEkXW8+uclgEIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwhaxhjvPgYAdmZyBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCPoNGUrnhJW6svUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAC7CAYAAACend6FAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAA61JREFUeJzt3Mtu4kAUQEF6lP//5Z5VpCgaGB5+HlctrQi8uBzaHeMx57wB0PJn7xMAYHniDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4Q9LX3Cdxut9sYwzMQWNWcc+zxvmabtd2bbSt3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBzY357zNOfc+jbSvvU8A6LsX8t/HxxhbnM4liDuwmldX5z//Xug/I+7A4pbYcvl+DZF/jz134NDszb/Hyv2E/jXsYwwrHQ5hjRjPOc31i6zcT+TRHQY/j1vpsJc1Z89cv0bco9xqRpGZfp64n8AnofZhYCtm7VjEHTgVXyLPEfeDW/KWMqgw0/8n7hfgLgPWJrbHI+4X4INHkbl+TNwBgsT9IqxyWIvZOiZxv4Axhn13VmO2jkncgdNy1XCfuAMEifvBfXrJ65IZrkncT+DdPXNhZytm7XjEPernI4ChypfKfZ7nfiLfg3zvee7PHAOuQdxPSLQ5IleLx2JbBiBI3IHFbHlV6Qr2MXEHFrV2dP3i+jniDixOfPfnH6rAKh7d3fXJ6/EcK3dgVUv8ylrYX2flDqzunVW8oH9G3IHNCPZ2bMsABIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEjTnn3ucAwMKs3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYL+Ar4Eine+W7glAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def show_predicts(trainer, val, device=-1, n_sample=3):\n",
    "    # Trainerオブジェクトから学習済みモデルを取り出す\n",
    "    model = trainer.updater.get_optimizer('main').target.predictor\n",
    "\n",
    "    for i in range(n_sample):\n",
    "        img, label = val[i]\n",
    "        img = cuda.to_gpu(img, device)\n",
    "        pred = model(img[np.newaxis])\n",
    "        pred = cuda.to_cpu(pred.data[0, 0] > 0)        \n",
    "        fig, axes = plt.subplots(1, 2)\n",
    "\n",
    "        axes[0].set_axis_off()\n",
    "        axes[0].imshow(pred, cmap='gray')\n",
    "\n",
    "        axes[1].set_axis_off()\n",
    "        axes[1].imshow(label[0], cmap='gray')\n",
    "\n",
    "        plt.show()\n",
    "\n",
    "show_predicts(trainer, val, device=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "uIPy6N-ISprs"
   },
   "source": [
    "左の列が予測ラベルで，右の列が正解ラベルです．3行目に顕著なように，予測のpositive領域（白い領域）はかなり正解に対して小さめに出ています．これでも全体を平均してPixel Accuracy 99%以上ということは，Pixel Accuracyは評価指標として今回のようなデータセットにはあまり合っていない可能性があります．\n",
    "\n",
    "以降は，どうやって`miou`(mean Intersection over Union)を改善するかに取り組んでみましょう．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "QwYIGRnmSprv"
   },
   "source": [
    "## 畳み込みネットワークを用いたセグメンテーション\n",
    "\n",
    "mIoU改善のため，モデルを全結合層のみから構成されるものから，画像関連のタスクで多く用いられる，畳み込みレイヤを用いたより深いモデルに変えてみましょう．今回用いるLinkは，`Convolution2D`と`Deconvolution2D`の2つだけです．それぞれ，カーネルサイズ（`ksize`），ストライド（`stride`），パディング（`pad`）を指定することができます．これらがどのように出力を変化させるかを，まずはまとめてみましょう．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "7gK3nG-cSprv"
   },
   "source": [
    "### Convolutionレイヤ\n",
    "\n",
    "`Convolution2D`というLinkは，一般的な畳込みレイヤの実装です．畳み込み層のパラメータを設定する際には，以下の点を知っておくと便利です．\n",
    "\n",
    "- paddingを使って計算後の出力サイズを維持しやすくするために，奇数のカーネルサイズにする（$\\lfloor {\\rm ksize} / 2 \\rfloor$をpadに指定すると，stride=1の際に画像サイズが変わらなくなる）\n",
    "- 出力feature mapを縮小したい場合は，>1の値をstrideに与える（stride=nだと1/nになる）\n",
    "- 出力サイズは，$({\\rm input\\_size} + {\\rm pad} \\times 2) / {\\rm stride} + 1$になる．つまり，strideを大きくすると出力特徴マップは小さくなる．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "D5pnY7NrSprw"
   },
   "source": [
    "### Deconvolutionレイヤ\n",
    "\n",
    "`Deconvolution2D`は，その名とは異なり数学的な意味でのdeconvolutionではありません（！）そのため，Transposed convolutionや，Backward convolutionと呼ばれることも多いレイヤです．フィルタの適用の仕方はConvolutionと同じで，ただ事前に入力特徴マップの値を飛び飛びに配置するなどの処理が入る部分が異なっています．`Deconvolution2D`レイヤのパラメータを設定する際には，以下の点を知っておくと便利です．\n",
    "\n",
    "- カーネルサイズをstrideで割り切れる数にする（checker board artifactを防ぐため．こちらを参考のこと：[Deconvolution and Checkerboard Artifacts](https://distill.pub/2016/deconv-checkerboard/)）\n",
    "- 出力サイズは，${\\rm stride} \\times ({\\rm input\\_size} - 1) + {\\rm ksize} - 2 * {\\rm pad}$となるので，目的の拡大後サイズになるようパラメータを調整する\n",
    "\n",
    "Deconvolution2Dにおいては，padが意味するものが少し直感的でないため，以下に実際に行われる操作を説明した図を用意しました．\n",
    "\n",
    "![](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/deconv_pad-0.png)\n",
    "![](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/deconv_pad-1.png)\n",
    "\n",
    "気をつける点は，ksizeとstrideに従って配置・拡張したfeature mapの周囲を「削る量」がpadになっている点です．そのあと行われる演算自体はstride=1, pad=0のConvolutionと同じになります．\n",
    "\n",
    "こちらに，非常にわかりやすく各種Convolution/Deconvolutionの計算を表したGIFアニメがあるので，参考にしてください：[Convolution arithmetic](https://github.com/vdumoulin/conv_arithmetic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "7toHJo-ySprx"
   },
   "source": [
    "### 全畳込みネットワーク\n",
    "\n",
    "それではさっそくConvolutionレイヤーとDeconvolutionレイヤーのみからなるネットワークをChainerで書いてみましょう！以下のモデルは，Fully Convolutional Networkと呼ばれるネットワークに類似したものです．詳しくはこちらの文献を参照してください [[4](#4), [5](#5), [6](#6)]\n",
    "\n",
    "以下のFullyConvolutionalNetworkというモデルの定義には，FIXME_1 ~ FIXME_5まで，5つの定数が含まれていますが，値が与えられていません．それぞれは，Convolutionの出力側のチャンネル数になります．試しにこれを，\n",
    "\n",
    "- FIXME_1 = 64\n",
    "- FIXME_2 = 128\n",
    "- FIXME_3 = 128\n",
    "- FIXME_4 = 128\n",
    "- FIXME_5 = 128\n",
    "\n",
    "と書き換えて，下のセルを実行してみましょう．入力チャンネル数は，`None`を与えておくと，実行時に自動的に決定してくれます．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "SOzorw47gYvY"
   },
   "outputs": [],
   "source": [
    "FIXME_1 = 64\n",
    "FIXME_2 = 128\n",
    "FIXME_3 = 128\n",
    "FIXME_4 = 128\n",
    "FIXME_5 = 128"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "B7WGsingSprx",
    "outputId": "4848b664-89b9-444f-ad7e-1743d60f8fac"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(256, 256)\n"
     ]
    }
   ],
   "source": [
    "from chainer import reporter\n",
    "from chainer import cuda\n",
    "from chainercv import evaluations\n",
    "\n",
    "class FullyConvolutionalNetwork(chainer.Chain):\n",
    "    \n",
    "    def __init__(self, out_h, out_w, n_class=1):\n",
    "        super().__init__()\n",
    "        with self.init_scope():\n",
    "            # L.Convolution2D(in_ch, out_ch, ksize, stride, pad)\n",
    "            # in_chは省略することができるので，\n",
    "            # L.Convolution2D(out_ch, ksize, stride, pad)\n",
    "            # と書いても良い！\n",
    "            self.conv1 = L.Convolution2D(None, FIXME_1, ksize=5, stride=2, pad=2)\n",
    "            self.conv2 = L.Convolution2D(None, FIXME_2, ksize=5, stride=2, pad=2)\n",
    "            self.conv3 = L.Convolution2D(None, FIXME_3, ksize=3, stride=1, pad=1)\n",
    "            self.conv4 = L.Convolution2D(None, FIXME_4, ksize=3, stride=1, pad=1)\n",
    "            self.conv5 = L.Convolution2D(None, FIXME_5, ksize=1, stride=1, pad=0)\n",
    "            # L.Deconvolution2D(in_ch, out_ch, ksize, stride, pad)\n",
    "            # in_chは省略することができるので，\n",
    "            # L.Deconvolution2D(out_ch, ksize, stride, pad)\n",
    "            # と書いても良い！\n",
    "            self.deconv6 = L.Deconvolution2D(None, n_class, ksize=32, stride=16, pad=8)\n",
    "        self.out_h = out_h\n",
    "        self.out_w = out_w\n",
    "    \n",
    "    def __call__(self, x):\n",
    "        h = F.relu(self.conv1(x))\n",
    "        h = F.max_pooling_2d(h, 2, 2)\n",
    "        \n",
    "        h = F.relu(self.conv2(h))\n",
    "        h = F.max_pooling_2d(h, 2, 2)\n",
    "        \n",
    "        h = F.relu(self.conv3(h)) \n",
    "        h = F.relu(self.conv4(h))\n",
    "        h = self.conv5(h)\n",
    "        h = self.deconv6(h)\n",
    "        \n",
    "        return h.reshape(x.shape[0], 1, h.shape[2], h.shape[3])\n",
    "\n",
    "print(FullyConvolutionalNetwork(256, 256)(np.zeros((1, 1, 256, 256), dtype=np.float32)).shape[2:])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "j7-WbsG8Spry"
   },
   "source": [
    "FIXME_1 ~ FIXME_5を書き換えた上で上のセルを実行すると，ネットワークの出力サイズが表示されます．今回の入力画像は(256, 256)サイズの画像ですから，出力が256 x 256という同じ大\n",
    "きさになっていることが確認できればOKです．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "6Ptqh2ghSpry"
   },
   "source": [
    "### Classifierクラスの改良\n",
    "\n",
    "次に，学習中にチェックするものとして，Pixel AccuracyだけでなくmIOUも追加するために，ロス関数を計算するClassifierクラスを，自分でカスタマイズしたものに置き換えます．それは，以下のように定義されます．下記のセルを実行してみましょう．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ycDjvqQtSprz"
   },
   "outputs": [],
   "source": [
    "class PixelwiseSigmoidClassifier(chainer.Chain):\n",
    "    \n",
    "    def __init__(self, predictor):\n",
    "        super().__init__()\n",
    "        with self.init_scope():\n",
    "            # 学習対象のモデルをpredictorとして保持しておく\n",
    "            self.predictor = predictor\n",
    "    \n",
    "    def __call__(self, x, t):\n",
    "        # 学習対象のモデルでまず推論を行う\n",
    "        y = self.predictor(x)\n",
    "        \n",
    "        # 2クラス分類の誤差を計算\n",
    "        loss = F.sigmoid_cross_entropy(y, t)\n",
    "\n",
    "        # 予測結果（0~1の連続値を持つグレースケール画像）を二値化し，\n",
    "        # ChainerCVのeval_semantic_segmentation関数に正解ラベルと\n",
    "        # 共に渡して各種スコアを計算\n",
    "        y, t = cuda.to_cpu(F.sigmoid(y).data), cuda.to_cpu(t)\n",
    "        y = np.asarray(y > 0.5, dtype=np.int32)\n",
    "        y, t = y[:, 0, ...], t[:, 0, ...]\n",
    "        evals = evaluations.eval_semantic_segmentation(y, t)\n",
    "\n",
    "        # 学習中のログに出力\n",
    "        reporter.report({'loss': loss,\n",
    "                         'miou': evals['miou'],\n",
    "                         'pa': evals['pixel_accuracy']}, self)\n",
    "        return loss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xc_ZaQbnSpr1"
   },
   "source": [
    "Trainerは，Optimizerにセットされたモデルが「ロスの値を返す」ものと考えるので，最初のモデルではモデルの根幹部分をとってロスを計算して返すような`L.Classifier`でモデルをくるんでOptimizerに渡していました．Chainerが用意しているこの`L.Classifier`は，内部でロスだけでなくAccuracyも計算し，`reporter.report`に辞書を渡す形で`LogReport`などのExtensionが補足できるように値の報告を行うまでやってくれます．1つ目のモデルでは，この`L.Classifier`の引数にモデルだけでなく`lossfun`と`accfun`も指定することで，この`PixelwiseSigmoidClassifier`とほぼおなじような処理を行うようにしていました．しかし，`L.Classifier`はmean IoUの計算をしてくれません．\n",
    "\n",
    "そこで，今回は`L.Classifier`を自前の`PixelwiseSigmoidClassifier`に置き換え，自分で実際のロスとなる`F.sigmoid_cross_entropy`の計算を書きつつ，予測（上記コード中の`y`）に対してPixel Accuracyとmean IoUの両方を計算して，報告するようにします．`__call__`自体はロスの値（スカラ）を返すことが期待されているので，`F.sigmoid_cross_entropy`の返り値である`loss`だけを`return`しています．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "4o7iJhNZSpr1"
   },
   "source": [
    "### 新しいモデルを使った学習\n",
    "\n",
    "では，これらのモデルとカスタムClassifierを使って，Trainerによる学習を行ってみましょう．以下のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VOwxiL8fSpr2"
   },
   "outputs": [],
   "source": [
    "def create_trainer(batchsize, train, val, stop, device=-1, log_trigger=(1, 'epoch')):\n",
    "    model = FullyConvolutionalNetwork(out_h=256, out_w=256)    \n",
    "    train_model = PixelwiseSigmoidClassifier(model)\n",
    "    \n",
    "    optimizer = optimizers.Adam(eps=1e-05)\n",
    "    optimizer.setup(train_model)\n",
    "\n",
    "    train_iter = iterators.MultiprocessIterator(train, batchsize)\n",
    "    val_iter = iterators.MultiprocessIterator(val, batchsize, repeat=False, shuffle=False)\n",
    "    \n",
    "    updater = training.StandardUpdater(train_iter, optimizer, device=device)\n",
    "    \n",
    "    trainer = training.trainer.Trainer(updater, stop, out='result_fcn')\n",
    "    \n",
    "    logging_attributes = [\n",
    "        'epoch', 'main/loss', 'main/miou', 'main/pa',\n",
    "        'val/main/loss', 'val/main/miou', 'val/main/pa']\n",
    "    trainer.extend(extensions.LogReport(logging_attributes), trigger=log_trigger)\n",
    "    trainer.extend(extensions.PrintReport(logging_attributes), trigger=log_trigger)\n",
    "    trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], 'epoch', file_name='loss.png'))\n",
    "    trainer.extend(extensions.PlotReport(['main/miou', 'val/main/miou'], 'epoch', file_name='miou.png'))\n",
    "    trainer.extend(extensions.PlotReport(['main/pa', 'val/main/pa'], 'epoch', file_name='pa.png'))\n",
    "    trainer.extend(extensions.Evaluator(val_iter, train_model, device=device), name='val')\n",
    "    trainer.extend(extensions.dump_graph('main/loss'))\n",
    "    return trainer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cy11SO2WSpr4"
   },
   "source": [
    "これが今回用いるTrainerオブジェクトを作成する関数です．最初のケースと違うところは，ログをファイルに記録する`LogReport`や標準出力にログを指定項目を出力する`PrintReport`，またグラフを出力する`PlotReport`拡張で`loss`と`accuracy`（ここでは`pa`=Pixel Accuracy）だけでなく`miou`も出力しているところです．\n",
    "\n",
    "それでは学習を開始します．最初のモデルではmiouが0.68強までしかいかなかったことを思い出しつつ，経過を見てみましょう．今回はモデルが大きくなりパラメータ数も増えているため，少し学習に時間がかかります（6分強かかります）\n",
    "\n",
    "下記のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 428
    },
    "colab_type": "code",
    "id": "7cGbGTEWSpr4",
    "outputId": "1129a9bd-f47b-4990-e409-b4e46182f404"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch       main/loss   main/miou   main/pa     val/main/loss  val/main/miou  val/main/pa\n",
      "\u001b[J10          0.213945    0.491866    0.983732    0.208079       0.491143       0.982285     \n",
      "\u001b[J20          0.0712252   0.491675    0.98335     0.0773316      0.491152       0.982304     \n",
      "\u001b[J30          0.0456215   0.497415    0.983356    0.0524746      0.494608       0.982302     \n",
      "\u001b[J40          0.0383471   0.665409    0.988104    0.0525883      0.500769       0.982593     \n",
      "\u001b[J50          0.0302096   0.641644    0.988283    0.0360846      0.694606       0.986988     \n",
      "\u001b[J60          0.023902    0.773714    0.991462    0.0269775      0.704972       0.989334     \n",
      "\u001b[J70          0.0216385   0.744326    0.991641    0.023361       0.744115       0.990672     \n",
      "\u001b[J80          0.0154492   0.833014    0.994017    0.0169145      0.822114       0.993142     \n",
      "\u001b[J90          0.012737    0.854216    0.9949      0.0156518      0.843771       0.993475     \n",
      "\u001b[J100         0.0125562   0.87353     0.994989    0.0155383      0.822914       0.993652     \n",
      "\u001b[J110         0.0126936   0.879257    0.995105    0.0126934      0.871907       0.99481      \n",
      "\u001b[J120         0.00830514  0.901747    0.996659    0.0115662      0.879918       0.99525      \n",
      "\u001b[J130         0.0077065   0.899488    0.996845    0.0118022      0.868749       0.995181     \n",
      "\u001b[J140         0.00746606  0.914914    0.996967    0.0105177      0.887883       0.995686     \n",
      "\u001b[J150         0.0067234   0.922118    0.997293    0.0101634      0.892467       0.995855     \n",
      "\u001b[J160         0.00678598  0.912036    0.997066    0.0122677      0.883054       0.995076     \n",
      "\u001b[J170         0.00573144  0.926268    0.997679    0.00987537     0.897303       0.995932     \n",
      "\u001b[J180         0.00582602  0.92261     0.997448    0.0111094      0.891947       0.995551     \n",
      "\u001b[J190         0.00532147  0.937339    0.99783     0.00920096     0.900736       0.996291     \n",
      "\u001b[J200         0.00544357  0.933824    0.997729    0.00896433     0.904957       0.996366     \n",
      "CPU times: user 7min 46s, sys: 1min 43s, total: 9min 29s\n",
      "Wall time: 14min 57s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "trainer = create_trainer(128, train, val, (200, 'epoch'), device=0, log_trigger=(10, 'epoch'))\n",
    "trainer.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "nwL-7kLzSpr5"
   },
   "source": [
    "学習が終了しました．`PrintReport`が出力した経過の値を見る限り，mIoUが少なくとも0.90近くまで到達していることがわかります．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "q7d7QqRqSpr6"
   },
   "source": [
    "### 学習結果を見てみよう\n",
    "\n",
    "では，今回の学習で`PlotReport`拡張が出力したグラフを見てみましょう．下記の3つのセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 296
    },
    "colab_type": "code",
    "id": "d4QamN-YSpr6",
    "outputId": "7f778fdb-2609-4249-8ada-06f690b1b0cb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "print('Loss')\n",
    "Image('result_fcn/loss.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 296
    },
    "colab_type": "code",
    "id": "swNzUUkqSpr8",
    "outputId": "eb59fa90-78d0-446c-9edf-eb018a859f86"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean IoU\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('mean IoU')\n",
    "Image('result_fcn/miou.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 296
    },
    "colab_type": "code",
    "id": "Vo6EPBfdSpr9",
    "outputId": "c88ef31a-3672-4435-9577-116e8db11acf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pixel Accuracy\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Pixel Accuracy')\n",
    "Image('result_fcn/pa.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "CnVA6KwQSpr_"
   },
   "source": [
    "Pixel Accuracyが0.99以上であるだけでなく，mIoUも0.90近くまで上がっています．mIoUに注目すると，最初のモデル（0.68程度）と比べて随分精度が上がっていることがわかると思います．実際にvalidationデータに対して推論を行った際の予測ラベル画像を見て，結果を確認しましょう．以下のセルを実行してください．"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 612
    },
    "colab_type": "code",
    "id": "pkfCHRZOSpr_",
    "outputId": "f3e8125e-a3d1-418c-d22b-c84127553321"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pixel Accuracy: 0.9963660606971154\n",
      "mIou: 0.9049568755127222\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAC7CAYAAACend6FAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAA59JREFUeJzt3UtO60AABVH7if1vud8IEUSIQuJv+ZwxCA9uV1oRhHmMMQHQ8m/vBwBgeeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhD0sfcDTNM0zfPsMxBY1Rhj3uPn2jZr+23bbu4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhD0sfcD8J4xxjRN0zTP885PAu/53PIjdv48cT+RR+MfYxg+p/RM1G+/1s6fI+4H99fh33IIOLK/bPve99n3Y95zP7BXx7/U98NaltimfT8m7nEOAEdjk9sQ94Na8gA4TFSNMez7F+J+EQ4AR7DWDu37J3E/IEMF3iXuF+JFA65D3IEEl5fvxB3YhPhuS9yBDC8gX8T9YowfrkHcD2jtP6sWePbg4wK2Je4X5JBRZdtfxB3YzJrxFfbvxP2gDBWe57z8JO4HtsZgHQL2ZoPbEHdgc0sFfp5nLxa/EPeDM1yq3g2zs/GYuAO7Eul1+Dd7J/A5/nd/P90h4qgebfN29zb8PHE/kVcj70BwZvb7Gm/LAAS5uZ/Q7U3m3i3eTQcQ95MTcuAeb8sABIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBM1jjL2fAYCFubkDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAME/QfYY3WC3iDEzgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAC7CAYAAACend6FAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAA2hJREFUeJzt3MFOwkAARVHG+P+/PK40XSgUCta5nrMySmIXb26Kko455wWAlrezLwCA5xN3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4Cg97Mv4HK5XMYYnoHAS805xxm/17Z5tZ+27c4dIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIOj97AvgmDnn19djjBOvBI7b7nnLtu8n7ov67hB8fs9BYEU/hX37M9vez59lFjPnvHoIPl8Dq9iz6e1r2UfcF3LPsB0CVvDITm17H3FfhEFTc2TTzsNt4r6AR4fsAMD/Je4AQeIO/LpnvKv0zvQ6cQcIEnfg1/m8+uuJO0CQuIe5O6LMvq8T9wU8MmLDh/9N3Bch1tQc2bTzcJu4L2TvoA2fVdjq63gq5GK2h8HjfikYY+z+zLqd7yfuCzN0Km4F3tbvJ+7An/Ddu1JRf5y4A3+OqB/nH6oAQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBB4g4QJO4AQeIOECTuAEHiDhAk7gBBY8559jUA8GTu3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYI+AMY7YHfctRAxAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAC7CAYAAACend6FAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAA9ZJREFUeJzt3Etu3DAQAFEp8P2vzCwCI95MMh9J5NS8tzQMWIvuMkV/9jHGBkDLr9kPAMDxxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIOhr9gNs27bt++5/IHCqMcY+4+uabc52a7ad3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3AGCxB0gSNwBgsQdIEjcAYLEHSBI3Bc2xtjGGLMfA3hDX7MfgL9uhfzWx/d9P/Nx4DTfM22GzyPui3jmhG5BeBf3HlzM8nHEfbIjrl1EnlU9Ot8/P988v8ade4j7eVZxxM+L/MzpNeI+0RmDaxmoMdPPEfcgy8BMDi1rEPcJrnjdtAzMcObcmenHiHuYZaDGTN9P3IFDCO9axP1iVy+AhaPGTN9H3C9kKOEYdun/xB14mdiuR9yBt+Qbyr+J+wewBPB5xB14icPDmsT9IhaAKv/ga03iDrwth6bbxB0gSNwvMvPV1WszfB5xv9CsyHp15WwOEOsR9w9g8agy27eJ+8UMI3AFcZ9g33eRJ8dMr0XcAYLEfSInHWqunGn782/iHmcBuNrZM+da8z7iPpkhpchcz/c1+wH4swhH/y665WK27xk8arbN9GPEfRE/B9cfHVHy6uFF1J/jWmZBhpmaZ+7J3a2/xsl9Ua+80loIVmU2r+PkvrhHTy+WB9g2cX8b90Rb2IFvrmXeiHgD93JyBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4AgcQcIEneAIHEHCBJ3gCBxBwgSd4CgfYwx+xkAOJiTO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QJC4AwSJO0CQuAMEiTtAkLgDBIk7QNBvg8uieTo4QLQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "evaluate(trainer, val, device=0)\n",
    "show_predicts(trainer, val, device=0, )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "NKs1onagSpsB"
   },
   "source": [
    "一つ目のモデルの結果を確認した際と同じ画像が3つ並べられています．一つ目の結果よりも，特に3行目に注目すると，だいぶ正解ラベルに近い形のマスクを推定できていることがわかります．\n",
    "\n",
    "畳み込み層だけからなるより深いモデルを学習に用いることで，大きく結果を改善することができました．しかし，もう改善の余地が無いというわけではありません．さらに結果を改善するにはどうすればよいのでしょうか？"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YpnDxZ49SpsB"
   },
   "source": [
    "## さらなる精度向上へのヒント\n",
    "\n",
    "Semantic Segmentationでは，どうやって入力画像における広い範囲の情報を1つのピクセルの予測に役立てるか，どうやって複数の解像度における予測結果を考慮するか，などが重要な問題意識となります．また，ニューラルネットワークでは一般に，レイヤを重ねれば重ねるほど，特徴量の抽象度が上がっていくとされています．しかし，Semantic Segmentationでは，正確に対象物体の輪郭を表すマスク画像を出力したいので，low levelな情報（エッジ・局所的な画素値勾配のような情報，色の一貫性など）も考慮して最終的な予測結果を作りたくなります．そのために，ネットワークの出力に近いレイヤでどうやって入力に近いレイヤで取り出された特徴を活用すればよいか，が重要になってきます．\n",
    "\n",
    "これらの視点からいくつもの新しいモデルが提案されています．代表的なものを挙げると，例えば以下のようなものがあります．\n",
    "\n",
    "### SegNet [[8]](#8)\n",
    "\n",
    "下層で行ったMax Poolingの際に「どのピクセルが最大値だったか（pooling indices)\n",
    "」の情報をとっておき，上層でそのpooling indicesを使ってUpsamplingする手法．[ChainerCV](https://github.com/chainer/chainercv)にてChainerで実装されたモデル及び完全な再現実験を含むコードが公開されている．\n",
    "\n",
    "![](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/SegNet.png)\n",
    "\n",
    "### U-Net [[9]](#9)\n",
    "\n",
    "下層の出力特徴マップを，上層の入力にConcatenateすることで活用する構造．全体がアルファベットの \"U\" のような形をしていることから「U-Net」と呼ばれる\n",
    "\n",
    "![](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/U-Net.png)\n",
    "\n",
    "### PSPNet [[10]](#10)\n",
    "\n",
    "Pyramid Pooling Moduleを提案し，異なる大きさのsub-regionごとの特徴を大域的なコンテキストを考慮するために活用することで，ImageNet 2017 Scene Parsing Challengeで優勝したモデル．\n",
    "\n",
    "![](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/PSPNet.png)\n",
    "\n",
    "それでは，お時間のある方は，こういった論文を参考に，上記二つ目のモデルを改良して，さらに高い精度が出せるよう工夫してみてください．"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "DCWZoBoCSpsC"
   },
   "source": [
    "## その他の参考資料\n",
    "\n",
    "最後に，本資料作成者によるいくつかのセグメンテーションに関する資料をここに載せます．\n",
    "\n",
    "- [最近のセグメンテーション手法の簡単な紹介](https://www.slideshare.net/mitmul/a-brief-introduction-to-recent-segmentation-methods)\n",
    "- [Pyramid Scene Parsing Network (CVPR 2017)の紹介](https://www.slideshare.net/mitmul/unofficial-pyramid-scene-parsing-network-cvpr-2017)\n",
    "\n",
    "また，以下のレビュー論文も昨今のDeep learningを活用したセグメンテーション手法についてよくまとまっており，参考になります．\n",
    "\n",
    "- [A Review on Deep Learning Techniques Applied to Semantic Segmentation](https://arxiv.org/abs/1704.06857)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "dm858sxiSpsD"
   },
   "source": [
    "## References\n",
    "\n",
    "[1] Sunnybrook cardiac images from earlier competition http://smial.sri.utoronto.ca/LV_Challenge/Data.html\n",
    "\n",
    "[2] This \"Sunnybrook Cardiac MR Database\" is made available under the CC0 1.0 Universal license described above, and with more detail here: http://creativecommons.org/publicdomain/zero/1.0/\n",
    "\n",
    "[3] Attribution:\n",
    "Radau P, Lu Y, Connelly K, Paul G, Dick AJ, Wright GA. \"Evaluation Framework for Algorithms Segmenting Short Axis Cardiac MRI.\" The MIDAS Journal -Cardiac MR Left Ventricle Segmentation Challenge, http://hdl.handle.net/10380/3070\n",
    "\n",
    "[4] http://fcn.berkeleyvision.org/\n",
    "\n",
    "[5] Long, Shelhamer, Darrell; \"Fully Convoutional Networks for Semantic Segmentation\", CVPR 2015.\n",
    "\n",
    "[6] Zeiler, Krishnan, Taylor, Fergus; \"Deconvolutional Networks\", CVPR 2010.\n",
    "\n",
    "[7] https://www.kaggle.com/c/second-annual-data-science-bowl/details/deep-learning-tutorial\n",
    "\n",
    "[8] Vijay Badrinarayanan, Alex Kendall and Roberto Cipolla \"SegNet: A Deep Convolutional Encoder-Decoder Architecture for Image Segmentation.\" PAMI, 2017\n",
    "\n",
    "[9] Olaf Ronneberger, Philipp Fischer, Thomas Brox, \"U-Net: Convolutional Networks for Biomedical Image Segmentation\", MICCAI 2015\n",
    "\n",
    "[10] Hengshuang Zhao, Jianping Shi, Xiaojuan Qi, Xiaogang Wang and Jiaya Jia, \"Pyramid Scene Parsing Network\", CVPR 2017\n",
    "\n",
    "[11] Yusuke Niitani, Toru Ogawa, Shunta Saito, Masaki Saito, \"ChainerCV: a Library for Deep Learning in Computer Vision\", ACM Multimedia (ACMMM), Open Source Software Competition, 2017"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5lW2RotbSpsG"
   },
   "source": [
    "(c) Shunta Saito, Preferred Networks, inc. 2017"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [
    "7gK3nG-cSprv",
    "D5pnY7NrSprw",
    "YpnDxZ49SpsB"
   ],
   "name": "Image Segmentation with Chainer.ipynb",
   "provenance": [],
   "toc_visible": true,
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
