{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Introduction to ML libs",
      "version": "0.3.2",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "cells": [
    {
      "metadata": {
        "id": "D-9QSHa5gkqc",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "[![colab-logo](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/japan-medical-ai/medical-ai-course-materials/blob/master/notebooks/Introduction_to_ML_libs.ipynb)\n",
        "\n",
        "# 機械学習ライブラリの基礎\n",
        "\n",
        "ここでは，代表的な機械学習アルゴリズムの紹介とその使い方のポイントを数学的な背景と合わせて紹介していきます．\n",
        "機械学習の考え方を身に着ける練習として，**単回帰分析**と**重回帰分析**のアルゴリズムを数式と一緒に考えていきましょう．これらを学ぶことで微分と線形代数，統計の使い方が見えてくると思います．重回帰分析は次章で紹介するニューラルネットワークでもその考え方のベースになるところが多いため，しっかりと数式を理解しておきましょう．\n",
        "\n",
        "## 単回帰分析\n",
        "\n",
        "まずはじめに，機械学習の中でも最も基礎的な単回帰分析について説明します．機械学習アルゴリズムは，**教師あり学習**と**教師なし学習**に大別され，単回帰分析は教師あり学習の一種です．教師あり学習の典型的な問題として，10や0.1のように数値（厳密には連続値）を予測する**回帰**と，赤ワイン or 白ワインのようにカテゴリ値を予測する**分類**があります．単回帰分析はその名の通り，回帰を取り扱う手法で，ひとつの入力変数からひとつの出力変数を予測する機械学習アルゴリズムです．\n",
        "\n",
        "### 問題設定\n",
        "\n",
        "機械学習では，データをもとに学習を行いますが，データに含まれる情報の中から何を利用し，何を予測させるかは人間が決める必要があります．\n",
        "\n",
        "ここでは例として，家賃を予測する問題を考えることにします．従って，家賃が**出力変数** $y$ となります．\n",
        "\n",
        "次に，**入力変数**として何を採用するかを考えます．家賃の予測では，たとえば部屋の広さ，駅からの距離，犯罪発生率などを，入力変数として検討することができます．ここでは部屋の広さを入力変数 $x$ として採用することにしましょう．実際には，複数の入力変数候補があった際に，それらすべてを扱うことができるようなモデル化が一般的ですが，それは次の重回帰分析以降で紹介することにします．\n",
        "\n",
        "機械学習のアルゴリズムでは，どの手法も大きく分けて次の3ステップで成り立っています．\n",
        "\n",
        "- Step1: モデルを決める\n",
        "- Step2: 目的関数を決める\n",
        "- Step3: 最適なパラメータを求める\n",
        "\n",
        "上記の3ステップについて，順に説明していきます．\n",
        "\n",
        "### Step1. モデルを決める\n",
        "\n",
        "まずStep1では**モデル**を決めます．モデルとは，出力変数 $y$ と入力変数 $x$ の関係性を**定式化**したものです．どのように定式化すれば，家賃をうまく予測することができるのでしょうか．このモデル設計は現在は人手で行うのが一般的であり，機械が自動的に決めてくれるわけではありません（最近ではAutoMLなど，モデルも自動決定する研究も進展してきています）\n",
        "\n",
        "例えば，与えられたデータセットにおいて，家賃と部屋の広さの関係性が次のようになっていたとします．\n",
        "\n",
        "![01.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/01.png)\n",
        "\n",
        "この場合，部屋が広くなるほど，家賃が高くなるという関係がみられ．直線を予測に用いるのが妥当にみえます．\n",
        "\n",
        "![02.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/02.png)\n",
        "\n",
        "そこで今回は直線をモデルとして採用して，Step1のモデルを以下のように定式化します．\n",
        "$$\n",
        "y = wx + b\n",
        "$$\n",
        "ここで$w$は傾き，$b$は切片とよばれるパラメータです（機械学習では，傾きを**重み (weight)** $w$, 切片を**バイアス (bias)** $b$ という記号で表現するのが一般的です）．\n",
        "\n",
        "単回帰分析では，このように直線 $y = wx + b$ と決めて，重みとバイアスの値をデータにうまくフィットするように調整していきます．この調整すべき変数のことを**パラメータ**と呼びます．今回は $w$ と $b$ がパラメータとなります．\n",
        "\n",
        "多くの機械学習ではこのようなパラメータで特徴付けられたモデルを使い，与えられたデータセットに適合するように最適なパラメータを求めることが目標となります．ここでデータセットは，入力変数である部屋の広さ $x$ と**教師データ**となる家賃 $t$ の組からなるデータの集合です（本解説では，機械学習による予測値を $y$ ，教師データとして与えるものを $t$ ，と使い分けています）．\n",
        "\n",
        "データセットは $\\mathcal{D} = \\{x_n, t_n\\}_{n=1}^{N}$ として表されることもあります．ここで，添え字 $n$ ($n=1,2,\\ldots,N$) は $n$ 番目の物件という意味であり，$N$ は全体の物件数のことです．この $N$ は**サンプル数**とよばれています．\n",
        "\n",
        "ここで，この後の計算を楽に進めるために，**データの中心化**というテクニックを紹介します．下図に示すように，部屋の広さと家賃は両方とも正の値であるため，左のグラフのような形になります．中心化では，**平均を0**とした中央に配置するような変換の処理を施します．この中心化は多くのアルゴリズムで前処理として行うことが一般的です．厳密には前章で紹介した中心化込みのスケーリングがよく用いられます．\n",
        "![03.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/03.png)\n",
        "\n",
        "この中心化の処理を行う理由は下図のように，データの中心化によってバイアス $b$ が0となり，$y_{c} = wx_{c}$ のように，モデルをバイアス成分なしで表現することができるためです，これによって，調整すべきパラメータを**2つから1つ**に減らすことができます．\n",
        "![04.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/04.png)\n",
        "\n",
        "データの中心化は入出力の平均をデータの全体から引くことで実現されます．つまり，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "x_{c} &= x - \\bar{x} \\\\\n",
        "t_{c} &= t - \\bar{t}\n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．例えば，具体的な数値で見ると，下図の通りです．\n",
        "![05.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/05.png)\n",
        "\n",
        "中心化後を示す添え字の $c$ に関しては表現が冗長となるため，今後はこの添え字を省略し，データの中心化を事前に行っていることを前提とします．この時，モデルは\n",
        "$$\n",
        "y = wx\n",
        "$$\n",
        "となり，単回帰分析の目標は，データセット $\\mathcal{D} = \\{x_n, t_n\\}_{n=1}^{N}$ に基づいて，パラメータ $w$ を**適切**に調整することになります．\n",
        "\n",
        "### Step2. 目的関数を決める\n",
        "\n",
        "どれだけ目標を達成しているかを表す関数を**目的関数**とよびます．分野によっては**評価関数**ともよばれます．\n",
        "\n",
        "今回は教師データと予測値が一致することが目標であり，それを表す目的関数として教師データと予測値の二乗誤差を使います．二乗誤差が0であるとき，またその時のみ$t = y$ となり，完璧な予測を達成しているといえます，$n$ 番目の物件に対する教師データ$t_{n}$ と予測値$y_{n}$の二乗誤差は\n",
        "$$\n",
        "(t_{n} - y_{n})^{2}\n",
        "$$\n",
        "となります．これを全物件で考慮する必要があるため，最終的な目的関数はその総和をとり，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}&=\\left( t_{1}-y_{1}\\right)^{2}+\\left( t_{2}-y_{2}\\right)^{2}+\\ldots + (t_{N}-y_{N})^{2} \\\\\n",
        "&=\\sum^{N}_{n=1}\\left( t_{n}-y_{n}\\right)^{2}\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．また，Step1で決めたモデル\n",
        "$$\n",
        "y_{n} = wx_{n}\n",
        "$$\n",
        "を代入すると，目的関数は\n",
        "$$\n",
        "\\mathcal{L}=\\sum^{N}_{n=1}\\left( t_{n}-wx_{n}\\right)^{2}\n",
        "$$\n",
        "とパラメータを含んだ形式で表現することができます．このような関数を損失関数とよぶことを思い出してください．\n",
        "\n",
        "### Step3. 最適なパラメータを求める \n",
        "\n",
        "最後は目的関数を最小化するようなパラメータを求めます．ここで，ある関数を最小化する点を求める方法として，微分が使えることを既に学んでいます．今回のような差の二乗の場合，微分して「傾き0」となる点が損失が$0$となる点です．目的関数の微分を求めると，次のようになります．\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\dfrac{\\partial }{\\partial w} \\mathcal{L}  &= \\dfrac{\\partial}{\\partial w} { \\sum^{N}_{n=1} ( t_{n}-wx_{n})^{2} }\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "ここで，微分は**線形性**の性質を持っており，特に和の微分は，微分の和であることを利用して次を得ます．\n",
        "$$\n",
        "\\dfrac{\\partial}{\\partial w} \\mathcal{L}=\\sum^{N}_{n=1}\\dfrac {\\partial }{\\partial w}\\left( t_{n}-wx_{n}\\right)^{2}\n",
        "$$\n",
        "ここで微分と総和 $\\sum$ の記号が入れ替わっています．次に，和の各項をみると，\n",
        "$$\n",
        "\\dfrac {\\partial }{\\partial w}\\left( t_{n}-wx_{n}\\right)^{2}\n",
        "$$\n",
        "の部分は$t_n - wx_n$とその二乗の**合成関数**になっていることがわかります．$u_{n} = t_{n} - wx_{n}$, $f(u_{n}) = u_{n}^{2}$ とおくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\dfrac {\\partial }{\\partial w}\\left( t_{n}-wx_{n}\\right)^{2} &=  \\dfrac {\\partial }{\\partial w} f(u_{n}) \\\\\n",
        "\\Rightarrow \\dfrac {\\partial }{\\partial w} f(u_{n}) &= \\dfrac {\\partial u_{n}}{\\partial w} \\dfrac{\\partial f(u_{n})}{\\partial w} \\\\\n",
        "&=-x_{n} \\times 2 u_{n}  \\\\\n",
        "&= -2x_{n}( t_{n}-wx_{n} )\n",
        "\\end{aligned}\n",
        "$$\n",
        "が得られます．これより，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\dfrac{\\partial }{\\partial w} \\mathcal{L}\n",
        "&=\\sum^{N}_{n=1}\\dfrac {\\partial }{\\partial w}\\left( t_{n}-wx_{n}\\right)^{2}\n",
        "\\\\&=-\\sum^{N}_{n=1}2x_{n}\\left( t_{n}-wx_{n}\\right)\n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．この微分の値が0となるように$w$を求めていくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\dfrac {\\partial }{\\partial w} \\mathcal{L} &=0\\\\\n",
        "-2\\sum^{N}_{n=1}x_{n}\\left( t_{n}-wx_{n}\\right) &=0\\\\\n",
        "-2 \\sum^{N}_{n=1}x_{n}t_{n} + 2\\sum^{n}_{n=1}wx^{2}_{n}&=0\\\\\n",
        "-2\\sum^{N}_{n=1}x_{n}t_{n}+2w\\sum^{N}_{n=1}x^{2}_{n}&=0\\\\\n",
        "w\\sum^{N}_{n=1}x^{2}_{n}&=\\sum^{n}_{n=1}x_{n}t_{n}\\\\\n",
        "\\Rightarrow w&=\\dfrac {\\displaystyle  \\sum^{N}_{n=1}x_{n}t_{n}}{\\displaystyle  \\sum^{N}_{n=1}x^{2}_{n}}\n",
        "\\end{aligned}\n",
        "$$\n",
        "と求まりました．この求まったパラメータ $w$ を確認すると，与えられたデータセット $\\mathcal{D} = \\{x_n, t_n\\}_{n=1}^{N}$ のみから決定できていることがわかります．\n",
        "\n",
        "次に，例題にあげていた数値例でパラメータ $w$ を求めてみましょう．まずは，データの中心化を行うために，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\bar{x} &= \\dfrac{1}{3} (1 + 2 + 3) = 2 \\\\\n",
        "\\bar{t} &= \\dfrac{1}{3}(2 + 3.9 + 6.1) = 4\n",
        "\\end{aligned}\n",
        "$$\n",
        "とそれぞれの平均を求め，各変数に対して前処理として，中心化の処理を施すと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "x_{1} &= 1 - 2 = -1 \\\\\n",
        "x_{2} &= 2 -2 = 0 \\\\\n",
        "x_{3} &= 3- 2 = 1\\\\\n",
        "t_{1} &= 2 - 4 = -2\\\\\n",
        "t_{2} &= 3.9 - 4 = -0.1\\\\\n",
        "t_{3} &= 6.1 - 4 = 2.1 \n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．そして，中心化後の値を用いて，最適なパラメータ$w$を導出すると，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "w &= \\dfrac{\\displaystyle \\sum_{n=1}^{N}x_{n}t_{n}}{\\displaystyle  \\sum_{n=1}^{N}x_{n}^{2}} \\\\\n",
        "&= \\dfrac{x_{1}t_{1} + x_{2}t_{2} + x_{3}t_{3}}{x_{1}^{2} + x_{2}^{2} + x_{3}^{2}} \\\\\n",
        "&= \\dfrac{-1 \\times (-2) + 0 \\times 0.1 + 1 \\times 2.1}{(-1)^{2} + 0^2 + 1^2} \\\\\n",
        "&= 2.05\n",
        "\\end{aligned}\n",
        "$$\n",
        "と求まりました．これで単回帰分析の学習が完了しました．この求まったパラメータを使用したモデルが**学習済みモデル**となります．\n",
        "\n",
        "続いて，このモデルを使って新しいサンプルに対する予測をしてみましょう．これをモデルを使って入力から予測値を**推論**すると呼びます．例えば，新しいサンプル $x_{q}=1.5$ に対する予測値は次のように求まります，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y_{c} &= wx_{c} \\\\\n",
        "y_{q} - \\bar{t} &= w(x_{q}-\\bar{x}) \\\\\n",
        "\\Rightarrow y_{q} &= w(x_{q}-\\bar{x}) + \\bar{t} \\\\\n",
        "&= 2.05 \\times (1.5 - 2) + 4 \\\\\n",
        "&= 2.975\n",
        "\\end{aligned}\n",
        "$$\n",
        "以上が，単回帰分析の一連の手順となります．単回帰分析自体は単純な手法ですが，他の機械学習アルゴリズムも，基本的には同様の手順で進めていくことが出来ます．\n",
        "\n",
        "## 重回帰分析\n",
        "\n",
        "次に，多変数の入力変数を扱う重回帰分析を扱います．この重回帰分析を学ぶことで線形代数に関する知識が深まります．\n",
        "\n",
        "重回帰分析は単回帰分析と同様に教師あり学習の一種であり，回帰を取り扱う手法です．問題設定は，ほとんど単回帰分析と同じですが，重回帰分析では入力変数の数が複数となります．つまり，複数の入力変数から出力変数を予測できるような機械学習アルゴリズムです．\n",
        "\n",
        "### 問題設定\n",
        "\n",
        "ここでは単回帰分析の場合と同様に家賃を予測する問題を考え，家賃を出力変数 $y$ とします．入力変数としては，単回帰分析では考慮しきれていなかった駅からの距離や犯罪発生率なども考慮していきます．例えば，部屋の広さ $x_{1}$, 駅からの距離 $x_{2}$, ..., 犯罪発生率 $x_{M}$ のように $M$ 個の入力変数があるとします．\n",
        "\n",
        "単回帰分析と同様，以下の3ステップで学習していきます．\n",
        "\n",
        "- モデルを決める\n",
        "- 目的関数を決める\n",
        "- 最適なパラメータを求める\n",
        "\n",
        "### Step1. モデルを決める\n",
        "\n",
        "単回帰分析のモデルは，\n",
        "$$\n",
        "y = wx + b\n",
        "$$\n",
        "であり，$w$ を重み（weight），$b$ をバイアス (bias) と呼びました．重回帰分析では，この式を複数の入力変数へと拡張し，\n",
        "$$\n",
        "y=w_{1}x_{1}+w_{2}x_{2}+\\ldots +w_{M}x_{M}+b\n",
        "$$\n",
        "のような**線形結合**の形で表します．この場合，各入力変数は独立に出力変数に影響を与えることを仮定しており，かなり単純なモデル化といえます．実際には，入力変数間に依存関係が存在する場合には，そのことを考慮してモデル化を行う必要があります．それについては今後説明していきます．\n",
        "\n",
        "重回帰分析のモデルは総和を使って整理すると，\n",
        "$$\n",
        "y = \\sum_{m=1}^{M} w_{m} x_{m} + b\n",
        "$$\n",
        "のように書くことができます．さらにここで，$x_0 = 1$，$w_0 = b$とおくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y&=w_{1}x_{1}+w_{2}x_{2}+\\ldots +w_{M}x_{M}+b\\\\\n",
        "&=w_{1}x_{1}+w_{2}x_{2}+\\ldots +w_{M}x_{M}+w_{0} x_{0}\\\\\n",
        "&=w_{0}x_{0}+w_{1}x_{1}+\\ldots +w_{M}x_{M}\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "のようにバイアス $b$ を包含することができます．そして，この式を整理していくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y&=w_{0}x_{0}+w_{1}x_{1}+\\ldots +w_{M}x_{M}\\\\\n",
        "&=\\begin{bmatrix}\n",
        "w_{0} & w_{1} & \\ldots  & w_{M}\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "x_{0} \\\\\n",
        "x_{1} \\\\\n",
        "\\vdots  \\\\\n",
        "x_{M}\n",
        "\\end{bmatrix}\\\\\n",
        "&=\\boldsymbol{w}^{T}\\boldsymbol{x}\n",
        "\\end{aligned}\n",
        "$$\n",
        "のように，ベクトルの内積で表現することができます．また，今後取り扱う際には，$\\boldsymbol{x}$ が前に来ているほうが計算上便利であるため，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y&=w_{0}x_{0}+w_{1}x_{1}+\\ldots +w_{M}x_{M}\\\\\n",
        "&=\\begin{bmatrix}\n",
        "x_{0} & x_{1} & \\ldots  & x_{M}\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "w_{0} \\\\\n",
        "w_{1} \\\\\n",
        "\\vdots  \\\\\n",
        "w_{M}\n",
        "\\end{bmatrix}\\\\\n",
        "&=\\boldsymbol{x}^{T}\\boldsymbol{w}\n",
        "\\end{aligned}\n",
        "$$\n",
        "として表現します．これが重回帰分析のモデルです．今回はパラメータとして $M+1$ 個の重み $\\boldsymbol{w}$ を求めていきます．\n",
        "\n",
        "### Step2. 目的関数を決める\n",
        "\n",
        "単回帰分析では，教師データ$t$と予測値$y$の二乗誤差が小さいほど良い予測であるとし，その総和を目的関数として定めました．重回帰分析でも，予測値$y$を求めるということは同じであるため，次のような同じ目的関数を使います．\n",
        "$$\n",
        "\\begin{aligned}\n",
        "L&=\\left( t_{1}-y_{1}\\right)^{2}+\\left( t_{2}-y_{2}\\right)^{2}+\\ldots + \\left( t_{N}-y_{N}\\right)^{2}\n",
        "\\end{aligned}\n",
        "$$\n",
        "このように，**二乗誤差の総和**を単回帰分析同様，目的関数として採用します．単回帰分析では，これを\n",
        "$$\n",
        "\\mathcal{L}=\\sum^{N}_{n=1} ( t_{n} - y_{n})^{2}\n",
        "$$\n",
        "のように，総和の記号を使ってまとめていましたが，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}&=\\left( t_{1}-y_{1}\\right)^{2}+\\left( t_{2}-y_{2}\\right)^{2}+\\ldots + \\left( t_{N}-y_{N}\\right)^{2}\\\\\n",
        "&=\\begin{bmatrix} t_{1} - y_{1} & t_{2}-y_{2} & \\ldots & t_{N}-y_{N} \\end{bmatrix} \\begin{bmatrix}\n",
        "t_{1}-y_{1} \\\\\n",
        "t_{2}-y_{2} \\\\\n",
        "\\vdots \\\\\n",
        "t_{N}-y_{N}\n",
        "\\end{bmatrix}\\\\\n",
        "&=\\left( \\boldsymbol{t}-\\boldsymbol{y}\\right)^{T}\\left( \\boldsymbol{t}-\\boldsymbol{y}\\right) \n",
        "\\end{aligned}\n",
        "$$\n",
        "のようにベクトル使って表現することもできます．また，$\\boldsymbol{y}$ に関して，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\boldsymbol{y}=\\begin{bmatrix}\n",
        "y_{1} \\\\\n",
        "y_{2} \\\\\n",
        "\\vdots \\\\\n",
        "y_{N}\n",
        "\\end{bmatrix}=\\begin{bmatrix}\n",
        "\\boldsymbol{x}_{1}^{T}\\boldsymbol{w} \\\\\n",
        "\\boldsymbol{x}_{2}^{T}\\boldsymbol{w} \\\\\n",
        "\\vdots  \\\\\n",
        "\\boldsymbol{x}_{N}^{T}\\boldsymbol{w}\n",
        "\\end{bmatrix}\n",
        "=\\begin{bmatrix}\n",
        "\\boldsymbol{x}_{1}^{T} \\\\\n",
        "\\boldsymbol{x}_{2}^{T} \\\\\n",
        "\\vdots  \\\\\n",
        "\\boldsymbol{x}_{N}^{T}\n",
        "\\end{bmatrix}\n",
        "\\boldsymbol{w}\n",
        "\\end{aligned}\n",
        "$$\n",
        "のように書くことができます．これを整理すると，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\boldsymbol{y}&=\n",
        "\\begin{bmatrix}\n",
        "x_{10} & x_{11} & x_{12} & \\ldots  & x_{1M} \\\\\n",
        "x_{20} & x_{21} & x_{22} & \\ldots  & x_{2M} \\\\\n",
        "\\vdots  & \\vdots  & \\ddots  & \\vdots  \\\\\n",
        "x_{N0} & x_{N1} & x_{N{2}} & \\ldots  & x_{NM}\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "w_{0} \\\\\n",
        "w_{1} \\\\\n",
        "w_{2} \\\\\n",
        "\\vdots  \\\\\n",
        "w_{M}\n",
        "\\end{bmatrix}\\\\\n",
        "\\boldsymbol{y}&=\\boldsymbol{X}\\boldsymbol{w}\n",
        "\\end{aligned}\n",
        "$$\n",
        "と表記できます．ここで，行（横）方向がサンプルを表しており，例えば各物件に対応します．列（縦）方向が入力変数を表しており，例えば，部屋の広さや駅からの距離などが入っています．もう少し具体的な数値で考えると，部屋の広さ $= 50m^{2}$ ，駅からの距離 $= 600 m$ ，犯罪発生率 $= 2$% のような $n$ 番目の物件の場合，\n",
        "$$\n",
        "\\boldsymbol{x}_{n}^{T} = \\begin{bmatrix}\n",
        "1 & 50 & 600 & \\cdots & 0.02\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "のようにデータが行方向格納されているイメージです．先頭の $1$ はバイアスを包含する際に使用している $x_{0}$ であることに注意してください．\n",
        "\n",
        "### Step3. パラメータを最適化する\n",
        "\n",
        "それでは，（Step2で定めた）目的関数を最小化する，（Step1で定めた）モデルのパラメータを求めていきましょう．\n",
        "\n",
        "まずは目的関数に関して，パラメータ $\\boldsymbol{w}$ で表現できるように式変形を行うと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}&=\\left( \\boldsymbol{t}-\\boldsymbol{y}\\right)^{T}\\left( \\boldsymbol{t}-\\boldsymbol{y}\\right) \\\\\n",
        "&=\\left( \\boldsymbol{t}-\\boldsymbol{X}\\boldsymbol{w}\\right)^{T}\\left( \\boldsymbol{t}-\\boldsymbol{X}\\boldsymbol{w}\\right) \\\\\n",
        "&= \\left\\{ \\boldsymbol{t}^{T}-(\\boldsymbol{X}\\boldsymbol{w})^{T}\\right\\}\\left( \\boldsymbol{t}-\\boldsymbol{X}\\boldsymbol{w}\\right) \\\\\n",
        "&=\\left( \\boldsymbol{t}^{T}-\\boldsymbol{w}^{T}\\boldsymbol{X}^{T}\\right)\\left( \\boldsymbol{t}-\\boldsymbol{X}\\boldsymbol{w}\\right)\n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．ここで，転置の公式 $(\\boldsymbol{A}\\boldsymbol{B})^{T} = \\boldsymbol{B}^{T}\\boldsymbol{A}^{T}$ を使っていることに注意しましょう．さらに分配法則を使って展開を進めていくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}&=\\boldsymbol{t}^{T}\\boldsymbol{t}-\\boldsymbol{t}^{T}\\boldsymbol{X}\\boldsymbol{w}-\\boldsymbol{w}^{T}\\boldsymbol{X}^{T}\\boldsymbol{t} + \\boldsymbol{w}^{T}\\boldsymbol{X}^{T}\\boldsymbol{X}\\boldsymbol{w}\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．この目的関数に対しパラメータの$w$について偏微分をとりたいですが，その前にこの式はもう少し整理することができます．はじめに，\n",
        "$$\n",
        "(1)^T = 1\n",
        "$$\n",
        "というように，スカラーは転置しても同じです．上式の中で出てくる $\\boldsymbol{t}^{T}\\boldsymbol{X}\\boldsymbol{w}$ はスカラーなので，\n",
        "$$\n",
        "(\\boldsymbol{t}^{T}\\boldsymbol{X}\\boldsymbol{w})^{T} = \\boldsymbol{t}^{T}\\boldsymbol{X}\\boldsymbol{w}\n",
        "$$\n",
        "が成り立ちます．さらに，転置の公式 $(\\boldsymbol{A}\\boldsymbol{B}\\boldsymbol{C})^T = \\boldsymbol{C}^T\\boldsymbol{B}^T\\boldsymbol{A}^T$ より，\n",
        "$$\n",
        "(\\boldsymbol{t}^{T}\\boldsymbol{X}\\boldsymbol{w})^T = \\boldsymbol{w}^{T} \\boldsymbol{X}^{T} \\boldsymbol{t}\n",
        "$$\n",
        "も成り立ちます．これより，\n",
        "$$\n",
        "(\\boldsymbol{t}^{T}\\boldsymbol{X}\\boldsymbol{w})^{T} = \\boldsymbol{t}^{T}\\boldsymbol{X}\\boldsymbol{w} = \\boldsymbol{w}^{T} \\boldsymbol{X}^{T} \\boldsymbol{t}\n",
        "$$\n",
        "を導くことができます．目的関数を $\\mathcal{L}$ とおくと，上の式を利用して，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}=\\boldsymbol{t}^{T}\\boldsymbol{t}-2\\boldsymbol{t}^{T}\\boldsymbol{X}\\boldsymbol{w} + \\boldsymbol{w}^{T}\\boldsymbol{X}^{T}\\boldsymbol{X}\\boldsymbol{w}\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "とまとめることができます．ここで， $\\boldsymbol{w}$ に関する偏微分を行っていくため， $\\boldsymbol{w}$ 以外の定数項をまとめていくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}&=\\boldsymbol{t}^{T}\\boldsymbol{t}-2\\boldsymbol{t}^{T}\\boldsymbol{X}\\boldsymbol{w}+\\boldsymbol{w}^{T}\\boldsymbol{X}^{T}\\boldsymbol{X}\\boldsymbol{w}\\\\\n",
        "&=\\boldsymbol{t}^{T}\\boldsymbol{t}-2\\left( \\boldsymbol{X}^{T}\\boldsymbol{t}\\right)^{T} \\boldsymbol{w}+\\boldsymbol{w}^{T}\\boldsymbol{X}^{T}\\boldsymbol{X}\\boldsymbol{w} \\\\\n",
        "&=c+\\boldsymbol{b}^{T}\\boldsymbol{w}+\\boldsymbol{w}^{T}\\boldsymbol{A}\\boldsymbol{w} \n",
        "\\end{aligned}\n",
        "$$\n",
        "のように，線形代数で学んだ $\\boldsymbol{w}$ に関する二次形式（二次関数）で表現することができました．ここで，$\\boldsymbol{A}= \\boldsymbol{X}^{T}\\boldsymbol{X}, \\ \\boldsymbol{b} =-2 \\boldsymbol{X}^{T}\\boldsymbol{t}, \\ c=\\boldsymbol{t}^{T}\\boldsymbol{t}$ であり，$\\boldsymbol{b}$ を転置の形式にした理由は，線形代数で学んだベクトルで微分の公式の形式に合わせるための工夫です．\n",
        "\n",
        "それでは，目的関数を最小化することができるパラメータ $\\boldsymbol{w}$ の求め方を考えましょう．先述の通り，目的関数はパラメータ $\\boldsymbol{w}$に関して二次関数です．例えば，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\boldsymbol{w} = \\begin{bmatrix}\n",
        "w_{1} \\\\ w_{2}\n",
        "\\end{bmatrix}, \n",
        "\\boldsymbol{A}=\\begin{bmatrix}\n",
        "1 & 2 \\\\\n",
        "3 & 4\n",
        "\\end{bmatrix},\\boldsymbol{b}=\\begin{bmatrix}\n",
        "1 \\\\\n",
        "2\n",
        "\\end{bmatrix},c=1\n",
        "\\end{aligned}\n",
        "$$\n",
        "のように具体的な数値例で考えてみると，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L} &=\n",
        "\\boldsymbol{w}^{T}\\boldsymbol{A}\\boldsymbol{w}+\\boldsymbol{b}^{T}\\boldsymbol{w}+c\\\\\n",
        "&=\n",
        "\\begin{bmatrix}\n",
        "w_{1} & w_{2}\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "1 & 2 \\\\\n",
        "3 & 4\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "w_{1} \\\\\n",
        "w_{2}\n",
        "\\end{bmatrix}\n",
        "+\\begin{bmatrix}\n",
        "1 & 2\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "w_{1} \\\\\n",
        "w_{2}\n",
        "\\end{bmatrix}+1\\\\\n",
        "&=\n",
        "\\begin{bmatrix}\n",
        "w_{1} & w_{2}\n",
        "\\end{bmatrix}\n",
        "\\begin{bmatrix}\n",
        "w_{1}+2w_{2} \\\\\n",
        "3w_{1}+4w_{2}\n",
        "\\end{bmatrix}+w_{1}+2w_{2}+1\\\\\n",
        "&=w_{1}\\left( w_{1}+2w_{2}\\right) +w_{1}\\left( 3w_{1}+4w_{2}\\right) +w _{1}+2w_{2}+1\\\\\n",
        "&=w^{2}_{1}+5w_{1}w_{2}+4w^{2}_{2}+w_{1}+2w_{2}+1 \\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "となり，$w_{1}, w_{2}$に関してそれぞれまとめると，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}\n",
        "&=w^{2}_{1}+\\left( 5w_{2}+1\\right) w_{1} + \n",
        "\\left( 4w^{2}_{2}+2w_{2}+1\\right) \\\\\n",
        "&=4w^{2}_{2}+\\left( 5w_{1}+2\\right) w_{2}+\\left( w^{2}_{1}+w_{1}+1\\right) \\end{aligned}\n",
        "$$\n",
        "のようにそれぞれの二次関数であることがわかります．\n",
        "\n",
        "そして，二次関数であれば，下図のような形となります．\n",
        "\n",
        "![06.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/06.png)\n",
        "\n",
        "これを3次元でイメージすると，下図のようになります．\n",
        "\n",
        "![08.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/08.png)\n",
        "\n",
        "そして，目的関数である二乗誤差の総和が最小となる点では各変数で微分した時の傾きが0となります．\n",
        "\n",
        "![07.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/07.png)\n",
        "\n",
        "この例では，$w_{1}$ と $w_{2}$ の２つのパラメータの場合で考えましたが，これは $w_{0}$, $w_{1}$, $w_{2}$, $\\ldots$, $w_{M}$ の場合でも同様に考えることができ，目的関数が最小となる点は\n",
        "$$\n",
        "\\begin{cases}\n",
        "\\dfrac {\\partial }{\\partial w_{0}}\\mathcal{L}=0\\\\\n",
        "\\dfrac {\\partial }{\\partial w_{1}}\\mathcal{L}=0\\\\\n",
        "\\ \\ \\ \\ \\ \\vdots \\\\\n",
        "\\dfrac {\\partial }{\\partial w_{M}}\\mathcal{L}=0\\\\\n",
        "\\end{cases}\n",
        "$$\n",
        "となり，これをまとめると，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\begin{bmatrix}\n",
        "\\dfrac {\\partial}{\\partial w_{0}} \\mathcal{L} \\\\\n",
        "\\dfrac {\\partial}{\\partial w_{1}} \\mathcal{L} \\\\\n",
        "\\vdots  \\\\\n",
        "\\dfrac {\\partial}{\\partial w_{M}} \\mathcal{L} \\\\\n",
        "\\end{bmatrix}&=\\begin{bmatrix}\n",
        "0 \\\\\n",
        "0 \\\\\n",
        "\\vdots  \\\\\n",
        "0 \\\\\n",
        "\\end{bmatrix} \\\\\n",
        "\\Rightarrow \\dfrac {\\partial}{\\partial \\boldsymbol{w}} \\mathcal{L} &= \\boldsymbol{0} \\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "のようにベクトルでの微分として表されます．あとは，上式を満たすように $\\boldsymbol{w}$ を決めていきます．（下記の計算にはベクトルでの微分をはじめとして，線形代数で学んだ内容を活用しているため，計算途中がわからなくなった場合には，線形代数のパートを確認しながら進めてみてください．）\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\dfrac {\\partial }{\\partial \\boldsymbol{w}}\\mathcal{L} =\\dfrac {\\partial }{\\partial \\boldsymbol{w}}\\left( c+\\boldsymbol{b}^{T}\\boldsymbol{w}+\\boldsymbol{w}^{T}\\boldsymbol{A}\\boldsymbol{w}\\right)\n",
        "= \\boldsymbol{0}\\\\\n",
        "\\dfrac {\\partial }{\\partial \\boldsymbol{w}}\\left( c\\right) +\\dfrac {\\partial }{\\partial \\boldsymbol{w}}\\left( \\boldsymbol{b}^{T}\\boldsymbol{w}\\right) +\\dfrac {\\partial }{\\partial \\boldsymbol{w}}\\left( \\boldsymbol{w}^{T}\\boldsymbol{A}\\boldsymbol{w}\\right) \n",
        "=\\boldsymbol{0}\\\\\n",
        "\\boldsymbol{0}+\\boldsymbol{b}+\\left( \\boldsymbol{A}+\\boldsymbol{A}^{T}\\right) \\boldsymbol{w} =\\boldsymbol{0}\\\\\n",
        "-2\\boldsymbol{X}^{T}\\boldsymbol{t}+\\left\\{ \\boldsymbol{X}^{T}\\boldsymbol{X} + \\left( \\boldsymbol{X}^{T}\\boldsymbol{X}\\right)^{T}\\right\\} \\boldsymbol{w}\n",
        "=\\boldsymbol{0}\\\\\n",
        "-2\\boldsymbol{X}^{T}\\boldsymbol{t}+2\\boldsymbol{X}^{T}\\boldsymbol{X}\\boldsymbol{w}=\\boldsymbol{0}\\\\\n",
        "\\boldsymbol{X}^{T}\\boldsymbol{X}\\boldsymbol{w}=\\boldsymbol{X}^{T}\\boldsymbol{t}\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "ここで，両辺に左側から $\\left( \\boldsymbol{X}^{T}\\boldsymbol{X}\\right)^{-1}$ をかけると，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\left( \\boldsymbol{X}^{T}\\boldsymbol{X}\\right)^{-1}\\boldsymbol{X}^{T}\\boldsymbol{X} \\boldsymbol{w} =\\left( \\boldsymbol{X}^{T}\\boldsymbol{X}\\right)^{-1}\\boldsymbol{X}^{T}\\boldsymbol{t} \\\\\n",
        "\\boldsymbol{I}\\boldsymbol{w}=\\left( \\boldsymbol{X}^{T}\\boldsymbol{X}\\right)^{-1}\\boldsymbol{X}^{T}\\boldsymbol{t} \\\\\n",
        "\\boldsymbol{w}=\\left( \\boldsymbol{X}^{T}\\boldsymbol{X}\\right)^{-1}\\boldsymbol{X}^{T}\\boldsymbol{t}\n",
        "\\end{aligned}\n",
        "$$\n",
        "となり，与えられたデータセット $\\boldsymbol{X}, \\boldsymbol{t}$ から，最適なパラメータ $\\boldsymbol{w}$ が求まりました．ここで，$\\boldsymbol{I}$ は単位行列です．また，式変形の際には，\n",
        "$$\n",
        "\\boldsymbol{w} = \\dfrac{\\boldsymbol{X}^{T}\\boldsymbol{t}}{\\boldsymbol{X}^{T}\\boldsymbol{X}}\n",
        "$$\n",
        "のような分数が表れないように注意してください．これは行列の計算には割り算がないためです．そのため，逆行列を使って行列積のみで計算しています．\n",
        "\n",
        "また，もうひとつよくある間違いとして，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\boldsymbol{X}^{T}\\boldsymbol{X}\\boldsymbol{w}&=\\boldsymbol{X}^{T}\\boldsymbol{t}\\\\\n",
        "\\left( \\boldsymbol{X}^{T}\\right)^{-1}\\boldsymbol{X}^{T}\\boldsymbol{X}\\boldsymbol{w}&=\\left( \\boldsymbol{X}^{T}\\right)^{-1}\\boldsymbol{X}^{T}\\boldsymbol{t}\\\\\n",
        "\\boldsymbol{X}\\boldsymbol{w}&=\\boldsymbol{t}\\\\\n",
        "\\boldsymbol{X}^{-1}\\boldsymbol{X}\\boldsymbol{w}&=\\boldsymbol{X}^{-1}\\boldsymbol{t}\\\\\n",
        "\\boldsymbol{w}&=\\boldsymbol{X}^{-1}\\boldsymbol{t}\n",
        "\\end{aligned}\n",
        "$$\n",
        "のような式変形をする場合もみられます．しかし，これは一般的には成立しません．その理由として，線形代数の章で説明した逆行列を持つための条件として，**正方行列であること**を満たしていないためです．バイアス $\\boldsymbol{b}$ を $\\boldsymbol{w}$ に包含することを無視する場合 $\\boldsymbol{X} \\in \\mathcal{R}^{N \\times M}$ であり，バイアスの包含を考慮する場合は $\\boldsymbol{X} \\in \\mathcal{R}^{N \\times (M+1)}$ です．一般的に，サンプル数 $N$ と入力変数の数 $M$ は等しくないため，$\\boldsymbol{X}$は正方行列ではなく，逆行列をもちません．それに対し，例えば，$\\boldsymbol{X} \\in \\mathcal{R}^{N \\times M}$ の場合，$\\boldsymbol{X}^{T}\\boldsymbol{X} \\in \\mathcal{R}^{M\\times M}$ となり，サンプル数 $N$ に依存することなく，常に正方行列となります．（逆行列が求まるためにはもう少し厳密な条件があるので，さらに詳しく知りたい方は各自調べてみてください．）\n",
        "\n",
        "推論の際は学習で得られたパラメータ $\\boldsymbol{w}$ を用いて，\n",
        "$$\n",
        "y_{q} = \\boldsymbol{w}^{T}\\boldsymbol{x}_{q}\n",
        "$$\n",
        "のように計算することで予測値が得られます．\n",
        "\n",
        "## Numpyによる実装\n",
        "\n",
        "それでは重回帰分析を例に，Pythonで線形代数を用いた実装を行っていきましょう．Pythonには**Numpy**と呼ばれる線形代数を簡単に扱えるライブラリが存在し，広く利用されています．次の章で紹介するChainerの中でもNumpyは多用されており，ディープラーニングを学ぶための第一歩として，まずはNumpyの使い方を習得することが重要です．\n",
        "\n",
        "Pythonの文法に関しては把握していることを前提に進めています．具体的には，変数（数値・文字列，リスト，タプル，辞書），制御構文（for，if），関数，クラスを理解している必要があります．\n",
        "\n",
        "重回帰分析では，最終的に最適なパラメータ $\\boldsymbol{w}$ が\n",
        "$$\n",
        "\\boldsymbol{w}=\\left( \\boldsymbol{X}^{T}\\boldsymbol{X}\\right)^{-1}\\boldsymbol{X}^{T}\\boldsymbol{t}\n",
        "$$\n"
      ]
    },
    {
      "metadata": {
        "id": "63jvxwSk2Y28",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "で求まりました．この最適なパラメータを求めるために，以下の5つを扱います．\n",
        "\n",
        "- ベクトルの定義\n",
        "- 行列の定義\n",
        "- 転置\n",
        "- 行列積\n",
        "- 逆行列\n",
        "\n",
        "具体的に，以下のようなデータセットが与えられているケースを想定してみましょう．\n",
        "\n",
        "$$\n",
        "\\boldsymbol{X} = \n",
        "\\begin{bmatrix}\n",
        "1 & 2 & 3 \\\\\n",
        "1 & 2 & 5 \\\\\n",
        "1 & 3 & 4 \\\\  \n",
        "1 & 5 & 9 \n",
        "\\end{bmatrix}, \\\n",
        "\\boldsymbol{t} = \n",
        "\\begin{bmatrix}\n",
        "1 \\\\ 5 \\\\ 6 \\\\ 8\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "それぞれの実装について，見ていきましょう．まずは，Numpyの読み込みから始めます．"
      ]
    },
    {
      "metadata": {
        "id": "vEy_FvRJ2Y2_",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "43TxMSHH2Y3C",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "ベクトルの定義は以下のように行います．"
      ]
    },
    {
      "metadata": {
        "id": "sQd-4mXv2Y3D",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "t = np.array([[1], [5], [6], [8]])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Z_fjFYsu2Y3H",
        "colab_type": "code",
        "colab": {},
        "outputId": "294557c8-f74e-4eff-a19c-e786952e4516"
      },
      "cell_type": "code",
      "source": [
        "print(t)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1]\n",
            " [5]\n",
            " [6]\n",
            " [8]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "lvE4dLpP2Y3P",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "つぎに，行列の定義も行いましょう．"
      ]
    },
    {
      "metadata": {
        "id": "wxbCgDEl2Y3R",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X = np.array([\n",
        "    [1, 2, 3],\n",
        "    [1, 2, 5],\n",
        "    [1, 3, 4],\n",
        "    [1, 5, 9]\n",
        "])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "UdFu-c3p2Y3W",
        "colab_type": "code",
        "colab": {},
        "outputId": "fcf34707-d1d6-4731-8a79-647e756eb25a"
      },
      "cell_type": "code",
      "source": [
        "print(X)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 2 3]\n",
            " [1 2 5]\n",
            " [1 3 4]\n",
            " [1 5 9]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "3Dej1LjB2Y3f",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "ここで，Xの転置を行ってみましょう．Numpyの`array`で定義されている場合，`.T`をつけるだけで転置することができます．"
      ]
    },
    {
      "metadata": {
        "id": "Sc1SrowF2Y3g",
        "colab_type": "code",
        "colab": {},
        "outputId": "b82bf323-d747-4613-deac-487e4aa943db"
      },
      "cell_type": "code",
      "source": [
        "print(X.T)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 1 1 1]\n",
            " [2 2 3 5]\n",
            " [3 5 4 9]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "gXWmTlNM2Y3n",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "縦と横が入れ替わっていることを確認できます．\n",
        "\n",
        "行列積は以下のように `np.dot` によって実現できます．行列積を行う際には，一番目の行列の列数と，二番目の行列の行数が同じであることに注意して下さい．"
      ]
    },
    {
      "metadata": {
        "id": "v5Qm-akG2Y3o",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "XX = np.dot(X.T, X)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "K2BpUnAW2Y3u",
        "colab_type": "code",
        "colab": {},
        "outputId": "e9bb9a20-f549-4ff7-b076-8671b888aa76"
      },
      "cell_type": "code",
      "source": [
        "print(XX)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[  4  12  21]\n",
            " [ 12  42  73]\n",
            " [ 21  73 131]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "cwDD9lQc2Y34",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "この逆行列を求めるには，`np.linalg.inv` を用います．"
      ]
    },
    {
      "metadata": {
        "id": "vTS7OiuF2Y36",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "XX_inv = np.linalg.inv(XX)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "yUFnXFgH2Y4B",
        "colab_type": "code",
        "colab": {},
        "outputId": "0467caeb-68e8-4c28-b54f-1c14408c2fe2"
      },
      "cell_type": "code",
      "source": [
        "print(XX_inv)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 1.76530612 -0.39795918 -0.06122449]\n",
            " [-0.39795918  0.84693878 -0.40816327]\n",
            " [-0.06122449 -0.40816327  0.24489796]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "S4UccbfX2Y4H",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "これで重回帰分析のために必要な演算が揃いました．最適なパラメータを求めると，"
      ]
    },
    {
      "metadata": {
        "id": "MUDf1lul2Y4I",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "Xt = np.dot(X.T, t)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4woi1AWA2Y4P",
        "colab_type": "code",
        "colab": {},
        "outputId": "4baece46-f8d8-4ae3-ca19-8a2e55fa9fed"
      },
      "cell_type": "code",
      "source": [
        "print(Xt)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 20]\n",
            " [ 70]\n",
            " [124]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "E2PDggtE2Y4U",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "w = np.dot(XX_inv, Xt)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "f0ldbwNx2Y4Y",
        "colab_type": "code",
        "colab": {},
        "outputId": "0a93c8a4-ba37-4fdb-bf1a-1cf606aa9241"
      },
      "cell_type": "code",
      "source": [
        "print(w)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[-0.14285714]\n",
            " [ 0.71428571]\n",
            " [ 0.57142857]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "lwbp0Oe52Y4d",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "このようにパラメータ $\\boldsymbol{w}$ が求まりました．Numpyを使うことで，数式をそのままプログラミング上で書くことができます．"
      ]
    },
    {
      "metadata": {
        "id": "nOcnH9gD2Y4f",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## Scikit-learnによる本格的な実装"
      ]
    },
    {
      "metadata": {
        "id": "3U87Nhu12Y4h",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "重回帰分析であればNumpyで簡単に実装することができましたが，実践的に使用する機械学習アルゴリズムの多くは複雑であり，初学者が一から書くには難しい場合も少なくありません．そこで，Pythonでは**Scikit-learn**と呼ばれる機械学習用のフレームワークが公開されており，初学者でも簡単に機械学習を扱うことができます．\n",
        "\n",
        "まずは重回帰分析をScikit-learnによって実装してみましょう．\n",
        "\n",
        "### Scikit-learn 基礎編\n",
        "\n",
        "Scikit-learnは`sklearn`という名前で呼び出すことができます．"
      ]
    },
    {
      "metadata": {
        "id": "PvEybj2F2Y4i",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import sklearn"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "i5a4UQLC2Y4n",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "たとえば，重回帰分析を使用する場合は以下のように呼び出します．"
      ]
    },
    {
      "metadata": {
        "id": "JroSiyCK2Y4p",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4KGFnf-R2Y4v",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "なお，使い方を調べる際には，[公式のリファレンス](http://scikit-learn.org/)に加えて，「重回帰分析 Scikit-learn」と検索して，実例のソースコードを見るほうが早い場合も多くあります．\n",
        "\n",
        "重回帰分析のアルゴリズムはクラスとして定義されているので，インスタンス化を行います．"
      ]
    },
    {
      "metadata": {
        "id": "r4423bMx2Y4y",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "model = LinearRegression()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "6BGDOxEL2Y42",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "これだけで，重回帰分析を使用するための準備が完了です．パラメータの学習は以下のように行います．"
      ]
    },
    {
      "metadata": {
        "id": "zxe9Bd9_2Y44",
        "colab_type": "code",
        "colab": {},
        "outputId": "e5dfd740-87ae-4373-945c-104f6ec65836"
      },
      "cell_type": "code",
      "source": [
        "model.fit(X, t)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "metadata": {
        "id": "iWySchd_2Y47",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "結果の検証は，次のように行います．"
      ]
    },
    {
      "metadata": {
        "id": "vn_lB9C_2Y48",
        "colab_type": "code",
        "colab": {},
        "outputId": "e2bc0cec-d9c7-4344-d05b-a0a8e06fec91"
      },
      "cell_type": "code",
      "source": [
        "model.score(X, t)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6923076923076926"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "metadata": {
        "id": "lzM69ESp2Y5E",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "分類の場合は**精度**，回帰の場合は**決定係数**とよばれる指標が自動的に計算されるようになっています．\n",
        "このように，Scikit-learnでは，簡単なインターフェースでやり取りができるようになっています．Scikit-learnの良い点は，最初にアルゴリズムを決めてしまえば，どのアルゴリズムでも，`.fit`で学習，`.score`で検証が行える点です．\n",
        "\n",
        "また，アルゴリズムによって内容は多少異なりますが，パラメータもインスタンス変数として格納されているため，学習後に確認することができます．"
      ]
    },
    {
      "metadata": {
        "id": "mkj5j0as2Y5F",
        "colab_type": "code",
        "colab": {},
        "outputId": "a4b2e255-0fed-4282-c677-59dbaa4365d9"
      },
      "cell_type": "code",
      "source": [
        "# パラメータw\n",
        "model.coef_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.        , 0.71428571, 0.57142857]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "metadata": {
        "id": "XUFluRmk2Y5L",
        "colab_type": "code",
        "colab": {},
        "outputId": "e633734d-4797-40d1-aad4-ad6e9008e24e"
      },
      "cell_type": "code",
      "source": [
        "# バイアスb\n",
        "model.intercept_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-0.14285714])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "metadata": {
        "id": "RvOh9BvY2Y5U",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "この例からわかるように，Scikit-learnでは，パラメータとバイアスがそれぞれ準備されているため，入力変数 $\\boldsymbol{X}$ の左端の列に1を格納した変数を入れる必要がありません．"
      ]
    },
    {
      "metadata": {
        "id": "ZXxRn6-G2Y5W",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Scikit-learn 応用編\n",
        "\n",
        "Scikit-learnは機械学習の実装を支援する多くの機能を兼ね備えています．\n",
        "\n",
        "まず最初にサンプルのデータセットの取り扱いを紹介します．Scikit-learnにサンプルのデータセットがいくつか提供されています．今回はその中から，`load_boston`というボストン近郊の家賃に関するデータセットを使用しましょう．"
      ]
    },
    {
      "metadata": {
        "id": "pwlomQyI2Y5Y",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import load_boston"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "LbYctuQb2Y5b",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "boston = load_boston()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "8dC8gbSa2Y5f",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "変数の`boston`には辞書と同じ形式で格納されており，変数の中身を見ながら入力変数と教師データに対応するものを見つけていきます．"
      ]
    },
    {
      "metadata": {
        "id": "A1_Sk-Zg2Y5h",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X = boston['data']\n",
        "t = boston['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "BOx8YETS2Y5o",
        "colab_type": "code",
        "colab": {},
        "outputId": "9259e693-3742-4e60-e6ed-e3c13c52f359"
      },
      "cell_type": "code",
      "source": [
        "print(X)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[6.3200e-03 1.8000e+01 2.3100e+00 ... 1.5300e+01 3.9690e+02 4.9800e+00]\n",
            " [2.7310e-02 0.0000e+00 7.0700e+00 ... 1.7800e+01 3.9690e+02 9.1400e+00]\n",
            " [2.7290e-02 0.0000e+00 7.0700e+00 ... 1.7800e+01 3.9283e+02 4.0300e+00]\n",
            " ...\n",
            " [6.0760e-02 0.0000e+00 1.1930e+01 ... 2.1000e+01 3.9690e+02 5.6400e+00]\n",
            " [1.0959e-01 0.0000e+00 1.1930e+01 ... 2.1000e+01 3.9345e+02 6.4800e+00]\n",
            " [4.7410e-02 0.0000e+00 1.1930e+01 ... 2.1000e+01 3.9690e+02 7.8800e+00]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "mEMzGp3p2Y5u",
        "colab_type": "code",
        "colab": {},
        "outputId": "fa47d8c9-aca1-4f1a-bd96-2e345894c1bc"
      },
      "cell_type": "code",
      "source": [
        "print(t)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[24.  21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5 18.9 15.  18.9 21.7 20.4\n",
            " 18.2 19.9 23.1 17.5 20.2 18.2 13.6 19.6 15.2 14.5 15.6 13.9 16.6 14.8\n",
            " 18.4 21.  12.7 14.5 13.2 13.1 13.5 18.9 20.  21.  24.7 30.8 34.9 26.6\n",
            " 25.3 24.7 21.2 19.3 20.  16.6 14.4 19.4 19.7 20.5 25.  23.4 18.9 35.4\n",
            " 24.7 31.6 23.3 19.6 18.7 16.  22.2 25.  33.  23.5 19.4 22.  17.4 20.9\n",
            " 24.2 21.7 22.8 23.4 24.1 21.4 20.  20.8 21.2 20.3 28.  23.9 24.8 22.9\n",
            " 23.9 26.6 22.5 22.2 23.6 28.7 22.6 22.  22.9 25.  20.6 28.4 21.4 38.7\n",
            " 43.8 33.2 27.5 26.5 18.6 19.3 20.1 19.5 19.5 20.4 19.8 19.4 21.7 22.8\n",
            " 18.8 18.7 18.5 18.3 21.2 19.2 20.4 19.3 22.  20.3 20.5 17.3 18.8 21.4\n",
            " 15.7 16.2 18.  14.3 19.2 19.6 23.  18.4 15.6 18.1 17.4 17.1 13.3 17.8\n",
            " 14.  14.4 13.4 15.6 11.8 13.8 15.6 14.6 17.8 15.4 21.5 19.6 15.3 19.4\n",
            " 17.  15.6 13.1 41.3 24.3 23.3 27.  50.  50.  50.  22.7 25.  50.  23.8\n",
            " 23.8 22.3 17.4 19.1 23.1 23.6 22.6 29.4 23.2 24.6 29.9 37.2 39.8 36.2\n",
            " 37.9 32.5 26.4 29.6 50.  32.  29.8 34.9 37.  30.5 36.4 31.1 29.1 50.\n",
            " 33.3 30.3 34.6 34.9 32.9 24.1 42.3 48.5 50.  22.6 24.4 22.5 24.4 20.\n",
            " 21.7 19.3 22.4 28.1 23.7 25.  23.3 28.7 21.5 23.  26.7 21.7 27.5 30.1\n",
            " 44.8 50.  37.6 31.6 46.7 31.5 24.3 31.7 41.7 48.3 29.  24.  25.1 31.5\n",
            " 23.7 23.3 22.  20.1 22.2 23.7 17.6 18.5 24.3 20.5 24.5 26.2 24.4 24.8\n",
            " 29.6 42.8 21.9 20.9 44.  50.  36.  30.1 33.8 43.1 48.8 31.  36.5 22.8\n",
            " 30.7 50.  43.5 20.7 21.1 25.2 24.4 35.2 32.4 32.  33.2 33.1 29.1 35.1\n",
            " 45.4 35.4 46.  50.  32.2 22.  20.1 23.2 22.3 24.8 28.5 37.3 27.9 23.9\n",
            " 21.7 28.6 27.1 20.3 22.5 29.  24.8 22.  26.4 33.1 36.1 28.4 33.4 28.2\n",
            " 22.8 20.3 16.1 22.1 19.4 21.6 23.8 16.2 17.8 19.8 23.1 21.  23.8 23.1\n",
            " 20.4 18.5 25.  24.6 23.  22.2 19.3 22.6 19.8 17.1 19.4 22.2 20.7 21.1\n",
            " 19.5 18.5 20.6 19.  18.7 32.7 16.5 23.9 31.2 17.5 17.2 23.1 24.5 26.6\n",
            " 22.9 24.1 18.6 30.1 18.2 20.6 17.8 21.7 22.7 22.6 25.  19.9 20.8 16.8\n",
            " 21.9 27.5 21.9 23.1 50.  50.  50.  50.  50.  13.8 13.8 15.  13.9 13.3\n",
            " 13.1 10.2 10.4 10.9 11.3 12.3  8.8  7.2 10.5  7.4 10.2 11.5 15.1 23.2\n",
            "  9.7 13.8 12.7 13.1 12.5  8.5  5.   6.3  5.6  7.2 12.1  8.3  8.5  5.\n",
            " 11.9 27.9 17.2 27.5 15.  17.2 17.9 16.3  7.   7.2  7.5 10.4  8.8  8.4\n",
            " 16.7 14.2 20.8 13.4 11.7  8.3 10.2 10.9 11.   9.5 14.5 14.1 16.1 14.3\n",
            " 11.7 13.4  9.6  8.7  8.4 12.8 10.5 17.1 18.4 15.4 10.8 11.8 14.9 12.6\n",
            " 14.1 13.  13.4 15.2 16.1 17.8 14.9 14.1 12.7 13.5 14.9 20.  16.4 17.7\n",
            " 19.5 20.2 21.4 19.9 19.  19.1 19.1 20.1 19.9 19.6 23.2 29.8 13.8 13.3\n",
            " 16.7 12.  14.6 21.4 23.  23.7 25.  21.8 20.6 21.2 19.1 20.6 15.2  7.\n",
            "  8.1 13.6 20.1 21.8 24.5 23.1 19.7 18.3 21.2 17.5 16.8 22.4 20.6 23.9\n",
            " 22.  11.9]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "HSmYtyiW2Y53",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Numpyの形式で入力変数と教師データが格納されており，`.shape`を使うことで行と列の数を確認できます．"
      ]
    },
    {
      "metadata": {
        "id": "vpihJ3YW2Y55",
        "colab_type": "code",
        "colab": {},
        "outputId": "865b2c7e-5f5d-4856-fea9-30733e1ce00d"
      },
      "cell_type": "code",
      "source": [
        "X.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(506, 13)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "metadata": {
        "id": "DGTdy5F42Y5_",
        "colab_type": "code",
        "colab": {},
        "outputId": "1cdf1bf6-0441-4066-d90c-849a658a5257"
      },
      "cell_type": "code",
      "source": [
        "t.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(506,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "metadata": {
        "id": "h8kyb0Dg2Y6F",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "つぎに，**訓練データ**と**検証データ**の分割です．学習の時と同じデータを使って性能を検証した場合，モデルが学習データだけをうまくモデル化し，同じような分布からとられた未知のデータはうまくいかない場合があります．これを**過学習**とよびます．機械学習ではこれを防ぐために学習データと別に性能を評価する検証データを分けて評価します．このように分割して検証することを**ホールドアウト法**とよびます．\n",
        "\n",
        "Scikit-learnでは訓練用と検証用を分割する機能が用意されています．"
      ]
    },
    {
      "metadata": {
        "id": "R5CU-k1T2Y6G",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "76dR6BcP2Y6K",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "pxBmPpxi2Y6R",
        "colab_type": "code",
        "colab": {},
        "outputId": "8ed254c6-d29d-4d86-ce6d-bf420ecabdb5"
      },
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(354, 13)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        }
      ]
    },
    {
      "metadata": {
        "id": "qyXYZGvv2Y6Y",
        "colab_type": "code",
        "colab": {},
        "outputId": "cd6e39d0-4a4f-47fd-bdf0-fa3b2d6db442"
      },
      "cell_type": "code",
      "source": [
        "X_test.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(152, 13)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "metadata": {
        "id": "tJyIbtj42Y6b",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "引数の`test_size`は検証用に使うデータの比率であり，0.3と指定すると全体の30%が検証データとなります．また，`random_state`は乱数のシードであり，再現性を確保するためのものです．なぜ乱数が登場するかというと，前から70%を訓練用，残りを検証用とするのではなく，全体からランダムに選択した70%を訓練用，残り30%を検証用と選択しているためです．"
      ]
    },
    {
      "metadata": {
        "id": "1kpXJt_-2Y6d",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "訓練データを用いて学習します．"
      ]
    },
    {
      "metadata": {
        "id": "wQ8SwP0q2Y6e",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "model = LinearRegression()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "PJlBMdGY2Y6i",
        "colab_type": "code",
        "colab": {},
        "outputId": "a0a580fd-b9e4-4462-f2fd-6568d41df286"
      },
      "cell_type": "code",
      "source": [
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "metadata": {
        "id": "_BARQrTC2Y6q",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "検証を行う場合は，訓練データと検証データの両方に対してチェックしておくと良いでしょう．"
      ]
    },
    {
      "metadata": {
        "id": "YQdUNZ6S2Y6r",
        "colab_type": "code",
        "colab": {},
        "outputId": "206d5075-9bc9-42da-926f-8b47fe58da2a"
      },
      "cell_type": "code",
      "source": [
        "# 訓練データ\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7644563391821222"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        }
      ]
    },
    {
      "metadata": {
        "id": "77Nms7tI2Y6u",
        "colab_type": "code",
        "colab": {},
        "outputId": "dc7d522f-9acc-44b9-8843-d57001e43a0b"
      },
      "cell_type": "code",
      "source": [
        "# 検証データ\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.673528086534723"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "metadata": {
        "id": "XuMZqq_w2Y6y",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "検証データだけでなく，訓練データでも検証することで学習に失敗している場合の問題を切り分けることができます．\n",
        "\n",
        "|訓練データ|検証データ|結果|\n",
        "|:--|:--|:--|\n",
        "|×|×|アンダーフィッティング|\n",
        "|〇|×|オーバーフィッティング|\n",
        "|〇|〇|ＯＫ|\n",
        "\n",
        "**アンダーフィッティング**の場合，現状の機械学習アルゴリズムでうまくデータの特徴を捉えられていないと考えられ，アルゴリズムを変更したり，入力データの特徴をより適切に表現できるような変換を考えます．逆に**オーバーフィッティング**の場合，アルゴリズムでデータの特徴をある程度捉えられていることは確認できているので，モデルが過学習しないように対策していきます．代表的な方法として，**ハイパーパラメータ**と呼ばれる各アルゴリズムのパラメータ学習に使われるパラメータ値を調整していくことで解決できる場合があります．このように，望ましい結果が得られない中にも，それぞれの状況を把握することで次に打つべき対策が変わってくるため，訓練データと検証データの両方に対する検証を行うことは重要であることが分かります．\n",
        "\n",
        "また，Scikit-learnでは，スケーリングも行うことができます．例えば，平均0，標準偏差1に変換するデータ正規化を行う場合の手順は以下の通りです．"
      ]
    },
    {
      "metadata": {
        "id": "7nQiaY0-2Y6z",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "_h7JFA1n2Y62",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# インスタンス化\n",
        "scaler = StandardScaler()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "qIm7zbMO2Y66",
        "colab_type": "code",
        "colab": {},
        "outputId": "5cb09423-b4c4-4293-ed41-6f6416d8f609"
      },
      "cell_type": "code",
      "source": [
        "# 平均の分散（標準偏差）を学習\n",
        "scaler.fit(X_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StandardScaler(copy=True, with_mean=True, with_std=True)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "metadata": {
        "id": "hIERf0fi2Y7A",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 変換\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s  = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "6sXWX8bm2Y7C",
        "colab_type": "code",
        "colab": {},
        "outputId": "199d6dea-fb1e-4919-a196-6d677635bd08"
      },
      "cell_type": "code",
      "source": [
        "print(X_train_s)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[-0.20416267 -0.49997924  1.54801583 ...  1.2272573   0.42454294\n",
            "   3.10807269]\n",
            " [-0.38584317  0.34677427 -0.58974728 ...  0.05696346  0.40185312\n",
            "  -0.66643035]\n",
            " [-0.33266283 -0.49997924  1.54801583 ...  1.2272573   0.39846135\n",
            "   0.63936662]\n",
            " ...\n",
            " [-0.38147768 -0.49997924 -0.15303077 ... -0.30312696  0.39659002\n",
            "  -0.30284441]\n",
            " [-0.3720831  -0.49997924 -0.59690657 ... -0.25811566  0.37588849\n",
            "   0.89967717]\n",
            " [-0.38289844 -0.49997924 -1.00641779 ... -0.84326258  0.42454294\n",
            "   0.31822262]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "MKqbj6if2Y7H",
        "colab_type": "code",
        "colab": {},
        "outputId": "5cefe9cf-e319-4a97-f2a5-6028b88271a6"
      },
      "cell_type": "code",
      "source": [
        "print(X_test_s)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[-0.39152624 -0.49997924 -1.12239824 ... -0.70822867  0.17086147\n",
            "  -0.72160487]\n",
            " [ 0.70825498 -0.49997924  1.00534187 ...  0.77714428  0.0648977\n",
            "  -0.41177872]\n",
            " [-0.38588517 -0.49997924  0.4025299  ... -0.93328518  0.38758427\n",
            "  -0.27454978]\n",
            " ...\n",
            " [ 1.6177735  -0.49997924  1.00534187 ...  0.77714428  0.42454294\n",
            "   2.59876943]\n",
            " [-0.34043865 -0.49997924 -0.1687812  ... -0.03305915  0.42454294\n",
            "  -1.11772962]\n",
            " [-0.39601293 -0.49997924 -1.27417512 ...  0.10197476  0.39202867\n",
            "  -1.02294263]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "tagV90wV2Y7M",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## 実用的な機械学習アルゴリズムの紹介\n",
        "\n",
        "ここからは，実践的に活用されている機械学習アルゴリズムについて特徴とともに紹介していきます．ここでは概要の紹介のみ行うため，気になった場合は参考図書を見て学びを深めてください．\n",
        "\n",
        "Scikit-learnを使うことによって実装は非常に手軽に行うことができますが，数式を理解していないがゆえに，うまくいかないときの対処法がわからないという問題も出てきます．ここでは，この問題につまずかないように，ハイパーパラメータのチューニングも併せて紹介していきます．"
      ]
    },
    {
      "metadata": {
        "id": "JvITJjvJ2Y7M",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Support Vector Machine (SVM)\n",
        "\n",
        "SVMは実用的によく使われる手法の一つであり，入出力間の非線形性を捉えることができます．ただし，非線形なモデルの場合，$y = wx^2$や，$y = w\\sin(x)$やその重ね合わせといったように，組み合わせの候補が無限に存在するため，モデルの設計が難しくなります．事前にある程度，入出力間の関係性が把握できていれば定式化のアイディアも存在しますが，そのような事前知識があるような状況は，そう多くはありません．\n",
        "\n",
        "そこで，SVMでは**カーネルトリック**と呼ばれるテクニックを利用して，データ間の類似度（カーネル）から入出力間の非線形性の定式化を行います．\n",
        "\n",
        "SVMには連続値を予測する**回帰 (Regression)** とカテゴリを予測する**分類 (Classification)** の両方に対応した手法があります．それぞれ，**，Support Vector Regression (SVR)** と **Support Vector Classification (SVC)** と呼びます．まずは回帰の問題設定で紹介し，前回と同様，ボストン近郊の家賃予測の例題を取り扱います．\n",
        "\n",
        "#### Support Vector Regression (SVR)"
      ]
    },
    {
      "metadata": {
        "id": "C0zFPn7m2Y7O",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# データの準備\n",
        "from sklearn.datasets import load_boston\n",
        "\n",
        "boston = load_boston()\n",
        "X = boston['data']\n",
        "t = boston['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "E3vMcgaK2Y7P",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練と検証データの分割\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Ce9z6ZLp2Y7R",
        "colab_type": "code",
        "colab": {},
        "outputId": "5fad5f5a-39b4-44fa-d8df-f77f84be067f"
      },
      "cell_type": "code",
      "source": [
        "# モデルのインスタンス化，学習\n",
        "from sklearn.svm import SVR\n",
        "\n",
        "model = SVR()\n",
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='auto',\n",
              "  kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 105
        }
      ]
    },
    {
      "metadata": {
        "id": "Ela6PKr32Y7U",
        "colab_type": "code",
        "colab": {},
        "outputId": "f7c4ae33-cf5c-4251-817a-03ccf074f348"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.14680479454958428"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 106
        }
      ]
    },
    {
      "metadata": {
        "id": "8u8KJTAP2Y7X",
        "colab_type": "code",
        "colab": {},
        "outputId": "587cc72e-8f44-441d-a86c-c61c7c6efd87"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.01018093344367077"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 107
        }
      ]
    },
    {
      "metadata": {
        "id": "UYDgbLWP2Y7d",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "このようにSVRも，Scikit-learnを用いることで重回帰分析のケースとほとんど同じように実装できます．\n",
        "\n",
        "しかし結果をみると，重回帰分析に比べて良くなっているとは言えません．ハイパーパラメータ調整が必要そうですが，その前に，スケーリングを行うことで改善できる場合もあります．\n"
      ]
    },
    {
      "metadata": {
        "id": "DSdnzIxM2Y7d",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "INFWOG652Y7g",
        "colab_type": "code",
        "colab": {},
        "outputId": "3c92f5c4-8db8-4ebc-9204-25fbf826a39d"
      },
      "cell_type": "code",
      "source": [
        "# スケーリング後のデータを使って学習\n",
        "model.fit(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='auto',\n",
              "  kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 110
        }
      ]
    },
    {
      "metadata": {
        "id": "l-UvYEAk2Y7j",
        "colab_type": "code",
        "colab": {},
        "outputId": "cbbae9ee-4f4d-4b5e-f4e9-d73c1289764a"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.697669153907031"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 111
        }
      ]
    },
    {
      "metadata": {
        "id": "KvulbP3F2Y7n",
        "colab_type": "code",
        "colab": {},
        "outputId": "98cc60d5-4ce7-4a3e-dbc5-48160340d9bc"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5540391127752358"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 112
        }
      ]
    },
    {
      "metadata": {
        "id": "KzT8Q6Tz2Y7v",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "スケーリングにより，大幅に結果を改善することができました．機械学習アルゴリズムには，スケーリングの影響を受けやすいものとそうでないものが存在し，SVRを含むSVMは影響を受けやすいアルゴリズムといえます．\n",
        "\n",
        "最後に，さらに精度を向上させるためにハイパーパラメータの調整を行います．ただしその際，注意点があります．それは，訓練データ（train）はパラメータの調整に用いますが，検証データ（test）を見ながらハイパーパラーメータの調整を行ってはいけないということです．検証データはあくまで未知のデータに対する性能検証を行うために用意したものであり，ハイパーパラメータの調整に使用してしまうと検証データの情報が学習にリークして，正しい検証ができなくなります．\n",
        "\n",
        "そこで，ハイパーパラメータの調整用に**バリデーションデータ**（val）を追加することが一般的です．\n",
        "\n",
        "![](https://github.com/hillbig/medical-ai-course-materials/blob/master/notebooks/images/2/09.png?raw=1)\n",
        "\n",
        "また，**交差検証法（クロスバリデーション）**という手法もあります．これは下図に示すように，データに対して複数パターンの分割を行い，それらの性能の平均を評価する手法です．\n",
        "\n",
        "![](https://github.com/hillbig/medical-ai-course-materials/blob/master/notebooks/images/2/10.png?raw=1)"
      ]
    },
    {
      "metadata": {
        "id": "ln7sHlHt2Y7w",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "この分割数 $K$ としたものは特に，**K-fold Cross Validation (CV)**と呼ばれます．上記の例だと $K=3$ です．\n",
        "\n",
        "それでは，SVRのハイパーパラメータ調整を交差検証法も使いながら行っていきます．Scikit-learnではハイパーパラメータ調整のための機能も`GridSearchCV`という名前で用意されています．**グリッドサーチ**とは各組合せをすべて試す探索方法です．それ以外にも，**ランダムサーチ**や**ベイズ最適化**による探索などの方法もあります．"
      ]
    },
    {
      "metadata": {
        "id": "_jzLxNKN2Y7w",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "TlbfmPFZ2Y7x",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 調整を行うハイパーパラメータの値の候補\n",
        "param_grid = [\n",
        "    {'C': [1, 10, 100], 'gamma': [0.01, 0.1, 1, 10]}\n",
        "]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "SkAJeoRr2Y7z",
        "colab_type": "code",
        "colab": {},
        "outputId": "8b6e0bdf-b701-4464-9ca2-0770b0716000"
      },
      "cell_type": "code",
      "source": [
        "# 交差検証法を使用したハイパーパラメータの各組合せでの学習\n",
        "model_cv = GridSearchCV(SVR(), param_grid, cv=3, scoring='neg_mean_squared_error')\n",
        "model_cv.fit(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, error_score='raise',\n",
              "       estimator=SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='auto',\n",
              "  kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False),\n",
              "       fit_params=None, iid=True, n_jobs=1,\n",
              "       param_grid=[{'C': [1, 10, 100], 'gamma': [0.01, 0.1, 1, 10]}],\n",
              "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
              "       scoring='neg_mean_squared_error', verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 122
        }
      ]
    },
    {
      "metadata": {
        "id": "eaxfFnXU2Y73",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "交差検証法とハイパーパラメータのグリッドサーチはこれで完了です．各ハイパーパラメータでの結果も確認することができ，最も結果の良かったハイパーパラメータの値を引き継いだモデルの選択もできます．"
      ]
    },
    {
      "metadata": {
        "id": "qkHr5fbm2Y73",
        "colab_type": "code",
        "colab": {},
        "outputId": "22e3b9fd-5ff6-451a-b46f-a0b36074720f"
      },
      "cell_type": "code",
      "source": [
        "# 結果の確認 (valの対する結果)\n",
        "model_cv.grid_scores_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "C:\\Users\\ryosu\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py:762: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n",
            "  DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[mean: -40.88957, std: 12.03388, params: {'C': 1, 'gamma': 0.01},\n",
              " mean: -34.94548, std: 12.18057, params: {'C': 1, 'gamma': 0.1},\n",
              " mean: -72.62060, std: 15.99632, params: {'C': 1, 'gamma': 1},\n",
              " mean: -86.25200, std: 16.38372, params: {'C': 1, 'gamma': 10},\n",
              " mean: -17.67763, std: 6.48783, params: {'C': 10, 'gamma': 0.01},\n",
              " mean: -16.46703, std: 7.03969, params: {'C': 10, 'gamma': 0.1},\n",
              " mean: -43.71719, std: 13.22953, params: {'C': 10, 'gamma': 1},\n",
              " mean: -81.13324, std: 15.21847, params: {'C': 10, 'gamma': 10},\n",
              " mean: -13.83363, std: 3.54540, params: {'C': 100, 'gamma': 0.01},\n",
              " mean: -14.61609, std: 7.20850, params: {'C': 100, 'gamma': 0.1},\n",
              " mean: -37.47299, std: 9.87515, params: {'C': 100, 'gamma': 1},\n",
              " mean: -77.95797, std: 12.36436, params: {'C': 100, 'gamma': 10}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 126
        }
      ]
    },
    {
      "metadata": {
        "id": "zm2OUVd02Y75",
        "colab_type": "code",
        "colab": {},
        "outputId": "893c6300-9c91-40bf-b245-8b6bb3b5ab70"
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータ\n",
        "model_cv.best_params_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'C': 10, 'gamma': 0.01}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 161
        }
      ]
    },
    {
      "metadata": {
        "id": "0gsfF1h-2Y77",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータの値を設定したモデル\n",
        "model = model_cv.best_estimator_"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "3zBv_jjh2Y79",
        "colab_type": "code",
        "colab": {},
        "outputId": "8430a74a-930d-4a81-f6e7-6061cd008f09"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7685336670918761"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 130
        }
      ]
    },
    {
      "metadata": {
        "id": "alMofDIr2Y8D",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "ここまでがアルゴリズムの実践的な調整です．実際には特徴量の選択や外れ値除去など前処理も込みで行うため，ここまでシンプルに完了できるものではありませんが，まずはこの流れを覚えてください．\n",
        "\n",
        "1. スケーリング無　score:0.010\n",
        "2. スケーリング有　score:0.554\n",
        "3. スケーリング＋ハイパーパラメータの調整有　0.7685"
      ]
    },
    {
      "metadata": {
        "id": "naKaak6d2Y8E",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Support Vector Classification (SVC)\n",
        "\n",
        "次に，SVMの分類であるSVCも同様にスケーリングからハイパーパラメータの調整まで行ってみます．ここでは分類の例題として，Scikit-learnで用意されているデータセットの中から，乳がんの患者か否かを予測する問題を扱います．"
      ]
    },
    {
      "metadata": {
        "id": "xLSFm9A_2Y8F",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# データセットの準備\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "\n",
        "breast_cancer = load_breast_cancer()\n",
        "X = breast_cancer['data']\n",
        "t = breast_cancer['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ajOJthen2Y8G",
        "colab_type": "code",
        "colab": {},
        "outputId": "416d4d13-c307-4814-941e-daab70ddfc85"
      },
      "cell_type": "code",
      "source": [
        "X.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(569, 30)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 137
        }
      ]
    },
    {
      "metadata": {
        "id": "Y6yMbpI12Y8J",
        "colab_type": "code",
        "colab": {},
        "outputId": "a4f61255-b460-4982-a547-56073873ed35"
      },
      "cell_type": "code",
      "source": [
        "print(X)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1.799e+01 1.038e+01 1.228e+02 ... 2.654e-01 4.601e-01 1.189e-01]\n",
            " [2.057e+01 1.777e+01 1.329e+02 ... 1.860e-01 2.750e-01 8.902e-02]\n",
            " [1.969e+01 2.125e+01 1.300e+02 ... 2.430e-01 3.613e-01 8.758e-02]\n",
            " ...\n",
            " [1.660e+01 2.808e+01 1.083e+02 ... 1.418e-01 2.218e-01 7.820e-02]\n",
            " [2.060e+01 2.933e+01 1.401e+02 ... 2.650e-01 4.087e-01 1.240e-01]\n",
            " [7.760e+00 2.454e+01 4.792e+01 ... 0.000e+00 2.871e-01 7.039e-02]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "lklP2wYY2Y8M",
        "colab_type": "code",
        "colab": {},
        "outputId": "90eac257-12dc-4a22-fc39-fc606cbf095b"
      },
      "cell_type": "code",
      "source": [
        "print(t)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 1 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 0 1 0 0\n",
            " 1 0 1 0 0 1 1 1 0 0 1 0 0 0 1 1 1 0 1 1 0 0 1 1 1 0 0 1 1 1 1 0 1 1 0 1 1\n",
            " 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 0 0 1 1 0 1 1 0 1 1 1 1 0 1\n",
            " 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 0 1 0\n",
            " 1 0 1 1 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1\n",
            " 1 0 1 1 1 1 1 0 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 0 0 1 1\n",
            " 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0\n",
            " 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1\n",
            " 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 1 0 1 1\n",
            " 0 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1\n",
            " 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0\n",
            " 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 1 1 1 1 1 1 0 0 0 0 0 0 1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "HJIh_5Uv2Y8P",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "入力変数のスケールは統一されていないことがわかります．"
      ]
    },
    {
      "metadata": {
        "id": "u7aJVuPs2Y8P",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練データと検証データに分割\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "LTOOVhcp2Y8R",
        "colab_type": "code",
        "colab": {},
        "outputId": "650986a3-be1f-4a43-a763-d8dc0ff6ed4e"
      },
      "cell_type": "code",
      "source": [
        "# スケーリング無で学習\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "model = SVC()\n",
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
              "  decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf',\n",
              "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
              "  tol=0.001, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 139
        }
      ]
    },
    {
      "metadata": {
        "id": "Ww-e9gU82Y8S",
        "colab_type": "code",
        "colab": {},
        "outputId": "d46a700d-8891-443c-9e3f-4b0518a55472"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 140
        }
      ]
    },
    {
      "metadata": {
        "id": "j7jehmJ_2Y8T",
        "colab_type": "code",
        "colab": {},
        "outputId": "a66f0ef2-50a3-4e6e-ec15-efe8b1e8b281"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.631578947368421"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 141
        }
      ]
    },
    {
      "metadata": {
        "id": "HHnlF-1i2Y8V",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "分類では精度 (Accuracy) と呼ばれる指標の結果が得られます．例えば，100問中3問間違えると，精度は0.97となります．\n",
        "\n",
        "次にスケーリングを行った後に学習させていきましょう．"
      ]
    },
    {
      "metadata": {
        "id": "UwH8oQS62Y8V",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# スケーリング\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s  = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "b6aVnY4l2Y8X",
        "colab_type": "code",
        "colab": {},
        "outputId": "50ca4be7-be33-452a-ed3e-36ec2032f73c"
      },
      "cell_type": "code",
      "source": [
        "# スケーリングしたデータを用いて学習\n",
        "model.fit(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
              "  decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf',\n",
              "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
              "  tol=0.001, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 148
        }
      ]
    },
    {
      "metadata": {
        "id": "bjDVa1VB2Y8a",
        "colab_type": "code",
        "colab": {},
        "outputId": "710ce549-507b-45ef-eda5-e97698e0580a"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9824120603015075"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 149
        }
      ]
    },
    {
      "metadata": {
        "id": "oBqErybl2Y8b",
        "colab_type": "code",
        "colab": {},
        "outputId": "334a421c-2fbf-45f2-ec79-b4aedababff4"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9766081871345029"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 150
        }
      ]
    },
    {
      "metadata": {
        "id": "ODfZIpCc2Y8d",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "このように精度が大幅に向上したことがわかります．\n",
        "\n",
        "最後にハイパーパラメータのチューニングも行っていきましょう．"
      ]
    },
    {
      "metadata": {
        "id": "q-up_Z6H2Y8d",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Z8Za5U0X2Y8g",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 調整を行うハイパーパラメータの値の候補\n",
        "param_grid = [\n",
        "    {'C': [1, 10, 100], 'gamma': [0.01, 0.1, 1, 10]}\n",
        "]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "8_xMfRU82Y8i",
        "colab_type": "code",
        "colab": {},
        "outputId": "65726c12-0f03-4830-a0f2-86be876c43c5"
      },
      "cell_type": "code",
      "source": [
        "# 交差検証法を使用したハイパーパラメータの各組合せでの学習\n",
        "model_cv = GridSearchCV(SVC(), param_grid, cv=3)\n",
        "model_cv.fit(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, error_score='raise',\n",
              "       estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
              "  decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf',\n",
              "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
              "  tol=0.001, verbose=False),\n",
              "       fit_params=None, iid=True, n_jobs=1,\n",
              "       param_grid=[{'C': [1, 10, 100], 'gamma': [0.01, 0.1, 1, 10]}],\n",
              "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
              "       scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 156
        }
      ]
    },
    {
      "metadata": {
        "id": "CqLZbE5U2Y8m",
        "colab_type": "code",
        "colab": {},
        "outputId": "47c62944-76f3-478a-c268-dca4a88a0e13"
      },
      "cell_type": "code",
      "source": [
        "# 結果の確認 (valの対する結果)\n",
        "model_cv.grid_scores_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "C:\\Users\\ryosu\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py:762: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n",
            "  DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[mean: 0.96482, std: 0.01272, params: {'C': 1, 'gamma': 0.01},\n",
              " mean: 0.95226, std: 0.01543, params: {'C': 1, 'gamma': 0.1},\n",
              " mean: 0.62814, std: 0.00310, params: {'C': 1, 'gamma': 1},\n",
              " mean: 0.62563, std: 0.00223, params: {'C': 1, 'gamma': 10},\n",
              " mean: 0.97487, std: 0.01972, params: {'C': 10, 'gamma': 0.01},\n",
              " mean: 0.94472, std: 0.02474, params: {'C': 10, 'gamma': 0.1},\n",
              " mean: 0.63065, std: 0.00132, params: {'C': 10, 'gamma': 1},\n",
              " mean: 0.62563, std: 0.00223, params: {'C': 10, 'gamma': 10},\n",
              " mean: 0.94975, std: 0.01981, params: {'C': 100, 'gamma': 0.01},\n",
              " mean: 0.94472, std: 0.02474, params: {'C': 100, 'gamma': 0.1},\n",
              " mean: 0.63065, std: 0.00132, params: {'C': 100, 'gamma': 1},\n",
              " mean: 0.62563, std: 0.00223, params: {'C': 100, 'gamma': 10}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 157
        }
      ]
    },
    {
      "metadata": {
        "id": "gwWnK_zU2Y8o",
        "colab_type": "code",
        "colab": {},
        "outputId": "9662cc2f-6518-4fa6-f94c-54c90cf9bc5f"
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータ\n",
        "model_cv.best_params_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'C': 10, 'gamma': 0.01}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 162
        }
      ]
    },
    {
      "metadata": {
        "id": "RMrbiij-2Y8r",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータの値を設定したモデル\n",
        "model = model_cv.best_estimator_"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "8pbF56Xg2Y8s",
        "colab_type": "code",
        "colab": {},
        "outputId": "97ab2c70-7140-4ad2-e3f5-59f0351ed3ef"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9883040935672515"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 164
        }
      ]
    },
    {
      "metadata": {
        "id": "08vKsqON2Y8u",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "ハイパーパラメータの調整により，多少ですが精度を改善することができました．"
      ]
    },
    {
      "metadata": {
        "id": "D39dYXbc2Y8u",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Random Forest\n",
        "\n",
        "続いて紹介するのは，決定木 (Dicision Tree) のアンサンブル学習であるランダムフォレストです．こちらも実用上良く使われる手法であり，ランダムフォレストを含めた決定木系の手法には，入力変数のスケールの違いによる影響をあまり受けないという特徴があります．また，**カテゴリカル変数**と呼ばれる定量評価を行うことが難しい変数（例えば，男性 or 女性）も定量化を気にすることなく扱うことができるメリットがあります．回帰，分類のどちらも用意されているため，それぞれについて紹介していきましょう．"
      ]
    },
    {
      "metadata": {
        "id": "o0SNCdBU2Y8v",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 回帰 (Regression)"
      ]
    },
    {
      "metadata": {
        "id": "oNW4JETI2Y8w",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# データの準備\n",
        "from sklearn.datasets import load_boston\n",
        "\n",
        "boston = load_boston()\n",
        "X = boston['data']\n",
        "t = boston['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Rzq3ZIH42Y8y",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練と検証データの分割\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "BoDng4u82Y8z",
        "colab_type": "code",
        "colab": {},
        "outputId": "de84fe74-adf5-418b-8dcc-c48726331b5b"
      },
      "cell_type": "code",
      "source": [
        "# モデルのインスタンス化，学習\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "model = RandomForestRegressor()\n",
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
              "           max_features='auto', max_leaf_nodes=None,\n",
              "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "           min_samples_leaf=1, min_samples_split=2,\n",
              "           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "           oob_score=False, random_state=None, verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 216
        }
      ]
    },
    {
      "metadata": {
        "id": "WIP4Wc7u2Y80",
        "colab_type": "code",
        "colab": {},
        "outputId": "7c9c985d-e2c6-4d67-90cb-92758655f378"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9683509759630142"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 217
        }
      ]
    },
    {
      "metadata": {
        "id": "Oo_8T_au2Y83",
        "colab_type": "code",
        "colab": {},
        "outputId": "fae46ee5-1f41-4b11-90e7-bccee24a8c21"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8244110898822086"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 218
        }
      ]
    },
    {
      "metadata": {
        "id": "073CrFbD2Y84",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "bmr6ZUtm2Y87",
        "colab_type": "code",
        "colab": {},
        "outputId": "5d9b2318-8c65-4ae1-eef1-902bc6768884"
      },
      "cell_type": "code",
      "source": [
        "# スケーリング後のデータを使って学習\n",
        "model.fit(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
              "           max_features='auto', max_leaf_nodes=None,\n",
              "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "           min_samples_leaf=1, min_samples_split=2,\n",
              "           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "           oob_score=False, random_state=None, verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 220
        }
      ]
    },
    {
      "metadata": {
        "id": "xy_FJ4QR2Y89",
        "colab_type": "code",
        "colab": {},
        "outputId": "55cf60d9-5f40-4371-ab1d-6bcfb1ce0bce"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.980773304078463"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 221
        }
      ]
    },
    {
      "metadata": {
        "id": "KS74Jmv42Y9A",
        "colab_type": "code",
        "colab": {},
        "outputId": "b75b6e63-55b4-4a38-ae75-eb3fa24d47dd"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7568763837538154"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 222
        }
      ]
    },
    {
      "metadata": {
        "id": "tVmNpDfW2Y9C",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "このように，スケーリングによる影響はほとんど受けないことを，実際に確認できました．\n",
        "\n",
        "またランダムフォレストでは，条件分岐させる数である `max_depth` をハイパーパラメータとして調整することが多いため，今回はこちらを調整していきましょう．"
      ]
    },
    {
      "metadata": {
        "id": "Jf8ikMaw2Y9E",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "dMhH26fT2Y9E",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 調整を行うハイパーパラメータの値の候補\n",
        "param_grid = [\n",
        "    {'max_depth': [1, 2, 3, 4, 5, 6]}\n",
        "]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "UlMl6h782Y9G",
        "colab_type": "code",
        "colab": {},
        "outputId": "f35b5117-e6a9-429a-b9fa-ea011e4069a2"
      },
      "cell_type": "code",
      "source": [
        "# 交差検証法を使用したハイパーパラメータの各組み合わせでの学習\n",
        "model_cv = GridSearchCV(RandomForestRegressor(), param_grid, cv=3, scoring='neg_mean_squared_error')\n",
        "model_cv.fit(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, error_score='raise',\n",
              "       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
              "           max_features='auto', max_leaf_nodes=None,\n",
              "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "           min_samples_leaf=1, min_samples_split=2,\n",
              "           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "           oob_score=False, random_state=None, verbose=0, warm_start=False),\n",
              "       fit_params=None, iid=True, n_jobs=1,\n",
              "       param_grid=[{'max_depth': [1, 2, 3, 4, 5, 6]}],\n",
              "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
              "       scoring='neg_mean_squared_error', verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 225
        }
      ]
    },
    {
      "metadata": {
        "id": "40wFnk-u2Y9J",
        "colab_type": "code",
        "colab": {},
        "outputId": "78a34619-8b0a-4155-ca44-5fc74975bafe"
      },
      "cell_type": "code",
      "source": [
        "# 結果の確認 (valの対する結果)\n",
        "model_cv.grid_scores_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "C:\\Users\\ryosu\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py:762: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n",
            "  DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[mean: -41.89307, std: 9.40057, params: {'max_depth': 1},\n",
              " mean: -25.95305, std: 8.05238, params: {'max_depth': 2},\n",
              " mean: -23.11041, std: 4.68079, params: {'max_depth': 3},\n",
              " mean: -17.92487, std: 4.42161, params: {'max_depth': 4},\n",
              " mean: -19.30415, std: 7.51230, params: {'max_depth': 5},\n",
              " mean: -17.16534, std: 8.32303, params: {'max_depth': 6}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 226
        }
      ]
    },
    {
      "metadata": {
        "id": "K7s5Rms92Y9M",
        "colab_type": "code",
        "colab": {},
        "outputId": "1867591c-9905-4f9e-fa7f-ab4c2cd72367"
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータ\n",
        "model_cv.best_params_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'max_depth': 6}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 227
        }
      ]
    },
    {
      "metadata": {
        "id": "UTfAPKVZ2Y9P",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータの値を設定したモデル\n",
        "model = model_cv.best_estimator_"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "G0j0qS6D2Y9Q",
        "colab_type": "code",
        "colab": {},
        "outputId": "95857799-bdc7-4137-84cf-a89cc70e9828"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8065343207878718"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 229
        }
      ]
    },
    {
      "metadata": {
        "id": "jr-wXJv_2Y9V",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "今回はもともとオーバーフィッティングしていなかったため，ハイパーパラメータの調整によって改善することはありませんでしたが，オーバーフィッティングしている場合には有効な施策となります．\n",
        "\n",
        "またランダムフォレストの大きなメリットとして，各入力変数がどの程度重要であるかを定量評価した値が得られます．"
      ]
    },
    {
      "metadata": {
        "id": "g9m_Z8cK2Y9W",
        "colab_type": "code",
        "colab": {},
        "outputId": "e90e4f7d-c715-4a90-9f6c-8244336067d0"
      },
      "cell_type": "code",
      "source": [
        "# 各入力変数の重要度\n",
        "model.feature_importances_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.03498355, 0.00122218, 0.00721576, 0.00092089, 0.00898805,\n",
              "       0.39898526, 0.01894469, 0.04598164, 0.00571163, 0.01607173,\n",
              "       0.01889314, 0.00701622, 0.43506524])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 230
        }
      ]
    },
    {
      "metadata": {
        "id": "G9g8mpcZ2Y9Y",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "総和が1になっており，この値を使って各入力変数がどれだけ重要か判断することができます．"
      ]
    },
    {
      "metadata": {
        "id": "AVxEfHWT2Y9b",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 分類 (Classification)"
      ]
    },
    {
      "metadata": {
        "id": "X67IQbs32Y9c",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# データの準備\n",
        "from sklearn.datasets import load_boston\n",
        "\n",
        "breast_cancer = load_breast_cancer()\n",
        "X = breast_cancer['data']\n",
        "t = breast_cancer['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Qqt1IG9E2Y9d",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練と検証データの分割\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "SjSwwi3t2Y9e",
        "colab_type": "code",
        "colab": {},
        "outputId": "077c3afd-fd0a-427a-b1fa-030c1a6eb315"
      },
      "cell_type": "code",
      "source": [
        "# モデルのインスタンス化，学習\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "model = RandomForestClassifier()\n",
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
              "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
              "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "            min_samples_leaf=1, min_samples_split=2,\n",
              "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "            oob_score=False, random_state=None, verbose=0,\n",
              "            warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 233
        }
      ]
    },
    {
      "metadata": {
        "id": "HOG-3rE12Y9i",
        "colab_type": "code",
        "colab": {},
        "outputId": "9e82c06b-4c84-435b-90c8-876468ddac6c"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9949748743718593"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 234
        }
      ]
    },
    {
      "metadata": {
        "id": "pfXtnWaR2Y9k",
        "colab_type": "code",
        "colab": {},
        "outputId": "eab361af-d568-463b-f473-a22379ce233c"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9415204678362573"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 235
        }
      ]
    },
    {
      "metadata": {
        "id": "r-ocnWuG2Y9m",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "naXD1Y402Y9m",
        "colab_type": "code",
        "colab": {},
        "outputId": "3c586a61-2997-42b0-825f-64971c0500af"
      },
      "cell_type": "code",
      "source": [
        "# スケーリング後のデータを使って学習\n",
        "model.fit(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
              "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
              "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "            min_samples_leaf=1, min_samples_split=2,\n",
              "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "            oob_score=False, random_state=None, verbose=0,\n",
              "            warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 237
        }
      ]
    },
    {
      "metadata": {
        "id": "T8Hrtcye2Y9p",
        "colab_type": "code",
        "colab": {},
        "outputId": "c789079a-6445-4ebf-e88d-81803d935764"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 238
        }
      ]
    },
    {
      "metadata": {
        "id": "PdDTYyQV2Y9s",
        "colab_type": "code",
        "colab": {},
        "outputId": "04cf4a3e-f198-4981-eca1-25ca7b415573"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9473684210526315"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 239
        }
      ]
    },
    {
      "metadata": {
        "id": "8Tl_rvLU2Y9v",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "6jUOkTkg2Y92",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 調整を行うハイパーパラメータの値の候補\n",
        "param_grid = [\n",
        "    {'max_depth': [1, 2, 3, 4, 5, 6]}\n",
        "]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "0jeRZteB2Y93",
        "colab_type": "code",
        "colab": {},
        "outputId": "f7b9f1a0-0643-45fb-948a-d84248937247"
      },
      "cell_type": "code",
      "source": [
        "# 交差検証法を使用したハイパーパラメータの各組合せでの学習\n",
        "model_cv = GridSearchCV(RandomForestClassifier(), param_grid, cv=3)\n",
        "model_cv.fit(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, error_score='raise',\n",
              "       estimator=RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
              "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
              "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "            min_samples_leaf=1, min_samples_split=2,\n",
              "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "            oob_score=False, random_state=None, verbose=0,\n",
              "            warm_start=False),\n",
              "       fit_params=None, iid=True, n_jobs=1,\n",
              "       param_grid=[{'max_depth': [1, 2, 3, 4, 5, 6]}],\n",
              "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
              "       scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 242
        }
      ]
    },
    {
      "metadata": {
        "id": "vMEwrUeM2Y95",
        "colab_type": "code",
        "colab": {},
        "outputId": "268a5ee2-abf8-483c-a98b-841d918866dd"
      },
      "cell_type": "code",
      "source": [
        "# 結果の確認 (valの対する結果)\n",
        "model_cv.grid_scores_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "C:\\Users\\ryosu\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py:762: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n",
            "  DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[mean: 0.91206, std: 0.01259, params: {'max_depth': 1},\n",
              " mean: 0.93467, std: 0.01763, params: {'max_depth': 2},\n",
              " mean: 0.93467, std: 0.01265, params: {'max_depth': 3},\n",
              " mean: 0.95226, std: 0.01543, params: {'max_depth': 4},\n",
              " mean: 0.93970, std: 0.02119, params: {'max_depth': 5},\n",
              " mean: 0.93970, std: 0.01632, params: {'max_depth': 6}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 243
        }
      ]
    },
    {
      "metadata": {
        "id": "ZeP7Yqcb2Y97",
        "colab_type": "code",
        "colab": {},
        "outputId": "ed2ef41a-bc19-4a60-eb1c-4c79fe741171"
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータ\n",
        "model_cv.best_params_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'max_depth': 4}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 244
        }
      ]
    },
    {
      "metadata": {
        "id": "ld3zKhe02Y99",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータの値を設定したモデル\n",
        "model = model_cv.best_estimator_"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "XIvkS6Rn2Y99",
        "colab_type": "code",
        "colab": {},
        "outputId": "7bafdf17-466c-40bc-f9f5-8690b3ed7a59"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9590643274853801"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 246
        }
      ]
    },
    {
      "metadata": {
        "id": "CpMKjWTQ2Y9_",
        "colab_type": "code",
        "colab": {},
        "outputId": "a6a7ab65-ba3e-457f-f14c-399e351b9bb5"
      },
      "cell_type": "code",
      "source": [
        "# 各入力変数の重要度\n",
        "model.feature_importances_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([4.55728165e-03, 4.80674523e-03, 7.04751333e-02, 6.67175039e-02,\n",
              "       0.00000000e+00, 6.38391868e-03, 1.44783793e-01, 2.56851226e-02,\n",
              "       1.01592678e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
              "       7.17633429e-03, 3.57428435e-02, 5.48903143e-05, 7.63635594e-03,\n",
              "       8.65354259e-03, 3.50041088e-03, 4.29368206e-03, 4.42019691e-03,\n",
              "       8.32478506e-02, 1.93259510e-02, 1.79759936e-01, 8.96864960e-02,\n",
              "       4.76915506e-03, 2.20744844e-02, 6.78042092e-02, 1.24987366e-01,\n",
              "       4.10480850e-03, 8.33606129e-03])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 247
        }
      ]
    },
    {
      "metadata": {
        "id": "hPtOeHmk2Y-A",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### ロジスティック回帰\n",
        "\n",
        "シンプルですが，良く利用される手法のひとつです．回帰という名前がついていますが，問題設定としては分類に属する点に注意しましょう．"
      ]
    },
    {
      "metadata": {
        "id": "t_5MRtzo2Y-A",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# データの準備\n",
        "from sklearn.datasets import load_boston\n",
        "\n",
        "breast_cancer = load_breast_cancer()\n",
        "X = breast_cancer['data']\n",
        "t = breast_cancer['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "AGK-b0ul2Y-B",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練と検証データの分割\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "F1M-ZWrn2Y-C",
        "colab_type": "code",
        "colab": {},
        "outputId": "ad785839-d8f9-40d6-e62e-81972b99aaec"
      },
      "cell_type": "code",
      "source": [
        "# モデルのインスタンス化，学習\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "model = LogisticRegression()\n",
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
              "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
              "          verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 278
        }
      ]
    },
    {
      "metadata": {
        "id": "SZZJRf3J2Y-D",
        "colab_type": "code",
        "colab": {},
        "outputId": "6dc6ba0b-d43e-4b3e-a75a-49c5d2e8ac7d"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.957286432160804"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 279
        }
      ]
    },
    {
      "metadata": {
        "id": "1w2UGfi_2Y-F",
        "colab_type": "code",
        "colab": {},
        "outputId": "ea7711d3-c374-41eb-9737-4a1bc678acc2"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9649122807017544"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 280
        }
      ]
    },
    {
      "metadata": {
        "id": "L5M9IFNU2Y-G",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "kkyn1tN22Y-H",
        "colab_type": "code",
        "colab": {},
        "outputId": "dedf79ab-8fc8-409c-bbac-fede659f524b"
      },
      "cell_type": "code",
      "source": [
        "# スケーリング後のデータを使って学習\n",
        "model.fit(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
              "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
              "          verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 282
        }
      ]
    },
    {
      "metadata": {
        "id": "w7W0kf1d2Y-H",
        "colab_type": "code",
        "colab": {},
        "outputId": "67112f03-f68a-4740-fe96-a08d0ccaf250"
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9899497487437185"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 283
        }
      ]
    },
    {
      "metadata": {
        "id": "oUxAVVjI2Y-J",
        "colab_type": "code",
        "colab": {},
        "outputId": "1e0541bd-fc1f-4000-eaa6-39dacb586c25"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9766081871345029"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 284
        }
      ]
    },
    {
      "metadata": {
        "id": "fLk1-2bF2Y-M",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "6PwH5MqS2Y-N",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 調整を行うハイパーパラメータの値の候補\n",
        "param_grid = [\n",
        "    {'C': [0.01, 0.1, 1, 10]}\n",
        "]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "P12xVskR2Y-P",
        "colab_type": "code",
        "colab": {},
        "outputId": "7a3468eb-9b24-4a1b-c7d9-572bbfd076d7"
      },
      "cell_type": "code",
      "source": [
        "# 交差検証法を使用したハイパーパラメータの各組合せでの学習\n",
        "model_cv = GridSearchCV(LogisticRegression(), param_grid, cv=3)\n",
        "model_cv.fit(X_train_s, t_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, error_score='raise',\n",
              "       estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
              "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
              "          verbose=0, warm_start=False),\n",
              "       fit_params=None, iid=True, n_jobs=1,\n",
              "       param_grid=[{'C': [0.01, 0.1, 1, 10]}], pre_dispatch='2*n_jobs',\n",
              "       refit=True, return_train_score='warn', scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 287
        }
      ]
    },
    {
      "metadata": {
        "id": "PiTF-UM82Y-R",
        "colab_type": "code",
        "colab": {},
        "outputId": "1385114f-a3e5-4cb1-a09b-fad208b57b8d"
      },
      "cell_type": "code",
      "source": [
        "# 結果の確認 (valの対する結果)\n",
        "model_cv.grid_scores_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "C:\\Users\\ryosu\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py:762: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n",
            "  DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[mean: 0.96985, std: 0.01223, params: {'C': 0.01},\n",
              " mean: 0.97990, std: 0.00935, params: {'C': 0.1},\n",
              " mean: 0.98492, std: 0.01624, params: {'C': 1},\n",
              " mean: 0.97236, std: 0.02323, params: {'C': 10}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 288
        }
      ]
    },
    {
      "metadata": {
        "id": "Nrkq4UWj2Y-T",
        "colab_type": "code",
        "colab": {},
        "outputId": "dc165825-3f35-4dd8-9bbd-5ecd9656a3b7"
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータ\n",
        "model_cv.best_params_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'C': 1}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 289
        }
      ]
    },
    {
      "metadata": {
        "id": "xDBDrbfh2Y-V",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータの値を設定したモデル\n",
        "model = model_cv.best_estimator_"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "blEw08gV2Y-V",
        "colab_type": "code",
        "colab": {},
        "outputId": "23be16fa-f116-400f-f40c-557a72b1cea5"
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9766081871345029"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 291
        }
      ]
    },
    {
      "metadata": {
        "id": "s4P624Rh2Y-W",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "新しいサンプルに対する推論を行ってみましょう．Scikit-learnでは，推論には`predict`を使用します．"
      ]
    },
    {
      "metadata": {
        "id": "UbLOm11M2Y-W",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練データの一番最初のサンプルで試しに推論\n",
        "x_pred = [X_train_s[0]]\n",
        "y = model.predict(x_pred)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "9v413VyP2Y-X",
        "colab_type": "code",
        "colab": {},
        "outputId": "efc29359-fb96-4890-8b38-69baff166b09"
      },
      "cell_type": "code",
      "source": [
        "print(y)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "IhHzSF7x2Y-a",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "また，各カテゴリに属する確率まで求める際には， `predict_proba` を使用します．"
      ]
    },
    {
      "metadata": {
        "id": "PPRrSu3A2Y-b",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "y = model.predict_proba(x_pred)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "_HmJusRM2Y-c",
        "colab_type": "code",
        "colab": {},
        "outputId": "9ff86012-5ae4-4715-e94d-31640a22d08d"
      },
      "cell_type": "code",
      "source": [
        "print(y)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.00160119 0.99839881]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "SerYPUOX2Y-e",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "結果からわかる通り，各カテゴリの確率の総和が1となっており，確率が大きいほうのカテゴリ1が選ばれたことがわかります．正常か異常かといった分類の場合，正常or異常だけでなく，どのくらい異常そうであるかの確率までわかることで，閾値を設けやすくなります．この特性は次の章で紹介するニューラルネットワークでも同じです．"
      ]
    },
    {
      "metadata": {
        "id": "3w09BpQd2Y-f",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### k-means\n",
        "\n",
        "最後に，教師なし学習である**クラスタリング**手法として有名なk-meansを紹介します．分類では教師データとしてどのカテゴリに属しているかがわかっていましたが，クラスタリングではその教師データがない状況で学習を行います．距離的に近いものをまとめるといった特性を持っています．\n",
        "\n",
        "例題では2つのクラスターからなるデータをあらかじめ用意しておき，正しく分けられるかを確認していきましょう．"
      ]
    },
    {
      "metadata": {
        "id": "GUnacWZ22Y-g",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "np.random.seed(0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "-B08daxW2Y-h",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X1 = np.random.randn(50, 2) - 3\n",
        "X2 = np.random.randn(50, 2) + 3"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "r5Qabs3h2Y-k",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 結合\n",
        "X = np.r_[X1, X2]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "USQiwCdj2Y-l",
        "colab_type": "code",
        "colab": {},
        "outputId": "eae5cb28-99a9-4333-caeb-16193a427218"
      },
      "cell_type": "code",
      "source": [
        "X.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 2)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 339
        }
      ]
    },
    {
      "metadata": {
        "id": "_4q2XlYu2Y-m",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "P7fFQMrl2Y-n",
        "colab_type": "code",
        "colab": {},
        "outputId": "4d3940b5-867d-4183-edf3-98a3cef3129c"
      },
      "cell_type": "code",
      "source": [
        "plt.scatter(X[:, 0], X[:, 1])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x28640957438>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 341
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "7zH7RDTu2Y-q",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "それでは，k-meansを用いてクラスタリングを行いましょう．クラスタリングでは分けるクラスターの数がハイパーパラメータとして必要であることが一般的であり，`n_clusters`で指定します．"
      ]
    },
    {
      "metadata": {
        "id": "zxpUNkS72Y-q",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "jZbuAJnF2Y-s",
        "colab_type": "code",
        "colab": {},
        "outputId": "95c2d4d2-924e-4e0d-ea2d-457f9353c10c"
      },
      "cell_type": "code",
      "source": [
        "model = KMeans(n_clusters=2)\n",
        "model.fit(X)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,\n",
              "    n_clusters=2, n_init=10, n_jobs=1, precompute_distances='auto',\n",
              "    random_state=None, tol=0.0001, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 347
        }
      ]
    },
    {
      "metadata": {
        "id": "qtbGK8oQ2Y-t",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "学習したモデルをもとにクラスタリングを行いましょう．"
      ]
    },
    {
      "metadata": {
        "id": "6cErnCgr2Y-t",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "y = model.predict(X)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ekKSak-Z2Y-u",
        "colab_type": "code",
        "colab": {},
        "outputId": "e82b438a-dcca-4dc0-910c-05ea04fcbe52"
      },
      "cell_type": "code",
      "source": [
        "print(y)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "gtHsUwgZ2Y-v",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Numpyを使って条件に当てはまるサンプルだけを抽出し，結果を可視化してみましょう．"
      ]
    },
    {
      "metadata": {
        "id": "_y84lt4_2Y-v",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X0 = X[y==0]\n",
        "X1 = X[y==1]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "_lOY_Fs-2Y-w",
        "colab_type": "code",
        "colab": {},
        "outputId": "95f5b5eb-11bf-4806-cea1-f6d30276e627"
      },
      "cell_type": "code",
      "source": [
        "plt.scatter(X0[:, 0], X0[:, 1], color='red')\n",
        "plt.scatter(X1[:, 0], X1[:,1 ], color='blue')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x28640b6c8d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 356
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}